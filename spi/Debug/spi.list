
spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ffc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003108  08003108  00004108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003198  08003198  00005070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003198  08003198  00005070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003198  08003198  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003198  08003198  00004198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800319c  0800319c  0000419c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080031a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000070  08003210  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003210  00005288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008841  00000000  00000000  00005099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180f  00000000  00000000  0000d8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0000f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a7  00000000  00000000  0000f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c9c  00000000  00000000  0001004f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e08  00000000  00000000  00027ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008580d  00000000  00000000  00031af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b00  00000000  00000000  000b7344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000b9e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080030f0 	.word	0x080030f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080030f0 	.word	0x080030f0

0800014c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <__io_putchar+0x20>)
 800015e:	f001 fe20 	bl	8001da2 <HAL_UART_Transmit>
    return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000e4 	.word	0x200000e4

08000170 <compute_response>:

static void compute_response(const uint8_t in[BUFFER_SIZE], uint8_t out[BUFFER_SIZE])
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
    for (int i=0; i<BUFFER_SIZE; i++) {
 800017a:	2300      	movs	r3, #0
 800017c:	60fb      	str	r3, [r7, #12]
 800017e:	e016      	b.n	80001ae <compute_response+0x3e>
        uint8_t c = in[i];
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	72fb      	strb	r3, [r7, #11]
        out[i] = (c >= 'a' && c <= 'z') ? (uint8_t)(c - 'a' + 'A') : c;
 800018a:	7afb      	ldrb	r3, [r7, #11]
 800018c:	2b60      	cmp	r3, #96	@ 0x60
 800018e:	d906      	bls.n	800019e <compute_response+0x2e>
 8000190:	7afb      	ldrb	r3, [r7, #11]
 8000192:	2b7a      	cmp	r3, #122	@ 0x7a
 8000194:	d803      	bhi.n	800019e <compute_response+0x2e>
 8000196:	7afb      	ldrb	r3, [r7, #11]
 8000198:	3b20      	subs	r3, #32
 800019a:	b2db      	uxtb	r3, r3
 800019c:	e000      	b.n	80001a0 <compute_response+0x30>
 800019e:	7afb      	ldrb	r3, [r7, #11]
 80001a0:	68fa      	ldr	r2, [r7, #12]
 80001a2:	6839      	ldr	r1, [r7, #0]
 80001a4:	440a      	add	r2, r1
 80001a6:	7013      	strb	r3, [r2, #0]
    for (int i=0; i<BUFFER_SIZE; i++) {
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	3301      	adds	r3, #1
 80001ac:	60fb      	str	r3, [r7, #12]
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2b05      	cmp	r3, #5
 80001b2:	dde5      	ble.n	8000180 <compute_response+0x10>
    }
    out[0] = 'O';
 80001b4:	683b      	ldr	r3, [r7, #0]
 80001b6:	224f      	movs	r2, #79	@ 0x4f
 80001b8:	701a      	strb	r2, [r3, #0]
    out[1] = 'K';
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	3301      	adds	r3, #1
 80001be:	224b      	movs	r2, #75	@ 0x4b
 80001c0:	701a      	strb	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	3714      	adds	r7, #20
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fb71 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f8a1 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f93d 	bl	8000458 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001de:	f000 f911 	bl	8000404 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80001e2:	f000 f8dd 	bl	80003a0 <MX_SPI2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_SPI_TransmitReceive(&hspi2, tx, rx, BUFFER_SIZE, HAL_MAX_DELAY) == HAL_OK) {
 80001e6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ea:	9300      	str	r3, [sp, #0]
 80001ec:	2306      	movs	r3, #6
 80001ee:	4a42      	ldr	r2, [pc, #264]	@ (80002f8 <main+0x12c>)
 80001f0:	4942      	ldr	r1, [pc, #264]	@ (80002fc <main+0x130>)
 80001f2:	4843      	ldr	r0, [pc, #268]	@ (8000300 <main+0x134>)
 80001f4:	f001 fb22 	bl	800183c <HAL_SPI_TransmitReceive>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d174      	bne.n	80002e8 <main+0x11c>
		  /* 디버그 출력(선택): 방금 받은 요청을 UART로 보기 */
		  printf("RX: ");
 80001fe:	4841      	ldr	r0, [pc, #260]	@ (8000304 <main+0x138>)
 8000200:	f002 f866 	bl	80022d0 <iprintf>
		  for (int i=0; i<BUFFER_SIZE; i++) printf("%02X ", rx[i]);
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	e00a      	b.n	8000220 <main+0x54>
 800020a:	4a3b      	ldr	r2, [pc, #236]	@ (80002f8 <main+0x12c>)
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	4413      	add	r3, r2
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	4619      	mov	r1, r3
 8000214:	483c      	ldr	r0, [pc, #240]	@ (8000308 <main+0x13c>)
 8000216:	f002 f85b 	bl	80022d0 <iprintf>
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	3301      	adds	r3, #1
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	2b05      	cmp	r3, #5
 8000224:	ddf1      	ble.n	800020a <main+0x3e>
		  printf(" | \"");
 8000226:	4839      	ldr	r0, [pc, #228]	@ (800030c <main+0x140>)
 8000228:	f002 f852 	bl	80022d0 <iprintf>
		  for (int i=0; i<BUFFER_SIZE; i++) putchar((rx[i]>=32 && rx[i]<=126) ? rx[i] : '.');
 800022c:	2300      	movs	r3, #0
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	e017      	b.n	8000262 <main+0x96>
 8000232:	4a31      	ldr	r2, [pc, #196]	@ (80002f8 <main+0x12c>)
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4413      	add	r3, r2
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b1f      	cmp	r3, #31
 800023c:	d90a      	bls.n	8000254 <main+0x88>
 800023e:	4a2e      	ldr	r2, [pc, #184]	@ (80002f8 <main+0x12c>)
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	4413      	add	r3, r2
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b7e      	cmp	r3, #126	@ 0x7e
 8000248:	d804      	bhi.n	8000254 <main+0x88>
 800024a:	4a2b      	ldr	r2, [pc, #172]	@ (80002f8 <main+0x12c>)
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	4413      	add	r3, r2
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	e000      	b.n	8000256 <main+0x8a>
 8000254:	232e      	movs	r3, #46	@ 0x2e
 8000256:	4618      	mov	r0, r3
 8000258:	f002 f84c 	bl	80022f4 <putchar>
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	3301      	adds	r3, #1
 8000260:	60bb      	str	r3, [r7, #8]
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	2b05      	cmp	r3, #5
 8000266:	dde4      	ble.n	8000232 <main+0x66>
		  printf("\"\r\n");
 8000268:	4829      	ldr	r0, [pc, #164]	@ (8000310 <main+0x144>)
 800026a:	f002 f8a1 	bl	80023b0 <puts>

		  /* 다음 프레임에 보낼 응답 만들기 */
		  compute_response(rx, tx);
 800026e:	4923      	ldr	r1, [pc, #140]	@ (80002fc <main+0x130>)
 8000270:	4821      	ldr	r0, [pc, #132]	@ (80002f8 <main+0x12c>)
 8000272:	f7ff ff7d 	bl	8000170 <compute_response>

		  /* 디버그 출력(선택): 다음 프레임에서 나갈 응답 미리 보기 */
		  printf("NEXT TX: ");
 8000276:	4827      	ldr	r0, [pc, #156]	@ (8000314 <main+0x148>)
 8000278:	f002 f82a 	bl	80022d0 <iprintf>
		  for (int i=0; i<BUFFER_SIZE; i++) printf("%02X ", tx[i]);
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	e00a      	b.n	8000298 <main+0xcc>
 8000282:	4a1e      	ldr	r2, [pc, #120]	@ (80002fc <main+0x130>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4413      	add	r3, r2
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	4619      	mov	r1, r3
 800028c:	481e      	ldr	r0, [pc, #120]	@ (8000308 <main+0x13c>)
 800028e:	f002 f81f 	bl	80022d0 <iprintf>
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3301      	adds	r3, #1
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b05      	cmp	r3, #5
 800029c:	ddf1      	ble.n	8000282 <main+0xb6>
		  printf(" | \"");
 800029e:	481b      	ldr	r0, [pc, #108]	@ (800030c <main+0x140>)
 80002a0:	f002 f816 	bl	80022d0 <iprintf>
		  for (int i=0; i<BUFFER_SIZE; i++) putchar((tx[i]>=32 && tx[i]<=126) ? tx[i] : '.');
 80002a4:	2300      	movs	r3, #0
 80002a6:	603b      	str	r3, [r7, #0]
 80002a8:	e017      	b.n	80002da <main+0x10e>
 80002aa:	4a14      	ldr	r2, [pc, #80]	@ (80002fc <main+0x130>)
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	4413      	add	r3, r2
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b1f      	cmp	r3, #31
 80002b4:	d90a      	bls.n	80002cc <main+0x100>
 80002b6:	4a11      	ldr	r2, [pc, #68]	@ (80002fc <main+0x130>)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	4413      	add	r3, r2
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b7e      	cmp	r3, #126	@ 0x7e
 80002c0:	d804      	bhi.n	80002cc <main+0x100>
 80002c2:	4a0e      	ldr	r2, [pc, #56]	@ (80002fc <main+0x130>)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	e000      	b.n	80002ce <main+0x102>
 80002cc:	232e      	movs	r3, #46	@ 0x2e
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 f810 	bl	80022f4 <putchar>
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	3301      	adds	r3, #1
 80002d8:	603b      	str	r3, [r7, #0]
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	2b05      	cmp	r3, #5
 80002de:	dde4      	ble.n	80002aa <main+0xde>
		  printf("\"\r\n");
 80002e0:	480b      	ldr	r0, [pc, #44]	@ (8000310 <main+0x144>)
 80002e2:	f002 f865 	bl	80023b0 <puts>
 80002e6:	e77e      	b.n	80001e6 <main+0x1a>
	  } else {
		  /* 에러 시, 다음 프레임은 에러 패턴 */
		  memcpy(tx, (const uint8_t *)"ERR!!!", BUFFER_SIZE);
 80002e8:	4b04      	ldr	r3, [pc, #16]	@ (80002fc <main+0x130>)
 80002ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000318 <main+0x14c>)
 80002ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f0:	6018      	str	r0, [r3, #0]
 80002f2:	3304      	adds	r3, #4
 80002f4:	8019      	strh	r1, [r3, #0]
	  if (HAL_SPI_TransmitReceive(&hspi2, tx, rx, BUFFER_SIZE, HAL_MAX_DELAY) == HAL_OK) {
 80002f6:	e776      	b.n	80001e6 <main+0x1a>
 80002f8:	2000012c 	.word	0x2000012c
 80002fc:	20000000 	.word	0x20000000
 8000300:	2000008c 	.word	0x2000008c
 8000304:	08003108 	.word	0x08003108
 8000308:	08003110 	.word	0x08003110
 800030c:	08003118 	.word	0x08003118
 8000310:	08003120 	.word	0x08003120
 8000314:	08003124 	.word	0x08003124
 8000318:	08003130 	.word	0x08003130

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b090      	sub	sp, #64	@ 0x40
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0318 	add.w	r3, r7, #24
 8000326:	2228      	movs	r2, #40	@ 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f002 f920 	bl	8002570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033e:	2302      	movs	r3, #2
 8000340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000342:	2301      	movs	r3, #1
 8000344:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	2310      	movs	r3, #16
 8000348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	2302      	movs	r3, #2
 800034c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800034e:	2300      	movs	r3, #0
 8000350:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000352:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0318 	add.w	r3, r7, #24
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fdd9 	bl	8000f14 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000368:	f000 f8e4 	bl	8000534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000370:	2302      	movs	r3, #2
 8000372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800037c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2102      	movs	r1, #2
 8000386:	4618      	mov	r0, r3
 8000388:	f001 f846 	bl	8001418 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000392:	f000 f8cf 	bl	8000534 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3740      	adds	r7, #64	@ 0x40
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003a4:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003a6:	4a16      	ldr	r2, [pc, #88]	@ (8000400 <MX_SPI2_Init+0x60>)
 80003a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80003aa:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003b0:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003b6:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003e2:	220a      	movs	r2, #10
 80003e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	@ (80003fc <MX_SPI2_Init+0x5c>)
 80003e8:	f001 f9a4 	bl	8001734 <HAL_SPI_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 80003f2:	f000 f89f 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000008c 	.word	0x2000008c
 8000400:	40003800 	.word	0x40003800

08000404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000408:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <MX_USART2_UART_Init+0x4c>)
 800040a:	4a12      	ldr	r2, [pc, #72]	@ (8000454 <MX_USART2_UART_Init+0x50>)
 800040c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800040e:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <MX_USART2_UART_Init+0x4c>)
 8000410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000416:	4b0e      	ldr	r3, [pc, #56]	@ (8000450 <MX_USART2_UART_Init+0x4c>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800041c:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <MX_USART2_UART_Init+0x4c>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000422:	4b0b      	ldr	r3, [pc, #44]	@ (8000450 <MX_USART2_UART_Init+0x4c>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000428:	4b09      	ldr	r3, [pc, #36]	@ (8000450 <MX_USART2_UART_Init+0x4c>)
 800042a:	220c      	movs	r2, #12
 800042c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042e:	4b08      	ldr	r3, [pc, #32]	@ (8000450 <MX_USART2_UART_Init+0x4c>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000434:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <MX_USART2_UART_Init+0x4c>)
 8000436:	2200      	movs	r2, #0
 8000438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800043a:	4805      	ldr	r0, [pc, #20]	@ (8000450 <MX_USART2_UART_Init+0x4c>)
 800043c:	f001 fc61 	bl	8001d02 <HAL_UART_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000446:	f000 f875 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	200000e4 	.word	0x200000e4
 8000454:	40004400 	.word	0x40004400

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046c:	4b2d      	ldr	r3, [pc, #180]	@ (8000524 <MX_GPIO_Init+0xcc>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a2c      	ldr	r2, [pc, #176]	@ (8000524 <MX_GPIO_Init+0xcc>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b2a      	ldr	r3, [pc, #168]	@ (8000524 <MX_GPIO_Init+0xcc>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0310 	and.w	r3, r3, #16
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000484:	4b27      	ldr	r3, [pc, #156]	@ (8000524 <MX_GPIO_Init+0xcc>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a26      	ldr	r2, [pc, #152]	@ (8000524 <MX_GPIO_Init+0xcc>)
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b24      	ldr	r3, [pc, #144]	@ (8000524 <MX_GPIO_Init+0xcc>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0320 	and.w	r3, r3, #32
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b21      	ldr	r3, [pc, #132]	@ (8000524 <MX_GPIO_Init+0xcc>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a20      	ldr	r2, [pc, #128]	@ (8000524 <MX_GPIO_Init+0xcc>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000524 <MX_GPIO_Init+0xcc>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000524 <MX_GPIO_Init+0xcc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000524 <MX_GPIO_Init+0xcc>)
 80004ba:	f043 0308 	orr.w	r3, r3, #8
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <MX_GPIO_Init+0xcc>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0308 	and.w	r3, r3, #8
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2120      	movs	r1, #32
 80004d0:	4815      	ldr	r0, [pc, #84]	@ (8000528 <MX_GPIO_Init+0xd0>)
 80004d2:	f000 fce5 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004dc:	4b13      	ldr	r3, [pc, #76]	@ (800052c <MX_GPIO_Init+0xd4>)
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4811      	ldr	r0, [pc, #68]	@ (8000530 <MX_GPIO_Init+0xd8>)
 80004ec:	f000 fb54 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004f0:	2320      	movs	r3, #32
 80004f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2302      	movs	r3, #2
 80004fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	4808      	ldr	r0, [pc, #32]	@ (8000528 <MX_GPIO_Init+0xd0>)
 8000508:	f000 fb46 	bl	8000b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	2028      	movs	r0, #40	@ 0x28
 8000512:	f000 fb0a 	bl	8000b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000516:	2028      	movs	r0, #40	@ 0x28
 8000518:	f000 fb23 	bl	8000b62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	40010800 	.word	0x40010800
 800052c:	10110000 	.word	0x10110000
 8000530:	40011000 	.word	0x40011000

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <Error_Handler+0x8>

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000546:	4b15      	ldr	r3, [pc, #84]	@ (800059c <HAL_MspInit+0x5c>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a14      	ldr	r2, [pc, #80]	@ (800059c <HAL_MspInit+0x5c>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b12      	ldr	r3, [pc, #72]	@ (800059c <HAL_MspInit+0x5c>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <HAL_MspInit+0x5c>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <HAL_MspInit+0x5c>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <HAL_MspInit+0x5c>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <HAL_MspInit+0x60>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	4a04      	ldr	r2, [pc, #16]	@ (80005a0 <HAL_MspInit+0x60>)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010000 	.word	0x40010000

080005a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a1c      	ldr	r2, [pc, #112]	@ (8000630 <HAL_SPI_MspInit+0x8c>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d131      	bne.n	8000628 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <HAL_SPI_MspInit+0x90>)
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000634 <HAL_SPI_MspInit+0x90>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ce:	61d3      	str	r3, [r2, #28]
 80005d0:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <HAL_SPI_MspInit+0x90>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <HAL_SPI_MspInit+0x90>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a14      	ldr	r2, [pc, #80]	@ (8000634 <HAL_SPI_MspInit+0x90>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <HAL_SPI_MspInit+0x90>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0308 	and.w	r3, r3, #8
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80005f4:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80005f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	@ (8000638 <HAL_SPI_MspInit+0x94>)
 800060a:	f000 fac5 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800060e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000618:	2303      	movs	r3, #3
 800061a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <HAL_SPI_MspInit+0x94>)
 8000624:	f000 fab8 	bl	8000b98 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40003800 	.word	0x40003800
 8000634:	40021000 	.word	0x40021000
 8000638:	40010c00 	.word	0x40010c00

0800063c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a15      	ldr	r2, [pc, #84]	@ (80006ac <HAL_UART_MspInit+0x70>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d123      	bne.n	80006a4 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800065c:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <HAL_UART_MspInit+0x74>)
 800065e:	69db      	ldr	r3, [r3, #28]
 8000660:	4a13      	ldr	r2, [pc, #76]	@ (80006b0 <HAL_UART_MspInit+0x74>)
 8000662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000666:	61d3      	str	r3, [r2, #28]
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <HAL_UART_MspInit+0x74>)
 800066a:	69db      	ldr	r3, [r3, #28]
 800066c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <HAL_UART_MspInit+0x74>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a0d      	ldr	r2, [pc, #52]	@ (80006b0 <HAL_UART_MspInit+0x74>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <HAL_UART_MspInit+0x74>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800068c:	230c      	movs	r3, #12
 800068e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2302      	movs	r3, #2
 8000696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <HAL_UART_MspInit+0x78>)
 80006a0:	f000 fa7a 	bl	8000b98 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40004400 	.word	0x40004400
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010800 	.word	0x40010800

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <NMI_Handler+0x4>

080006c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <MemManage_Handler+0x4>

080006d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <UsageFault_Handler+0x4>

080006e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f000 f91c 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}

08000710 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000714:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000718:	f000 fbda 	bl	8000ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	e00a      	b.n	8000748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000732:	f3af 8000 	nop.w
 8000736:	4601      	mov	r1, r0
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	60ba      	str	r2, [r7, #8]
 800073e:	b2ca      	uxtb	r2, r1
 8000740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	3301      	adds	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	dbf0      	blt.n	8000732 <_read+0x12>
  }

  return len;
 8000750:	687b      	ldr	r3, [r7, #4]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e009      	b.n	8000780 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	60ba      	str	r2, [r7, #8]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fce9 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	dbf1      	blt.n	800076c <_write+0x12>
  }
  return len;
 8000788:	687b      	ldr	r3, [r7, #4]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_close>:

int _close(int file)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007b8:	605a      	str	r2, [r3, #4]
  return 0;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <_isatty>:

int _isatty(int file)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007da:	b480      	push	{r7}
 80007dc:	b085      	sub	sp, #20
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
	...

080007f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <_sbrk+0x5c>)
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <_sbrk+0x60>)
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <_sbrk+0x64>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <_sbrk+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	429a      	cmp	r2, r3
 8000822:	d207      	bcs.n	8000834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000824:	f001 fef2 	bl	800260c <__errno>
 8000828:	4603      	mov	r3, r0
 800082a:	220c      	movs	r2, #12
 800082c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	e009      	b.n	8000848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083a:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <_sbrk+0x64>)
 8000844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20005000 	.word	0x20005000
 8000854:	00000400 	.word	0x00000400
 8000858:	20000134 	.word	0x20000134
 800085c:	20000288 	.word	0x20000288

08000860 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800086c:	f7ff fff8 	bl	8000860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000872:	490c      	ldr	r1, [pc, #48]	@ (80008a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000874:	4a0c      	ldr	r2, [pc, #48]	@ (80008a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000888:	4c09      	ldr	r4, [pc, #36]	@ (80008b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000896:	f001 febf 	bl	8002618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089a:	f7ff fc97 	bl	80001cc <main>
  bx lr
 800089e:	4770      	bx	lr
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008a8:	080031a0 	.word	0x080031a0
  ldr r2, =_sbss
 80008ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008b0:	20000288 	.word	0x20000288

080008b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC1_2_IRQHandler>
	...

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <HAL_Init+0x28>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a07      	ldr	r2, [pc, #28]	@ (80008e0 <HAL_Init+0x28>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f000 f923 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 f808 	bl	80008e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d4:	f7ff fe34 	bl	8000540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40022000 	.word	0x40022000

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_InitTick+0x54>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <HAL_InitTick+0x58>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f93b 	bl	8000b7e <HAL_SYSTICK_Config>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e00e      	b.n	8000930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d80a      	bhi.n	800092e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f000 f903 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000924:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <HAL_InitTick+0x5c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000008 	.word	0x20000008
 800093c:	20000010 	.word	0x20000010
 8000940:	2000000c 	.word	0x2000000c

08000944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_IncTick+0x1c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <HAL_IncTick+0x20>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a03      	ldr	r2, [pc, #12]	@ (8000964 <HAL_IncTick+0x20>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000010 	.word	0x20000010
 8000964:	20000138 	.word	0x20000138

08000968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b02      	ldr	r3, [pc, #8]	@ (8000978 <HAL_GetTick+0x10>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000138 	.word	0x20000138

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db0b      	blt.n	8000a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 021f 	and.w	r2, r3, #31
 80009f8:	4906      	ldr	r1, [pc, #24]	@ (8000a14 <__NVIC_EnableIRQ+0x34>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	@ (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	@ (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	@ 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	@ 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff90 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff2d 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff42 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff90 	bl	8000a6c <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5f 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff35 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffa2 	bl	8000ad0 <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b08b      	sub	sp, #44	@ 0x2c
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000baa:	e169      	b.n	8000e80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bac:	2201      	movs	r2, #1
 8000bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f040 8158 	bne.w	8000e7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	4a9a      	ldr	r2, [pc, #616]	@ (8000e38 <HAL_GPIO_Init+0x2a0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d05e      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000bd4:	4a98      	ldr	r2, [pc, #608]	@ (8000e38 <HAL_GPIO_Init+0x2a0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d875      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000bda:	4a98      	ldr	r2, [pc, #608]	@ (8000e3c <HAL_GPIO_Init+0x2a4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d058      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000be0:	4a96      	ldr	r2, [pc, #600]	@ (8000e3c <HAL_GPIO_Init+0x2a4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d86f      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000be6:	4a96      	ldr	r2, [pc, #600]	@ (8000e40 <HAL_GPIO_Init+0x2a8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d052      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000bec:	4a94      	ldr	r2, [pc, #592]	@ (8000e40 <HAL_GPIO_Init+0x2a8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d869      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000bf2:	4a94      	ldr	r2, [pc, #592]	@ (8000e44 <HAL_GPIO_Init+0x2ac>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d04c      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000bf8:	4a92      	ldr	r2, [pc, #584]	@ (8000e44 <HAL_GPIO_Init+0x2ac>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d863      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000bfe:	4a92      	ldr	r2, [pc, #584]	@ (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d046      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000c04:	4a90      	ldr	r2, [pc, #576]	@ (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d85d      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000c0a:	2b12      	cmp	r3, #18
 8000c0c:	d82a      	bhi.n	8000c64 <HAL_GPIO_Init+0xcc>
 8000c0e:	2b12      	cmp	r3, #18
 8000c10:	d859      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000c12:	a201      	add	r2, pc, #4	@ (adr r2, 8000c18 <HAL_GPIO_Init+0x80>)
 8000c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c18:	08000c93 	.word	0x08000c93
 8000c1c:	08000c6d 	.word	0x08000c6d
 8000c20:	08000c7f 	.word	0x08000c7f
 8000c24:	08000cc1 	.word	0x08000cc1
 8000c28:	08000cc7 	.word	0x08000cc7
 8000c2c:	08000cc7 	.word	0x08000cc7
 8000c30:	08000cc7 	.word	0x08000cc7
 8000c34:	08000cc7 	.word	0x08000cc7
 8000c38:	08000cc7 	.word	0x08000cc7
 8000c3c:	08000cc7 	.word	0x08000cc7
 8000c40:	08000cc7 	.word	0x08000cc7
 8000c44:	08000cc7 	.word	0x08000cc7
 8000c48:	08000cc7 	.word	0x08000cc7
 8000c4c:	08000cc7 	.word	0x08000cc7
 8000c50:	08000cc7 	.word	0x08000cc7
 8000c54:	08000cc7 	.word	0x08000cc7
 8000c58:	08000cc7 	.word	0x08000cc7
 8000c5c:	08000c75 	.word	0x08000c75
 8000c60:	08000c89 	.word	0x08000c89
 8000c64:	4a79      	ldr	r2, [pc, #484]	@ (8000e4c <HAL_GPIO_Init+0x2b4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d013      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c6a:	e02c      	b.n	8000cc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e029      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e024      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	3308      	adds	r3, #8
 8000c84:	623b      	str	r3, [r7, #32]
          break;
 8000c86:	e01f      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	330c      	adds	r3, #12
 8000c8e:	623b      	str	r3, [r7, #32]
          break;
 8000c90:	e01a      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	623b      	str	r3, [r7, #32]
          break;
 8000c9e:	e013      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	611a      	str	r2, [r3, #16]
          break;
 8000cb2:	e009      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	615a      	str	r2, [r3, #20]
          break;
 8000cbe:	e003      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	e000      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          break;
 8000cc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2bff      	cmp	r3, #255	@ 0xff
 8000ccc:	d801      	bhi.n	8000cd2 <HAL_GPIO_Init+0x13a>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	e001      	b.n	8000cd6 <HAL_GPIO_Init+0x13e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	2bff      	cmp	r3, #255	@ 0xff
 8000cdc:	d802      	bhi.n	8000ce4 <HAL_GPIO_Init+0x14c>
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	e002      	b.n	8000cea <HAL_GPIO_Init+0x152>
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce6:	3b08      	subs	r3, #8
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	6a39      	ldr	r1, [r7, #32]
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	431a      	orrs	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d18:	4b4d      	ldr	r3, [pc, #308]	@ (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a4c      	ldr	r2, [pc, #304]	@ (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b4a      	ldr	r3, [pc, #296]	@ (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d30:	4a48      	ldr	r2, [pc, #288]	@ (8000e54 <HAL_GPIO_Init+0x2bc>)
 8000d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	3302      	adds	r3, #2
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a40      	ldr	r2, [pc, #256]	@ (8000e58 <HAL_GPIO_Init+0x2c0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d013      	beq.n	8000d84 <HAL_GPIO_Init+0x1ec>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e5c <HAL_GPIO_Init+0x2c4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d00d      	beq.n	8000d80 <HAL_GPIO_Init+0x1e8>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a3e      	ldr	r2, [pc, #248]	@ (8000e60 <HAL_GPIO_Init+0x2c8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d007      	beq.n	8000d7c <HAL_GPIO_Init+0x1e4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e64 <HAL_GPIO_Init+0x2cc>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d101      	bne.n	8000d78 <HAL_GPIO_Init+0x1e0>
 8000d74:	2303      	movs	r3, #3
 8000d76:	e006      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d78:	2304      	movs	r3, #4
 8000d7a:	e004      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e002      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d84:	2300      	movs	r3, #0
 8000d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d88:	f002 0203 	and.w	r2, r2, #3
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	4093      	lsls	r3, r2
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d96:	492f      	ldr	r1, [pc, #188]	@ (8000e54 <HAL_GPIO_Init+0x2bc>)
 8000d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000db0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	492c      	ldr	r1, [pc, #176]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	608b      	str	r3, [r1, #8]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4928      	ldr	r1, [pc, #160]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dd8:	4b23      	ldr	r3, [pc, #140]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	4922      	ldr	r1, [pc, #136]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60cb      	str	r3, [r1, #12]
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de6:	4b20      	ldr	r3, [pc, #128]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	491e      	ldr	r1, [pc, #120]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e00:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	4918      	ldr	r1, [pc, #96]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	604b      	str	r3, [r1, #4]
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e0e:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4914      	ldr	r1, [pc, #80]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d021      	beq.n	8000e6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e28:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	490e      	ldr	r1, [pc, #56]	@ (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
 8000e34:	e021      	b.n	8000e7a <HAL_GPIO_Init+0x2e2>
 8000e36:	bf00      	nop
 8000e38:	10320000 	.word	0x10320000
 8000e3c:	10310000 	.word	0x10310000
 8000e40:	10220000 	.word	0x10220000
 8000e44:	10210000 	.word	0x10210000
 8000e48:	10120000 	.word	0x10120000
 8000e4c:	10110000 	.word	0x10110000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40011400 	.word	0x40011400
 8000e68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <HAL_GPIO_Init+0x304>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	4909      	ldr	r1, [pc, #36]	@ (8000e9c <HAL_GPIO_Init+0x304>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e86:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f47f ae8e 	bne.w	8000bac <HAL_GPIO_Init+0x14>
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	372c      	adds	r7, #44	@ 0x2c
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
 8000eac:	4613      	mov	r3, r2
 8000eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eb0:	787b      	ldrb	r3, [r7, #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ebc:	e003      	b.n	8000ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	041a      	lsls	r2, r3, #16
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	611a      	str	r2, [r3, #16]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eda:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f806 	bl	8000f00 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e272      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8087 	beq.w	8001042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f34:	4b92      	ldr	r3, [pc, #584]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 030c 	and.w	r3, r3, #12
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d00c      	beq.n	8000f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f40:	4b8f      	ldr	r3, [pc, #572]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d112      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5e>
 8000f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f58:	d10b      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5a:	4b89      	ldr	r3, [pc, #548]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d06c      	beq.n	8001040 <HAL_RCC_OscConfig+0x12c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d168      	bne.n	8001040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e24c      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f7a:	d106      	bne.n	8000f8a <HAL_RCC_OscConfig+0x76>
 8000f7c:	4b80      	ldr	r3, [pc, #512]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a7f      	ldr	r2, [pc, #508]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e02e      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <HAL_RCC_OscConfig+0x98>
 8000f92:	4b7b      	ldr	r3, [pc, #492]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a7a      	ldr	r2, [pc, #488]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b78      	ldr	r3, [pc, #480]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a77      	ldr	r2, [pc, #476]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e01d      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fb4:	d10c      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xbc>
 8000fb6:	4b72      	ldr	r3, [pc, #456]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a71      	ldr	r2, [pc, #452]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e00b      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a6a      	ldr	r2, [pc, #424]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b68      	ldr	r3, [pc, #416]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a67      	ldr	r2, [pc, #412]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d013      	beq.n	8001018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fcba 	bl	8000968 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fcb6 	bl	8000968 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	@ 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e200      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	4b5d      	ldr	r3, [pc, #372]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0xe4>
 8001016:	e014      	b.n	8001042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fca6 	bl	8000968 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fca2 	bl	8000968 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	@ 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e1ec      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001032:	4b53      	ldr	r3, [pc, #332]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x10c>
 800103e:	e000      	b.n	8001042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d063      	beq.n	8001116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800104e:	4b4c      	ldr	r3, [pc, #304]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00b      	beq.n	8001072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800105a:	4b49      	ldr	r3, [pc, #292]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b08      	cmp	r3, #8
 8001064:	d11c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x18c>
 8001066:	4b46      	ldr	r3, [pc, #280]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d116      	bne.n	80010a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001072:	4b43      	ldr	r3, [pc, #268]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x176>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e1c0      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b3d      	ldr	r3, [pc, #244]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4939      	ldr	r1, [pc, #228]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109e:	e03a      	b.n	8001116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a8:	4b36      	ldr	r3, [pc, #216]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fc5b 	bl	8000968 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc57 	bl	8000968 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e1a1      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4927      	ldr	r1, [pc, #156]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
 80010e8:	e015      	b.n	8001116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fc3a 	bl	8000968 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f8:	f7ff fc36 	bl	8000968 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e180      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d03a      	beq.n	8001198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d019      	beq.n	800115e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <HAL_RCC_OscConfig+0x274>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001130:	f7ff fc1a 	bl	8000968 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff fc16 	bl	8000968 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e160      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <HAL_RCC_OscConfig+0x26c>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f000 face 	bl	80016f8 <RCC_Delay>
 800115c:	e01c      	b.n	8001198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_RCC_OscConfig+0x274>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fc00 	bl	8000968 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116a:	e00f      	b.n	800118c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fbfc 	bl	8000968 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d908      	bls.n	800118c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e146      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	42420000 	.word	0x42420000
 8001188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	4b92      	ldr	r3, [pc, #584]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e9      	bne.n	800116c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80a6 	beq.w	80012f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011aa:	4b8b      	ldr	r3, [pc, #556]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10d      	bne.n	80011d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b88      	ldr	r3, [pc, #544]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a87      	ldr	r2, [pc, #540]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b85      	ldr	r3, [pc, #532]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ce:	2301      	movs	r3, #1
 80011d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d2:	4b82      	ldr	r3, [pc, #520]	@ (80013dc <HAL_RCC_OscConfig+0x4c8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d118      	bne.n	8001210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011de:	4b7f      	ldr	r3, [pc, #508]	@ (80013dc <HAL_RCC_OscConfig+0x4c8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a7e      	ldr	r2, [pc, #504]	@ (80013dc <HAL_RCC_OscConfig+0x4c8>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fbbd 	bl	8000968 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f2:	f7ff fbb9 	bl	8000968 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b64      	cmp	r3, #100	@ 0x64
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e103      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	4b75      	ldr	r3, [pc, #468]	@ (80013dc <HAL_RCC_OscConfig+0x4c8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x312>
 8001218:	4b6f      	ldr	r3, [pc, #444]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4a6e      	ldr	r2, [pc, #440]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6213      	str	r3, [r2, #32]
 8001224:	e02d      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x334>
 800122e:	4b6a      	ldr	r3, [pc, #424]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a69      	ldr	r2, [pc, #420]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	4b67      	ldr	r3, [pc, #412]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a66      	ldr	r2, [pc, #408]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	6213      	str	r3, [r2, #32]
 8001246:	e01c      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d10c      	bne.n	800126a <HAL_RCC_OscConfig+0x356>
 8001250:	4b61      	ldr	r3, [pc, #388]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a60      	ldr	r2, [pc, #384]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6213      	str	r3, [r2, #32]
 800125c:	4b5e      	ldr	r3, [pc, #376]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a5d      	ldr	r2, [pc, #372]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	e00b      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 800126a:	4b5b      	ldr	r3, [pc, #364]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a5a      	ldr	r2, [pc, #360]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6213      	str	r3, [r2, #32]
 8001276:	4b58      	ldr	r3, [pc, #352]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a57      	ldr	r2, [pc, #348]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d015      	beq.n	80012b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff fb6d 	bl	8000968 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fb69 	bl	8000968 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0b1      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a8:	4b4b      	ldr	r3, [pc, #300]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0ee      	beq.n	8001292 <HAL_RCC_OscConfig+0x37e>
 80012b4:	e014      	b.n	80012e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb57 	bl	8000968 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff fb53 	bl	8000968 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e09b      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	4b40      	ldr	r3, [pc, #256]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1ee      	bne.n	80012be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d105      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a3b      	ldr	r2, [pc, #236]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8087 	beq.w	800140a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012fc:	4b36      	ldr	r3, [pc, #216]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d061      	beq.n	80013cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d146      	bne.n	800139e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001310:	4b33      	ldr	r3, [pc, #204]	@ (80013e0 <HAL_RCC_OscConfig+0x4cc>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fb27 	bl	8000968 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb23 	bl	8000968 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e06d      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001344:	d108      	bne.n	8001358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001346:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	4921      	ldr	r1, [pc, #132]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001358:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a19      	ldr	r1, [r3, #32]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001368:	430b      	orrs	r3, r1
 800136a:	491b      	ldr	r1, [pc, #108]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <HAL_RCC_OscConfig+0x4cc>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff faf7 	bl	8000968 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff faf3 	bl	8000968 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e03d      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x46a>
 800139c:	e035      	b.n	800140a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <HAL_RCC_OscConfig+0x4cc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fae0 	bl	8000968 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fadc 	bl	8000968 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e026      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x498>
 80013ca:	e01e      	b.n	800140a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e019      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40007000 	.word	0x40007000
 80013e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <HAL_RCC_OscConfig+0x500>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d106      	bne.n	8001406 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0d0      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800142c:	4b6a      	ldr	r3, [pc, #424]	@ (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d910      	bls.n	800145c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	4b67      	ldr	r3, [pc, #412]	@ (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 0207 	bic.w	r2, r3, #7
 8001442:	4965      	ldr	r1, [pc, #404]	@ (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b63      	ldr	r3, [pc, #396]	@ (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0b8      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001474:	4b59      	ldr	r3, [pc, #356]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a58      	ldr	r2, [pc, #352]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800147e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800148c:	4b53      	ldr	r3, [pc, #332]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a52      	ldr	r2, [pc, #328]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001496:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001498:	4b50      	ldr	r3, [pc, #320]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	494d      	ldr	r1, [pc, #308]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d040      	beq.n	8001538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d115      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e07f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d6:	4b41      	ldr	r3, [pc, #260]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d109      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e073      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e6:	4b3d      	ldr	r3, [pc, #244]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e06b      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f6:	4b39      	ldr	r3, [pc, #228]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f023 0203 	bic.w	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4936      	ldr	r1, [pc, #216]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001508:	f7ff fa2e 	bl	8000968 <HAL_GetTick>
 800150c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	e00a      	b.n	8001526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001510:	f7ff fa2a 	bl	8000968 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e053      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 020c 	and.w	r2, r3, #12
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	429a      	cmp	r2, r3
 8001536:	d1eb      	bne.n	8001510 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001538:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d210      	bcs.n	8001568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 0207 	bic.w	r2, r3, #7
 800154e:	4922      	ldr	r1, [pc, #136]	@ (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e032      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4916      	ldr	r1, [pc, #88]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001592:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	490e      	ldr	r1, [pc, #56]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015a6:	f000 f821 	bl	80015ec <HAL_RCC_GetSysClockFreq>
 80015aa:	4602      	mov	r2, r0
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	490a      	ldr	r1, [pc, #40]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 80015b8:	5ccb      	ldrb	r3, [r1, r3]
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	4a09      	ldr	r2, [pc, #36]	@ (80015e4 <HAL_RCC_ClockConfig+0x1cc>)
 80015c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <HAL_RCC_ClockConfig+0x1d0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff f98c 	bl	80008e4 <HAL_InitTick>

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40022000 	.word	0x40022000
 80015dc:	40021000 	.word	0x40021000
 80015e0:	08003138 	.word	0x08003138
 80015e4:	20000008 	.word	0x20000008
 80015e8:	2000000c 	.word	0x2000000c

080015ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001606:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <HAL_RCC_GetSysClockFreq+0x94>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d002      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x30>
 8001616:	2b08      	cmp	r3, #8
 8001618:	d003      	beq.n	8001622 <HAL_RCC_GetSysClockFreq+0x36>
 800161a:	e027      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <HAL_RCC_GetSysClockFreq+0x98>)
 800161e:	613b      	str	r3, [r7, #16]
      break;
 8001620:	e027      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	4a17      	ldr	r2, [pc, #92]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x9c>)
 800162c:	5cd3      	ldrb	r3, [r2, r3]
 800162e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d010      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <HAL_RCC_GetSysClockFreq+0x94>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	0c5b      	lsrs	r3, r3, #17
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	4a11      	ldr	r2, [pc, #68]	@ (800168c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <HAL_RCC_GetSysClockFreq+0x98>)
 800164e:	fb03 f202 	mul.w	r2, r3, r2
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	fbb2 f3f3 	udiv	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e004      	b.n	8001666 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a0c      	ldr	r2, [pc, #48]	@ (8001690 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	613b      	str	r3, [r7, #16]
      break;
 800166a:	e002      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <HAL_RCC_GetSysClockFreq+0x98>)
 800166e:	613b      	str	r3, [r7, #16]
      break;
 8001670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001672:	693b      	ldr	r3, [r7, #16]
}
 8001674:	4618      	mov	r0, r3
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	007a1200 	.word	0x007a1200
 8001688:	08003150 	.word	0x08003150
 800168c:	08003160 	.word	0x08003160
 8001690:	003d0900 	.word	0x003d0900

08001694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001698:	4b02      	ldr	r3, [pc, #8]	@ (80016a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	20000008 	.word	0x20000008

080016a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016ac:	f7ff fff2 	bl	8001694 <HAL_RCC_GetHCLKFreq>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	4903      	ldr	r1, [pc, #12]	@ (80016cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016be:	5ccb      	ldrb	r3, [r1, r3]
 80016c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40021000 	.word	0x40021000
 80016cc:	08003148 	.word	0x08003148

080016d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016d4:	f7ff ffde 	bl	8001694 <HAL_RCC_GetHCLKFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	0adb      	lsrs	r3, r3, #11
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	4903      	ldr	r1, [pc, #12]	@ (80016f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08003148 	.word	0x08003148

080016f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <RCC_Delay+0x34>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <RCC_Delay+0x38>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0a5b      	lsrs	r3, r3, #9
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001714:	bf00      	nop
  }
  while (Delay --);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1e5a      	subs	r2, r3, #1
 800171a:	60fa      	str	r2, [r7, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f9      	bne.n	8001714 <RCC_Delay+0x1c>
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	20000008 	.word	0x20000008
 8001730:	10624dd3 	.word	0x10624dd3

08001734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e076      	b.n	8001834 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174a:	2b00      	cmp	r3, #0
 800174c:	d108      	bne.n	8001760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001756:	d009      	beq.n	800176c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
 800175e:	e005      	b.n	800176c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d106      	bne.n	800178c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7fe ff0c 	bl	80005a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80017a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f0:	ea42 0103 	orr.w	r1, r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	0c1a      	lsrs	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f002 0204 	and.w	r2, r2, #4
 8001812:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001822:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	@ 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800184a:	2301      	movs	r3, #1
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800184e:	f7ff f88b 	bl	8000968 <HAL_GetTick>
 8001852:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800185a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001866:	7ffb      	ldrb	r3, [r7, #31]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d00c      	beq.n	8001886 <HAL_SPI_TransmitReceive+0x4a>
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001872:	d106      	bne.n	8001882 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <HAL_SPI_TransmitReceive+0x46>
 800187c:	7ffb      	ldrb	r3, [r7, #31]
 800187e:	2b04      	cmp	r3, #4
 8001880:	d001      	beq.n	8001886 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001882:	2302      	movs	r3, #2
 8001884:	e17f      	b.n	8001b86 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_SPI_TransmitReceive+0x5c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_SPI_TransmitReceive+0x5c>
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e174      	b.n	8001b86 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_SPI_TransmitReceive+0x6e>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e16d      	b.n	8001b86 <HAL_SPI_TransmitReceive+0x34a>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d003      	beq.n	80018c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2205      	movs	r2, #5
 80018c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	887a      	ldrh	r2, [r7, #2]
 80018d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	887a      	ldrh	r2, [r7, #2]
 80018ee:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001906:	2b40      	cmp	r3, #64	@ 0x40
 8001908:	d007      	beq.n	800191a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001922:	d17e      	bne.n	8001a22 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <HAL_SPI_TransmitReceive+0xf6>
 800192c:	8afb      	ldrh	r3, [r7, #22]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d16c      	bne.n	8001a0c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	881a      	ldrh	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	1c9a      	adds	r2, r3, #2
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001956:	e059      	b.n	8001a0c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b02      	cmp	r3, #2
 8001964:	d11b      	bne.n	800199e <HAL_SPI_TransmitReceive+0x162>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800196a:	b29b      	uxth	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d016      	beq.n	800199e <HAL_SPI_TransmitReceive+0x162>
 8001970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001972:	2b01      	cmp	r3, #1
 8001974:	d113      	bne.n	800199e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	881a      	ldrh	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	1c9a      	adds	r2, r3, #2
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d119      	bne.n	80019e0 <HAL_SPI_TransmitReceive+0x1a4>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d014      	beq.n	80019e0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c0:	b292      	uxth	r2, r2
 80019c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c8:	1c9a      	adds	r2, r3, #2
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80019e0:	f7fe ffc2 	bl	8000968 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d80d      	bhi.n	8001a0c <HAL_SPI_TransmitReceive+0x1d0>
 80019f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f6:	d009      	beq.n	8001a0c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0bc      	b.n	8001b86 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1a0      	bne.n	8001958 <HAL_SPI_TransmitReceive+0x11c>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d19b      	bne.n	8001958 <HAL_SPI_TransmitReceive+0x11c>
 8001a20:	e082      	b.n	8001b28 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_SPI_TransmitReceive+0x1f4>
 8001a2a:	8afb      	ldrh	r3, [r7, #22]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d171      	bne.n	8001b14 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	330c      	adds	r3, #12
 8001a3a:	7812      	ldrb	r2, [r2, #0]
 8001a3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a56:	e05d      	b.n	8001b14 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d11c      	bne.n	8001aa0 <HAL_SPI_TransmitReceive+0x264>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d017      	beq.n	8001aa0 <HAL_SPI_TransmitReceive+0x264>
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d114      	bne.n	8001aa0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	330c      	adds	r3, #12
 8001a80:	7812      	ldrb	r2, [r2, #0]
 8001a82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d119      	bne.n	8001ae2 <HAL_SPI_TransmitReceive+0x2a6>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d014      	beq.n	8001ae2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001ae2:	f7fe ff41 	bl	8000968 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d803      	bhi.n	8001afa <HAL_SPI_TransmitReceive+0x2be>
 8001af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d102      	bne.n	8001b00 <HAL_SPI_TransmitReceive+0x2c4>
 8001afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e038      	b.n	8001b86 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d19c      	bne.n	8001a58 <HAL_SPI_TransmitReceive+0x21c>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d197      	bne.n	8001a58 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f8b7 	bl	8001ca0 <SPI_EndRxTxTransaction>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e01d      	b.n	8001b86 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10a      	bne.n	8001b68 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8001b84:	2300      	movs	r3, #0
  }
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3728      	adds	r7, #40	@ 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ba0:	f7fe fee2 	bl	8000968 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	4413      	add	r3, r2
 8001bae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001bb0:	f7fe feda 	bl	8000968 <HAL_GetTick>
 8001bb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001bb6:	4b39      	ldr	r3, [pc, #228]	@ (8001c9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	015b      	lsls	r3, r3, #5
 8001bbc:	0d1b      	lsrs	r3, r3, #20
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bc6:	e054      	b.n	8001c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bce:	d050      	beq.n	8001c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001bd0:	f7fe feca 	bl	8000968 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d902      	bls.n	8001be6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d13d      	bne.n	8001c62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001bf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bfe:	d111      	bne.n	8001c24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c08:	d004      	beq.n	8001c14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c12:	d107      	bne.n	8001c24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c2c:	d10f      	bne.n	8001c4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e017      	b.n	8001c92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d19b      	bne.n	8001bc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000008 	.word	0x20000008

08001ca0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff ff6a 	bl	8001b90 <SPI_WaitFlagStateUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc6:	f043 0220 	orr.w	r2, r3, #32
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e013      	b.n	8001cfa <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f7ff ff57 	bl	8001b90 <SPI_WaitFlagStateUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cec:	f043 0220 	orr.w	r2, r3, #32
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e042      	b.n	8001d9a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d106      	bne.n	8001d2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7fe fc87 	bl	800063c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2224      	movs	r2, #36	@ 0x24
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f972 	bl	8002030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b08a      	sub	sp, #40	@ 0x28
 8001da6:	af02      	add	r7, sp, #8
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d175      	bne.n	8001eae <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_UART_Transmit+0x2c>
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e06e      	b.n	8001eb0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2221      	movs	r2, #33	@ 0x21
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001de0:	f7fe fdc2 	bl	8000968 <HAL_GetTick>
 8001de4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	88fa      	ldrh	r2, [r7, #6]
 8001dea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	88fa      	ldrh	r2, [r7, #6]
 8001df0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dfa:	d108      	bne.n	8001e0e <HAL_UART_Transmit+0x6c>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d104      	bne.n	8001e0e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	e003      	b.n	8001e16 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e16:	e02e      	b.n	8001e76 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2180      	movs	r1, #128	@ 0x80
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f848 	bl	8001eb8 <UART_WaitOnFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e03a      	b.n	8001eb0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e4e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	3302      	adds	r3, #2
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	e007      	b.n	8001e68 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1cb      	bne.n	8001e18 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2200      	movs	r2, #0
 8001e88:	2140      	movs	r1, #64	@ 0x40
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 f814 	bl	8001eb8 <UART_WaitOnFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e006      	b.n	8001eb0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e000      	b.n	8001eb0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
  }
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ec8:	e03b      	b.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d037      	beq.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed2:	f7fe fd49 	bl	8000968 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	6a3a      	ldr	r2, [r7, #32]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d302      	bcc.n	8001ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e03a      	b.n	8001f62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d023      	beq.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b80      	cmp	r3, #128	@ 0x80
 8001efe:	d020      	beq.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b40      	cmp	r3, #64	@ 0x40
 8001f04:	d01d      	beq.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d116      	bne.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f81d 	bl	8001f6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2208      	movs	r2, #8
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00f      	b.n	8001f62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	bf0c      	ite	eq
 8001f52:	2301      	moveq	r3, #1
 8001f54:	2300      	movne	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d0b4      	beq.n	8001eca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b095      	sub	sp, #84	@ 0x54
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	330c      	adds	r3, #12
 8001f78:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f7c:	e853 3f00 	ldrex	r3, [r3]
 8001f80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	330c      	adds	r3, #12
 8001f90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f92:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f9a:	e841 2300 	strex	r3, r2, [r1]
 8001f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1e5      	bne.n	8001f72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3314      	adds	r3, #20
 8001fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	e853 3f00 	ldrex	r3, [r3]
 8001fb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3314      	adds	r3, #20
 8001fc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fce:	e841 2300 	strex	r3, r2, [r1]
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1e5      	bne.n	8001fa6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d119      	bne.n	8002016 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	e853 3f00 	ldrex	r3, [r3]
 8001ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f023 0310 	bic.w	r3, r3, #16
 8001ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	330c      	adds	r3, #12
 8002000:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002002:	61ba      	str	r2, [r7, #24]
 8002004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002006:	6979      	ldr	r1, [r7, #20]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	e841 2300 	strex	r3, r2, [r1]
 800200e:	613b      	str	r3, [r7, #16]
   return(result);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e5      	bne.n	8001fe2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002024:	bf00      	nop
 8002026:	3754      	adds	r7, #84	@ 0x54
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
	...

08002030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800206a:	f023 030c 	bic.w	r3, r3, #12
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	430b      	orrs	r3, r1
 8002076:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2c      	ldr	r2, [pc, #176]	@ (8002144 <UART_SetConfig+0x114>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d103      	bne.n	80020a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002098:	f7ff fb1a 	bl	80016d0 <HAL_RCC_GetPCLK2Freq>
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	e002      	b.n	80020a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020a0:	f7ff fb02 	bl	80016a8 <HAL_RCC_GetPCLK1Freq>
 80020a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	009a      	lsls	r2, r3, #2
 80020b0:	441a      	add	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	4a22      	ldr	r2, [pc, #136]	@ (8002148 <UART_SetConfig+0x118>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	0119      	lsls	r1, r3, #4
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	009a      	lsls	r2, r3, #2
 80020d0:	441a      	add	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <UART_SetConfig+0x118>)
 80020de:	fba3 0302 	umull	r0, r3, r3, r2
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	2064      	movs	r0, #100	@ 0x64
 80020e6:	fb00 f303 	mul.w	r3, r0, r3
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	3332      	adds	r3, #50	@ 0x32
 80020f0:	4a15      	ldr	r2, [pc, #84]	@ (8002148 <UART_SetConfig+0x118>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020fc:	4419      	add	r1, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	009a      	lsls	r2, r3, #2
 8002108:	441a      	add	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fbb2 f2f3 	udiv	r2, r2, r3
 8002114:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <UART_SetConfig+0x118>)
 8002116:	fba3 0302 	umull	r0, r3, r3, r2
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2064      	movs	r0, #100	@ 0x64
 800211e:	fb00 f303 	mul.w	r3, r0, r3
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	3332      	adds	r3, #50	@ 0x32
 8002128:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <UART_SetConfig+0x118>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	f003 020f 	and.w	r2, r3, #15
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	440a      	add	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40013800 	.word	0x40013800
 8002148:	51eb851f 	.word	0x51eb851f

0800214c <std>:
 800214c:	2300      	movs	r3, #0
 800214e:	b510      	push	{r4, lr}
 8002150:	4604      	mov	r4, r0
 8002152:	e9c0 3300 	strd	r3, r3, [r0]
 8002156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800215a:	6083      	str	r3, [r0, #8]
 800215c:	8181      	strh	r1, [r0, #12]
 800215e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002160:	81c2      	strh	r2, [r0, #14]
 8002162:	6183      	str	r3, [r0, #24]
 8002164:	4619      	mov	r1, r3
 8002166:	2208      	movs	r2, #8
 8002168:	305c      	adds	r0, #92	@ 0x5c
 800216a:	f000 fa01 	bl	8002570 <memset>
 800216e:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <std+0x58>)
 8002170:	6224      	str	r4, [r4, #32]
 8002172:	6263      	str	r3, [r4, #36]	@ 0x24
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <std+0x5c>)
 8002176:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <std+0x60>)
 800217a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800217c:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <std+0x64>)
 800217e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <std+0x68>)
 8002182:	429c      	cmp	r4, r3
 8002184:	d006      	beq.n	8002194 <std+0x48>
 8002186:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800218a:	4294      	cmp	r4, r2
 800218c:	d002      	beq.n	8002194 <std+0x48>
 800218e:	33d0      	adds	r3, #208	@ 0xd0
 8002190:	429c      	cmp	r4, r3
 8002192:	d105      	bne.n	80021a0 <std+0x54>
 8002194:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800219c:	f000 ba60 	b.w	8002660 <__retarget_lock_init_recursive>
 80021a0:	bd10      	pop	{r4, pc}
 80021a2:	bf00      	nop
 80021a4:	080023c1 	.word	0x080023c1
 80021a8:	080023e3 	.word	0x080023e3
 80021ac:	0800241b 	.word	0x0800241b
 80021b0:	0800243f 	.word	0x0800243f
 80021b4:	2000013c 	.word	0x2000013c

080021b8 <stdio_exit_handler>:
 80021b8:	4a02      	ldr	r2, [pc, #8]	@ (80021c4 <stdio_exit_handler+0xc>)
 80021ba:	4903      	ldr	r1, [pc, #12]	@ (80021c8 <stdio_exit_handler+0x10>)
 80021bc:	4803      	ldr	r0, [pc, #12]	@ (80021cc <stdio_exit_handler+0x14>)
 80021be:	f000 b869 	b.w	8002294 <_fwalk_sglue>
 80021c2:	bf00      	nop
 80021c4:	20000014 	.word	0x20000014
 80021c8:	08002ef5 	.word	0x08002ef5
 80021cc:	20000024 	.word	0x20000024

080021d0 <cleanup_stdio>:
 80021d0:	6841      	ldr	r1, [r0, #4]
 80021d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <cleanup_stdio+0x34>)
 80021d4:	b510      	push	{r4, lr}
 80021d6:	4299      	cmp	r1, r3
 80021d8:	4604      	mov	r4, r0
 80021da:	d001      	beq.n	80021e0 <cleanup_stdio+0x10>
 80021dc:	f000 fe8a 	bl	8002ef4 <_fflush_r>
 80021e0:	68a1      	ldr	r1, [r4, #8]
 80021e2:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <cleanup_stdio+0x38>)
 80021e4:	4299      	cmp	r1, r3
 80021e6:	d002      	beq.n	80021ee <cleanup_stdio+0x1e>
 80021e8:	4620      	mov	r0, r4
 80021ea:	f000 fe83 	bl	8002ef4 <_fflush_r>
 80021ee:	68e1      	ldr	r1, [r4, #12]
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <cleanup_stdio+0x3c>)
 80021f2:	4299      	cmp	r1, r3
 80021f4:	d004      	beq.n	8002200 <cleanup_stdio+0x30>
 80021f6:	4620      	mov	r0, r4
 80021f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021fc:	f000 be7a 	b.w	8002ef4 <_fflush_r>
 8002200:	bd10      	pop	{r4, pc}
 8002202:	bf00      	nop
 8002204:	2000013c 	.word	0x2000013c
 8002208:	200001a4 	.word	0x200001a4
 800220c:	2000020c 	.word	0x2000020c

08002210 <global_stdio_init.part.0>:
 8002210:	b510      	push	{r4, lr}
 8002212:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <global_stdio_init.part.0+0x30>)
 8002214:	4c0b      	ldr	r4, [pc, #44]	@ (8002244 <global_stdio_init.part.0+0x34>)
 8002216:	4a0c      	ldr	r2, [pc, #48]	@ (8002248 <global_stdio_init.part.0+0x38>)
 8002218:	4620      	mov	r0, r4
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	2104      	movs	r1, #4
 800221e:	2200      	movs	r2, #0
 8002220:	f7ff ff94 	bl	800214c <std>
 8002224:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002228:	2201      	movs	r2, #1
 800222a:	2109      	movs	r1, #9
 800222c:	f7ff ff8e 	bl	800214c <std>
 8002230:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002234:	2202      	movs	r2, #2
 8002236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800223a:	2112      	movs	r1, #18
 800223c:	f7ff bf86 	b.w	800214c <std>
 8002240:	20000274 	.word	0x20000274
 8002244:	2000013c 	.word	0x2000013c
 8002248:	080021b9 	.word	0x080021b9

0800224c <__sfp_lock_acquire>:
 800224c:	4801      	ldr	r0, [pc, #4]	@ (8002254 <__sfp_lock_acquire+0x8>)
 800224e:	f000 ba08 	b.w	8002662 <__retarget_lock_acquire_recursive>
 8002252:	bf00      	nop
 8002254:	2000027d 	.word	0x2000027d

08002258 <__sfp_lock_release>:
 8002258:	4801      	ldr	r0, [pc, #4]	@ (8002260 <__sfp_lock_release+0x8>)
 800225a:	f000 ba03 	b.w	8002664 <__retarget_lock_release_recursive>
 800225e:	bf00      	nop
 8002260:	2000027d 	.word	0x2000027d

08002264 <__sinit>:
 8002264:	b510      	push	{r4, lr}
 8002266:	4604      	mov	r4, r0
 8002268:	f7ff fff0 	bl	800224c <__sfp_lock_acquire>
 800226c:	6a23      	ldr	r3, [r4, #32]
 800226e:	b11b      	cbz	r3, 8002278 <__sinit+0x14>
 8002270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002274:	f7ff bff0 	b.w	8002258 <__sfp_lock_release>
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <__sinit+0x28>)
 800227a:	6223      	str	r3, [r4, #32]
 800227c:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <__sinit+0x2c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f5      	bne.n	8002270 <__sinit+0xc>
 8002284:	f7ff ffc4 	bl	8002210 <global_stdio_init.part.0>
 8002288:	e7f2      	b.n	8002270 <__sinit+0xc>
 800228a:	bf00      	nop
 800228c:	080021d1 	.word	0x080021d1
 8002290:	20000274 	.word	0x20000274

08002294 <_fwalk_sglue>:
 8002294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002298:	4607      	mov	r7, r0
 800229a:	4688      	mov	r8, r1
 800229c:	4614      	mov	r4, r2
 800229e:	2600      	movs	r6, #0
 80022a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022a4:	f1b9 0901 	subs.w	r9, r9, #1
 80022a8:	d505      	bpl.n	80022b6 <_fwalk_sglue+0x22>
 80022aa:	6824      	ldr	r4, [r4, #0]
 80022ac:	2c00      	cmp	r4, #0
 80022ae:	d1f7      	bne.n	80022a0 <_fwalk_sglue+0xc>
 80022b0:	4630      	mov	r0, r6
 80022b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022b6:	89ab      	ldrh	r3, [r5, #12]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d907      	bls.n	80022cc <_fwalk_sglue+0x38>
 80022bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022c0:	3301      	adds	r3, #1
 80022c2:	d003      	beq.n	80022cc <_fwalk_sglue+0x38>
 80022c4:	4629      	mov	r1, r5
 80022c6:	4638      	mov	r0, r7
 80022c8:	47c0      	blx	r8
 80022ca:	4306      	orrs	r6, r0
 80022cc:	3568      	adds	r5, #104	@ 0x68
 80022ce:	e7e9      	b.n	80022a4 <_fwalk_sglue+0x10>

080022d0 <iprintf>:
 80022d0:	b40f      	push	{r0, r1, r2, r3}
 80022d2:	b507      	push	{r0, r1, r2, lr}
 80022d4:	4906      	ldr	r1, [pc, #24]	@ (80022f0 <iprintf+0x20>)
 80022d6:	ab04      	add	r3, sp, #16
 80022d8:	6808      	ldr	r0, [r1, #0]
 80022da:	f853 2b04 	ldr.w	r2, [r3], #4
 80022de:	6881      	ldr	r1, [r0, #8]
 80022e0:	9301      	str	r3, [sp, #4]
 80022e2:	f000 fadf 	bl	80028a4 <_vfiprintf_r>
 80022e6:	b003      	add	sp, #12
 80022e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80022ec:	b004      	add	sp, #16
 80022ee:	4770      	bx	lr
 80022f0:	20000020 	.word	0x20000020

080022f4 <putchar>:
 80022f4:	4b02      	ldr	r3, [pc, #8]	@ (8002300 <putchar+0xc>)
 80022f6:	4601      	mov	r1, r0
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	6882      	ldr	r2, [r0, #8]
 80022fc:	f000 be83 	b.w	8003006 <_putc_r>
 8002300:	20000020 	.word	0x20000020

08002304 <_puts_r>:
 8002304:	6a03      	ldr	r3, [r0, #32]
 8002306:	b570      	push	{r4, r5, r6, lr}
 8002308:	4605      	mov	r5, r0
 800230a:	460e      	mov	r6, r1
 800230c:	6884      	ldr	r4, [r0, #8]
 800230e:	b90b      	cbnz	r3, 8002314 <_puts_r+0x10>
 8002310:	f7ff ffa8 	bl	8002264 <__sinit>
 8002314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002316:	07db      	lsls	r3, r3, #31
 8002318:	d405      	bmi.n	8002326 <_puts_r+0x22>
 800231a:	89a3      	ldrh	r3, [r4, #12]
 800231c:	0598      	lsls	r0, r3, #22
 800231e:	d402      	bmi.n	8002326 <_puts_r+0x22>
 8002320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002322:	f000 f99e 	bl	8002662 <__retarget_lock_acquire_recursive>
 8002326:	89a3      	ldrh	r3, [r4, #12]
 8002328:	0719      	lsls	r1, r3, #28
 800232a:	d502      	bpl.n	8002332 <_puts_r+0x2e>
 800232c:	6923      	ldr	r3, [r4, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d135      	bne.n	800239e <_puts_r+0x9a>
 8002332:	4621      	mov	r1, r4
 8002334:	4628      	mov	r0, r5
 8002336:	f000 f8c5 	bl	80024c4 <__swsetup_r>
 800233a:	b380      	cbz	r0, 800239e <_puts_r+0x9a>
 800233c:	f04f 35ff 	mov.w	r5, #4294967295
 8002340:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002342:	07da      	lsls	r2, r3, #31
 8002344:	d405      	bmi.n	8002352 <_puts_r+0x4e>
 8002346:	89a3      	ldrh	r3, [r4, #12]
 8002348:	059b      	lsls	r3, r3, #22
 800234a:	d402      	bmi.n	8002352 <_puts_r+0x4e>
 800234c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800234e:	f000 f989 	bl	8002664 <__retarget_lock_release_recursive>
 8002352:	4628      	mov	r0, r5
 8002354:	bd70      	pop	{r4, r5, r6, pc}
 8002356:	2b00      	cmp	r3, #0
 8002358:	da04      	bge.n	8002364 <_puts_r+0x60>
 800235a:	69a2      	ldr	r2, [r4, #24]
 800235c:	429a      	cmp	r2, r3
 800235e:	dc17      	bgt.n	8002390 <_puts_r+0x8c>
 8002360:	290a      	cmp	r1, #10
 8002362:	d015      	beq.n	8002390 <_puts_r+0x8c>
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	6022      	str	r2, [r4, #0]
 800236a:	7019      	strb	r1, [r3, #0]
 800236c:	68a3      	ldr	r3, [r4, #8]
 800236e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002372:	3b01      	subs	r3, #1
 8002374:	60a3      	str	r3, [r4, #8]
 8002376:	2900      	cmp	r1, #0
 8002378:	d1ed      	bne.n	8002356 <_puts_r+0x52>
 800237a:	2b00      	cmp	r3, #0
 800237c:	da11      	bge.n	80023a2 <_puts_r+0x9e>
 800237e:	4622      	mov	r2, r4
 8002380:	210a      	movs	r1, #10
 8002382:	4628      	mov	r0, r5
 8002384:	f000 f85f 	bl	8002446 <__swbuf_r>
 8002388:	3001      	adds	r0, #1
 800238a:	d0d7      	beq.n	800233c <_puts_r+0x38>
 800238c:	250a      	movs	r5, #10
 800238e:	e7d7      	b.n	8002340 <_puts_r+0x3c>
 8002390:	4622      	mov	r2, r4
 8002392:	4628      	mov	r0, r5
 8002394:	f000 f857 	bl	8002446 <__swbuf_r>
 8002398:	3001      	adds	r0, #1
 800239a:	d1e7      	bne.n	800236c <_puts_r+0x68>
 800239c:	e7ce      	b.n	800233c <_puts_r+0x38>
 800239e:	3e01      	subs	r6, #1
 80023a0:	e7e4      	b.n	800236c <_puts_r+0x68>
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	6022      	str	r2, [r4, #0]
 80023a8:	220a      	movs	r2, #10
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e7ee      	b.n	800238c <_puts_r+0x88>
	...

080023b0 <puts>:
 80023b0:	4b02      	ldr	r3, [pc, #8]	@ (80023bc <puts+0xc>)
 80023b2:	4601      	mov	r1, r0
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	f7ff bfa5 	b.w	8002304 <_puts_r>
 80023ba:	bf00      	nop
 80023bc:	20000020 	.word	0x20000020

080023c0 <__sread>:
 80023c0:	b510      	push	{r4, lr}
 80023c2:	460c      	mov	r4, r1
 80023c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023c8:	f000 f8fc 	bl	80025c4 <_read_r>
 80023cc:	2800      	cmp	r0, #0
 80023ce:	bfab      	itete	ge
 80023d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80023d2:	89a3      	ldrhlt	r3, [r4, #12]
 80023d4:	181b      	addge	r3, r3, r0
 80023d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80023da:	bfac      	ite	ge
 80023dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80023de:	81a3      	strhlt	r3, [r4, #12]
 80023e0:	bd10      	pop	{r4, pc}

080023e2 <__swrite>:
 80023e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e6:	461f      	mov	r7, r3
 80023e8:	898b      	ldrh	r3, [r1, #12]
 80023ea:	4605      	mov	r5, r0
 80023ec:	05db      	lsls	r3, r3, #23
 80023ee:	460c      	mov	r4, r1
 80023f0:	4616      	mov	r6, r2
 80023f2:	d505      	bpl.n	8002400 <__swrite+0x1e>
 80023f4:	2302      	movs	r3, #2
 80023f6:	2200      	movs	r2, #0
 80023f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023fc:	f000 f8d0 	bl	80025a0 <_lseek_r>
 8002400:	89a3      	ldrh	r3, [r4, #12]
 8002402:	4632      	mov	r2, r6
 8002404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002408:	81a3      	strh	r3, [r4, #12]
 800240a:	4628      	mov	r0, r5
 800240c:	463b      	mov	r3, r7
 800240e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002416:	f000 b8e7 	b.w	80025e8 <_write_r>

0800241a <__sseek>:
 800241a:	b510      	push	{r4, lr}
 800241c:	460c      	mov	r4, r1
 800241e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002422:	f000 f8bd 	bl	80025a0 <_lseek_r>
 8002426:	1c43      	adds	r3, r0, #1
 8002428:	89a3      	ldrh	r3, [r4, #12]
 800242a:	bf15      	itete	ne
 800242c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800242e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002432:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002436:	81a3      	strheq	r3, [r4, #12]
 8002438:	bf18      	it	ne
 800243a:	81a3      	strhne	r3, [r4, #12]
 800243c:	bd10      	pop	{r4, pc}

0800243e <__sclose>:
 800243e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002442:	f000 b89d 	b.w	8002580 <_close_r>

08002446 <__swbuf_r>:
 8002446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002448:	460e      	mov	r6, r1
 800244a:	4614      	mov	r4, r2
 800244c:	4605      	mov	r5, r0
 800244e:	b118      	cbz	r0, 8002458 <__swbuf_r+0x12>
 8002450:	6a03      	ldr	r3, [r0, #32]
 8002452:	b90b      	cbnz	r3, 8002458 <__swbuf_r+0x12>
 8002454:	f7ff ff06 	bl	8002264 <__sinit>
 8002458:	69a3      	ldr	r3, [r4, #24]
 800245a:	60a3      	str	r3, [r4, #8]
 800245c:	89a3      	ldrh	r3, [r4, #12]
 800245e:	071a      	lsls	r2, r3, #28
 8002460:	d501      	bpl.n	8002466 <__swbuf_r+0x20>
 8002462:	6923      	ldr	r3, [r4, #16]
 8002464:	b943      	cbnz	r3, 8002478 <__swbuf_r+0x32>
 8002466:	4621      	mov	r1, r4
 8002468:	4628      	mov	r0, r5
 800246a:	f000 f82b 	bl	80024c4 <__swsetup_r>
 800246e:	b118      	cbz	r0, 8002478 <__swbuf_r+0x32>
 8002470:	f04f 37ff 	mov.w	r7, #4294967295
 8002474:	4638      	mov	r0, r7
 8002476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	6922      	ldr	r2, [r4, #16]
 800247c:	b2f6      	uxtb	r6, r6
 800247e:	1a98      	subs	r0, r3, r2
 8002480:	6963      	ldr	r3, [r4, #20]
 8002482:	4637      	mov	r7, r6
 8002484:	4283      	cmp	r3, r0
 8002486:	dc05      	bgt.n	8002494 <__swbuf_r+0x4e>
 8002488:	4621      	mov	r1, r4
 800248a:	4628      	mov	r0, r5
 800248c:	f000 fd32 	bl	8002ef4 <_fflush_r>
 8002490:	2800      	cmp	r0, #0
 8002492:	d1ed      	bne.n	8002470 <__swbuf_r+0x2a>
 8002494:	68a3      	ldr	r3, [r4, #8]
 8002496:	3b01      	subs	r3, #1
 8002498:	60a3      	str	r3, [r4, #8]
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	6022      	str	r2, [r4, #0]
 80024a0:	701e      	strb	r6, [r3, #0]
 80024a2:	6962      	ldr	r2, [r4, #20]
 80024a4:	1c43      	adds	r3, r0, #1
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d004      	beq.n	80024b4 <__swbuf_r+0x6e>
 80024aa:	89a3      	ldrh	r3, [r4, #12]
 80024ac:	07db      	lsls	r3, r3, #31
 80024ae:	d5e1      	bpl.n	8002474 <__swbuf_r+0x2e>
 80024b0:	2e0a      	cmp	r6, #10
 80024b2:	d1df      	bne.n	8002474 <__swbuf_r+0x2e>
 80024b4:	4621      	mov	r1, r4
 80024b6:	4628      	mov	r0, r5
 80024b8:	f000 fd1c 	bl	8002ef4 <_fflush_r>
 80024bc:	2800      	cmp	r0, #0
 80024be:	d0d9      	beq.n	8002474 <__swbuf_r+0x2e>
 80024c0:	e7d6      	b.n	8002470 <__swbuf_r+0x2a>
	...

080024c4 <__swsetup_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4b29      	ldr	r3, [pc, #164]	@ (800256c <__swsetup_r+0xa8>)
 80024c8:	4605      	mov	r5, r0
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	460c      	mov	r4, r1
 80024ce:	b118      	cbz	r0, 80024d8 <__swsetup_r+0x14>
 80024d0:	6a03      	ldr	r3, [r0, #32]
 80024d2:	b90b      	cbnz	r3, 80024d8 <__swsetup_r+0x14>
 80024d4:	f7ff fec6 	bl	8002264 <__sinit>
 80024d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024dc:	0719      	lsls	r1, r3, #28
 80024de:	d422      	bmi.n	8002526 <__swsetup_r+0x62>
 80024e0:	06da      	lsls	r2, r3, #27
 80024e2:	d407      	bmi.n	80024f4 <__swsetup_r+0x30>
 80024e4:	2209      	movs	r2, #9
 80024e6:	602a      	str	r2, [r5, #0]
 80024e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	81a3      	strh	r3, [r4, #12]
 80024f2:	e033      	b.n	800255c <__swsetup_r+0x98>
 80024f4:	0758      	lsls	r0, r3, #29
 80024f6:	d512      	bpl.n	800251e <__swsetup_r+0x5a>
 80024f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80024fa:	b141      	cbz	r1, 800250e <__swsetup_r+0x4a>
 80024fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002500:	4299      	cmp	r1, r3
 8002502:	d002      	beq.n	800250a <__swsetup_r+0x46>
 8002504:	4628      	mov	r0, r5
 8002506:	f000 f8af 	bl	8002668 <_free_r>
 800250a:	2300      	movs	r3, #0
 800250c:	6363      	str	r3, [r4, #52]	@ 0x34
 800250e:	89a3      	ldrh	r3, [r4, #12]
 8002510:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002514:	81a3      	strh	r3, [r4, #12]
 8002516:	2300      	movs	r3, #0
 8002518:	6063      	str	r3, [r4, #4]
 800251a:	6923      	ldr	r3, [r4, #16]
 800251c:	6023      	str	r3, [r4, #0]
 800251e:	89a3      	ldrh	r3, [r4, #12]
 8002520:	f043 0308 	orr.w	r3, r3, #8
 8002524:	81a3      	strh	r3, [r4, #12]
 8002526:	6923      	ldr	r3, [r4, #16]
 8002528:	b94b      	cbnz	r3, 800253e <__swsetup_r+0x7a>
 800252a:	89a3      	ldrh	r3, [r4, #12]
 800252c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002534:	d003      	beq.n	800253e <__swsetup_r+0x7a>
 8002536:	4621      	mov	r1, r4
 8002538:	4628      	mov	r0, r5
 800253a:	f000 fd28 	bl	8002f8e <__smakebuf_r>
 800253e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002542:	f013 0201 	ands.w	r2, r3, #1
 8002546:	d00a      	beq.n	800255e <__swsetup_r+0x9a>
 8002548:	2200      	movs	r2, #0
 800254a:	60a2      	str	r2, [r4, #8]
 800254c:	6962      	ldr	r2, [r4, #20]
 800254e:	4252      	negs	r2, r2
 8002550:	61a2      	str	r2, [r4, #24]
 8002552:	6922      	ldr	r2, [r4, #16]
 8002554:	b942      	cbnz	r2, 8002568 <__swsetup_r+0xa4>
 8002556:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800255a:	d1c5      	bne.n	80024e8 <__swsetup_r+0x24>
 800255c:	bd38      	pop	{r3, r4, r5, pc}
 800255e:	0799      	lsls	r1, r3, #30
 8002560:	bf58      	it	pl
 8002562:	6962      	ldrpl	r2, [r4, #20]
 8002564:	60a2      	str	r2, [r4, #8]
 8002566:	e7f4      	b.n	8002552 <__swsetup_r+0x8e>
 8002568:	2000      	movs	r0, #0
 800256a:	e7f7      	b.n	800255c <__swsetup_r+0x98>
 800256c:	20000020 	.word	0x20000020

08002570 <memset>:
 8002570:	4603      	mov	r3, r0
 8002572:	4402      	add	r2, r0
 8002574:	4293      	cmp	r3, r2
 8002576:	d100      	bne.n	800257a <memset+0xa>
 8002578:	4770      	bx	lr
 800257a:	f803 1b01 	strb.w	r1, [r3], #1
 800257e:	e7f9      	b.n	8002574 <memset+0x4>

08002580 <_close_r>:
 8002580:	b538      	push	{r3, r4, r5, lr}
 8002582:	2300      	movs	r3, #0
 8002584:	4d05      	ldr	r5, [pc, #20]	@ (800259c <_close_r+0x1c>)
 8002586:	4604      	mov	r4, r0
 8002588:	4608      	mov	r0, r1
 800258a:	602b      	str	r3, [r5, #0]
 800258c:	f7fe f901 	bl	8000792 <_close>
 8002590:	1c43      	adds	r3, r0, #1
 8002592:	d102      	bne.n	800259a <_close_r+0x1a>
 8002594:	682b      	ldr	r3, [r5, #0]
 8002596:	b103      	cbz	r3, 800259a <_close_r+0x1a>
 8002598:	6023      	str	r3, [r4, #0]
 800259a:	bd38      	pop	{r3, r4, r5, pc}
 800259c:	20000278 	.word	0x20000278

080025a0 <_lseek_r>:
 80025a0:	b538      	push	{r3, r4, r5, lr}
 80025a2:	4604      	mov	r4, r0
 80025a4:	4608      	mov	r0, r1
 80025a6:	4611      	mov	r1, r2
 80025a8:	2200      	movs	r2, #0
 80025aa:	4d05      	ldr	r5, [pc, #20]	@ (80025c0 <_lseek_r+0x20>)
 80025ac:	602a      	str	r2, [r5, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f7fe f913 	bl	80007da <_lseek>
 80025b4:	1c43      	adds	r3, r0, #1
 80025b6:	d102      	bne.n	80025be <_lseek_r+0x1e>
 80025b8:	682b      	ldr	r3, [r5, #0]
 80025ba:	b103      	cbz	r3, 80025be <_lseek_r+0x1e>
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	bd38      	pop	{r3, r4, r5, pc}
 80025c0:	20000278 	.word	0x20000278

080025c4 <_read_r>:
 80025c4:	b538      	push	{r3, r4, r5, lr}
 80025c6:	4604      	mov	r4, r0
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	2200      	movs	r2, #0
 80025ce:	4d05      	ldr	r5, [pc, #20]	@ (80025e4 <_read_r+0x20>)
 80025d0:	602a      	str	r2, [r5, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f7fe f8a4 	bl	8000720 <_read>
 80025d8:	1c43      	adds	r3, r0, #1
 80025da:	d102      	bne.n	80025e2 <_read_r+0x1e>
 80025dc:	682b      	ldr	r3, [r5, #0]
 80025de:	b103      	cbz	r3, 80025e2 <_read_r+0x1e>
 80025e0:	6023      	str	r3, [r4, #0]
 80025e2:	bd38      	pop	{r3, r4, r5, pc}
 80025e4:	20000278 	.word	0x20000278

080025e8 <_write_r>:
 80025e8:	b538      	push	{r3, r4, r5, lr}
 80025ea:	4604      	mov	r4, r0
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	2200      	movs	r2, #0
 80025f2:	4d05      	ldr	r5, [pc, #20]	@ (8002608 <_write_r+0x20>)
 80025f4:	602a      	str	r2, [r5, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f7fe f8af 	bl	800075a <_write>
 80025fc:	1c43      	adds	r3, r0, #1
 80025fe:	d102      	bne.n	8002606 <_write_r+0x1e>
 8002600:	682b      	ldr	r3, [r5, #0]
 8002602:	b103      	cbz	r3, 8002606 <_write_r+0x1e>
 8002604:	6023      	str	r3, [r4, #0]
 8002606:	bd38      	pop	{r3, r4, r5, pc}
 8002608:	20000278 	.word	0x20000278

0800260c <__errno>:
 800260c:	4b01      	ldr	r3, [pc, #4]	@ (8002614 <__errno+0x8>)
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000020 	.word	0x20000020

08002618 <__libc_init_array>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	2600      	movs	r6, #0
 800261c:	4d0c      	ldr	r5, [pc, #48]	@ (8002650 <__libc_init_array+0x38>)
 800261e:	4c0d      	ldr	r4, [pc, #52]	@ (8002654 <__libc_init_array+0x3c>)
 8002620:	1b64      	subs	r4, r4, r5
 8002622:	10a4      	asrs	r4, r4, #2
 8002624:	42a6      	cmp	r6, r4
 8002626:	d109      	bne.n	800263c <__libc_init_array+0x24>
 8002628:	f000 fd62 	bl	80030f0 <_init>
 800262c:	2600      	movs	r6, #0
 800262e:	4d0a      	ldr	r5, [pc, #40]	@ (8002658 <__libc_init_array+0x40>)
 8002630:	4c0a      	ldr	r4, [pc, #40]	@ (800265c <__libc_init_array+0x44>)
 8002632:	1b64      	subs	r4, r4, r5
 8002634:	10a4      	asrs	r4, r4, #2
 8002636:	42a6      	cmp	r6, r4
 8002638:	d105      	bne.n	8002646 <__libc_init_array+0x2e>
 800263a:	bd70      	pop	{r4, r5, r6, pc}
 800263c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002640:	4798      	blx	r3
 8002642:	3601      	adds	r6, #1
 8002644:	e7ee      	b.n	8002624 <__libc_init_array+0xc>
 8002646:	f855 3b04 	ldr.w	r3, [r5], #4
 800264a:	4798      	blx	r3
 800264c:	3601      	adds	r6, #1
 800264e:	e7f2      	b.n	8002636 <__libc_init_array+0x1e>
 8002650:	08003198 	.word	0x08003198
 8002654:	08003198 	.word	0x08003198
 8002658:	08003198 	.word	0x08003198
 800265c:	0800319c 	.word	0x0800319c

08002660 <__retarget_lock_init_recursive>:
 8002660:	4770      	bx	lr

08002662 <__retarget_lock_acquire_recursive>:
 8002662:	4770      	bx	lr

08002664 <__retarget_lock_release_recursive>:
 8002664:	4770      	bx	lr
	...

08002668 <_free_r>:
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4605      	mov	r5, r0
 800266c:	2900      	cmp	r1, #0
 800266e:	d040      	beq.n	80026f2 <_free_r+0x8a>
 8002670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002674:	1f0c      	subs	r4, r1, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	bfb8      	it	lt
 800267a:	18e4      	addlt	r4, r4, r3
 800267c:	f000 f8de 	bl	800283c <__malloc_lock>
 8002680:	4a1c      	ldr	r2, [pc, #112]	@ (80026f4 <_free_r+0x8c>)
 8002682:	6813      	ldr	r3, [r2, #0]
 8002684:	b933      	cbnz	r3, 8002694 <_free_r+0x2c>
 8002686:	6063      	str	r3, [r4, #4]
 8002688:	6014      	str	r4, [r2, #0]
 800268a:	4628      	mov	r0, r5
 800268c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002690:	f000 b8da 	b.w	8002848 <__malloc_unlock>
 8002694:	42a3      	cmp	r3, r4
 8002696:	d908      	bls.n	80026aa <_free_r+0x42>
 8002698:	6820      	ldr	r0, [r4, #0]
 800269a:	1821      	adds	r1, r4, r0
 800269c:	428b      	cmp	r3, r1
 800269e:	bf01      	itttt	eq
 80026a0:	6819      	ldreq	r1, [r3, #0]
 80026a2:	685b      	ldreq	r3, [r3, #4]
 80026a4:	1809      	addeq	r1, r1, r0
 80026a6:	6021      	streq	r1, [r4, #0]
 80026a8:	e7ed      	b.n	8002686 <_free_r+0x1e>
 80026aa:	461a      	mov	r2, r3
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	b10b      	cbz	r3, 80026b4 <_free_r+0x4c>
 80026b0:	42a3      	cmp	r3, r4
 80026b2:	d9fa      	bls.n	80026aa <_free_r+0x42>
 80026b4:	6811      	ldr	r1, [r2, #0]
 80026b6:	1850      	adds	r0, r2, r1
 80026b8:	42a0      	cmp	r0, r4
 80026ba:	d10b      	bne.n	80026d4 <_free_r+0x6c>
 80026bc:	6820      	ldr	r0, [r4, #0]
 80026be:	4401      	add	r1, r0
 80026c0:	1850      	adds	r0, r2, r1
 80026c2:	4283      	cmp	r3, r0
 80026c4:	6011      	str	r1, [r2, #0]
 80026c6:	d1e0      	bne.n	800268a <_free_r+0x22>
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4408      	add	r0, r1
 80026ce:	6010      	str	r0, [r2, #0]
 80026d0:	6053      	str	r3, [r2, #4]
 80026d2:	e7da      	b.n	800268a <_free_r+0x22>
 80026d4:	d902      	bls.n	80026dc <_free_r+0x74>
 80026d6:	230c      	movs	r3, #12
 80026d8:	602b      	str	r3, [r5, #0]
 80026da:	e7d6      	b.n	800268a <_free_r+0x22>
 80026dc:	6820      	ldr	r0, [r4, #0]
 80026de:	1821      	adds	r1, r4, r0
 80026e0:	428b      	cmp	r3, r1
 80026e2:	bf01      	itttt	eq
 80026e4:	6819      	ldreq	r1, [r3, #0]
 80026e6:	685b      	ldreq	r3, [r3, #4]
 80026e8:	1809      	addeq	r1, r1, r0
 80026ea:	6021      	streq	r1, [r4, #0]
 80026ec:	6063      	str	r3, [r4, #4]
 80026ee:	6054      	str	r4, [r2, #4]
 80026f0:	e7cb      	b.n	800268a <_free_r+0x22>
 80026f2:	bd38      	pop	{r3, r4, r5, pc}
 80026f4:	20000284 	.word	0x20000284

080026f8 <sbrk_aligned>:
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4e0f      	ldr	r6, [pc, #60]	@ (8002738 <sbrk_aligned+0x40>)
 80026fc:	460c      	mov	r4, r1
 80026fe:	6831      	ldr	r1, [r6, #0]
 8002700:	4605      	mov	r5, r0
 8002702:	b911      	cbnz	r1, 800270a <sbrk_aligned+0x12>
 8002704:	f000 fcd6 	bl	80030b4 <_sbrk_r>
 8002708:	6030      	str	r0, [r6, #0]
 800270a:	4621      	mov	r1, r4
 800270c:	4628      	mov	r0, r5
 800270e:	f000 fcd1 	bl	80030b4 <_sbrk_r>
 8002712:	1c43      	adds	r3, r0, #1
 8002714:	d103      	bne.n	800271e <sbrk_aligned+0x26>
 8002716:	f04f 34ff 	mov.w	r4, #4294967295
 800271a:	4620      	mov	r0, r4
 800271c:	bd70      	pop	{r4, r5, r6, pc}
 800271e:	1cc4      	adds	r4, r0, #3
 8002720:	f024 0403 	bic.w	r4, r4, #3
 8002724:	42a0      	cmp	r0, r4
 8002726:	d0f8      	beq.n	800271a <sbrk_aligned+0x22>
 8002728:	1a21      	subs	r1, r4, r0
 800272a:	4628      	mov	r0, r5
 800272c:	f000 fcc2 	bl	80030b4 <_sbrk_r>
 8002730:	3001      	adds	r0, #1
 8002732:	d1f2      	bne.n	800271a <sbrk_aligned+0x22>
 8002734:	e7ef      	b.n	8002716 <sbrk_aligned+0x1e>
 8002736:	bf00      	nop
 8002738:	20000280 	.word	0x20000280

0800273c <_malloc_r>:
 800273c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002740:	1ccd      	adds	r5, r1, #3
 8002742:	f025 0503 	bic.w	r5, r5, #3
 8002746:	3508      	adds	r5, #8
 8002748:	2d0c      	cmp	r5, #12
 800274a:	bf38      	it	cc
 800274c:	250c      	movcc	r5, #12
 800274e:	2d00      	cmp	r5, #0
 8002750:	4606      	mov	r6, r0
 8002752:	db01      	blt.n	8002758 <_malloc_r+0x1c>
 8002754:	42a9      	cmp	r1, r5
 8002756:	d904      	bls.n	8002762 <_malloc_r+0x26>
 8002758:	230c      	movs	r3, #12
 800275a:	6033      	str	r3, [r6, #0]
 800275c:	2000      	movs	r0, #0
 800275e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002762:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002838 <_malloc_r+0xfc>
 8002766:	f000 f869 	bl	800283c <__malloc_lock>
 800276a:	f8d8 3000 	ldr.w	r3, [r8]
 800276e:	461c      	mov	r4, r3
 8002770:	bb44      	cbnz	r4, 80027c4 <_malloc_r+0x88>
 8002772:	4629      	mov	r1, r5
 8002774:	4630      	mov	r0, r6
 8002776:	f7ff ffbf 	bl	80026f8 <sbrk_aligned>
 800277a:	1c43      	adds	r3, r0, #1
 800277c:	4604      	mov	r4, r0
 800277e:	d158      	bne.n	8002832 <_malloc_r+0xf6>
 8002780:	f8d8 4000 	ldr.w	r4, [r8]
 8002784:	4627      	mov	r7, r4
 8002786:	2f00      	cmp	r7, #0
 8002788:	d143      	bne.n	8002812 <_malloc_r+0xd6>
 800278a:	2c00      	cmp	r4, #0
 800278c:	d04b      	beq.n	8002826 <_malloc_r+0xea>
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	4639      	mov	r1, r7
 8002792:	4630      	mov	r0, r6
 8002794:	eb04 0903 	add.w	r9, r4, r3
 8002798:	f000 fc8c 	bl	80030b4 <_sbrk_r>
 800279c:	4581      	cmp	r9, r0
 800279e:	d142      	bne.n	8002826 <_malloc_r+0xea>
 80027a0:	6821      	ldr	r1, [r4, #0]
 80027a2:	4630      	mov	r0, r6
 80027a4:	1a6d      	subs	r5, r5, r1
 80027a6:	4629      	mov	r1, r5
 80027a8:	f7ff ffa6 	bl	80026f8 <sbrk_aligned>
 80027ac:	3001      	adds	r0, #1
 80027ae:	d03a      	beq.n	8002826 <_malloc_r+0xea>
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	442b      	add	r3, r5
 80027b4:	6023      	str	r3, [r4, #0]
 80027b6:	f8d8 3000 	ldr.w	r3, [r8]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	bb62      	cbnz	r2, 8002818 <_malloc_r+0xdc>
 80027be:	f8c8 7000 	str.w	r7, [r8]
 80027c2:	e00f      	b.n	80027e4 <_malloc_r+0xa8>
 80027c4:	6822      	ldr	r2, [r4, #0]
 80027c6:	1b52      	subs	r2, r2, r5
 80027c8:	d420      	bmi.n	800280c <_malloc_r+0xd0>
 80027ca:	2a0b      	cmp	r2, #11
 80027cc:	d917      	bls.n	80027fe <_malloc_r+0xc2>
 80027ce:	1961      	adds	r1, r4, r5
 80027d0:	42a3      	cmp	r3, r4
 80027d2:	6025      	str	r5, [r4, #0]
 80027d4:	bf18      	it	ne
 80027d6:	6059      	strne	r1, [r3, #4]
 80027d8:	6863      	ldr	r3, [r4, #4]
 80027da:	bf08      	it	eq
 80027dc:	f8c8 1000 	streq.w	r1, [r8]
 80027e0:	5162      	str	r2, [r4, r5]
 80027e2:	604b      	str	r3, [r1, #4]
 80027e4:	4630      	mov	r0, r6
 80027e6:	f000 f82f 	bl	8002848 <__malloc_unlock>
 80027ea:	f104 000b 	add.w	r0, r4, #11
 80027ee:	1d23      	adds	r3, r4, #4
 80027f0:	f020 0007 	bic.w	r0, r0, #7
 80027f4:	1ac2      	subs	r2, r0, r3
 80027f6:	bf1c      	itt	ne
 80027f8:	1a1b      	subne	r3, r3, r0
 80027fa:	50a3      	strne	r3, [r4, r2]
 80027fc:	e7af      	b.n	800275e <_malloc_r+0x22>
 80027fe:	6862      	ldr	r2, [r4, #4]
 8002800:	42a3      	cmp	r3, r4
 8002802:	bf0c      	ite	eq
 8002804:	f8c8 2000 	streq.w	r2, [r8]
 8002808:	605a      	strne	r2, [r3, #4]
 800280a:	e7eb      	b.n	80027e4 <_malloc_r+0xa8>
 800280c:	4623      	mov	r3, r4
 800280e:	6864      	ldr	r4, [r4, #4]
 8002810:	e7ae      	b.n	8002770 <_malloc_r+0x34>
 8002812:	463c      	mov	r4, r7
 8002814:	687f      	ldr	r7, [r7, #4]
 8002816:	e7b6      	b.n	8002786 <_malloc_r+0x4a>
 8002818:	461a      	mov	r2, r3
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	42a3      	cmp	r3, r4
 800281e:	d1fb      	bne.n	8002818 <_malloc_r+0xdc>
 8002820:	2300      	movs	r3, #0
 8002822:	6053      	str	r3, [r2, #4]
 8002824:	e7de      	b.n	80027e4 <_malloc_r+0xa8>
 8002826:	230c      	movs	r3, #12
 8002828:	4630      	mov	r0, r6
 800282a:	6033      	str	r3, [r6, #0]
 800282c:	f000 f80c 	bl	8002848 <__malloc_unlock>
 8002830:	e794      	b.n	800275c <_malloc_r+0x20>
 8002832:	6005      	str	r5, [r0, #0]
 8002834:	e7d6      	b.n	80027e4 <_malloc_r+0xa8>
 8002836:	bf00      	nop
 8002838:	20000284 	.word	0x20000284

0800283c <__malloc_lock>:
 800283c:	4801      	ldr	r0, [pc, #4]	@ (8002844 <__malloc_lock+0x8>)
 800283e:	f7ff bf10 	b.w	8002662 <__retarget_lock_acquire_recursive>
 8002842:	bf00      	nop
 8002844:	2000027c 	.word	0x2000027c

08002848 <__malloc_unlock>:
 8002848:	4801      	ldr	r0, [pc, #4]	@ (8002850 <__malloc_unlock+0x8>)
 800284a:	f7ff bf0b 	b.w	8002664 <__retarget_lock_release_recursive>
 800284e:	bf00      	nop
 8002850:	2000027c 	.word	0x2000027c

08002854 <__sfputc_r>:
 8002854:	6893      	ldr	r3, [r2, #8]
 8002856:	b410      	push	{r4}
 8002858:	3b01      	subs	r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	6093      	str	r3, [r2, #8]
 800285e:	da07      	bge.n	8002870 <__sfputc_r+0x1c>
 8002860:	6994      	ldr	r4, [r2, #24]
 8002862:	42a3      	cmp	r3, r4
 8002864:	db01      	blt.n	800286a <__sfputc_r+0x16>
 8002866:	290a      	cmp	r1, #10
 8002868:	d102      	bne.n	8002870 <__sfputc_r+0x1c>
 800286a:	bc10      	pop	{r4}
 800286c:	f7ff bdeb 	b.w	8002446 <__swbuf_r>
 8002870:	6813      	ldr	r3, [r2, #0]
 8002872:	1c58      	adds	r0, r3, #1
 8002874:	6010      	str	r0, [r2, #0]
 8002876:	7019      	strb	r1, [r3, #0]
 8002878:	4608      	mov	r0, r1
 800287a:	bc10      	pop	{r4}
 800287c:	4770      	bx	lr

0800287e <__sfputs_r>:
 800287e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002880:	4606      	mov	r6, r0
 8002882:	460f      	mov	r7, r1
 8002884:	4614      	mov	r4, r2
 8002886:	18d5      	adds	r5, r2, r3
 8002888:	42ac      	cmp	r4, r5
 800288a:	d101      	bne.n	8002890 <__sfputs_r+0x12>
 800288c:	2000      	movs	r0, #0
 800288e:	e007      	b.n	80028a0 <__sfputs_r+0x22>
 8002890:	463a      	mov	r2, r7
 8002892:	4630      	mov	r0, r6
 8002894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002898:	f7ff ffdc 	bl	8002854 <__sfputc_r>
 800289c:	1c43      	adds	r3, r0, #1
 800289e:	d1f3      	bne.n	8002888 <__sfputs_r+0xa>
 80028a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028a4 <_vfiprintf_r>:
 80028a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a8:	460d      	mov	r5, r1
 80028aa:	4614      	mov	r4, r2
 80028ac:	4698      	mov	r8, r3
 80028ae:	4606      	mov	r6, r0
 80028b0:	b09d      	sub	sp, #116	@ 0x74
 80028b2:	b118      	cbz	r0, 80028bc <_vfiprintf_r+0x18>
 80028b4:	6a03      	ldr	r3, [r0, #32]
 80028b6:	b90b      	cbnz	r3, 80028bc <_vfiprintf_r+0x18>
 80028b8:	f7ff fcd4 	bl	8002264 <__sinit>
 80028bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80028be:	07d9      	lsls	r1, r3, #31
 80028c0:	d405      	bmi.n	80028ce <_vfiprintf_r+0x2a>
 80028c2:	89ab      	ldrh	r3, [r5, #12]
 80028c4:	059a      	lsls	r2, r3, #22
 80028c6:	d402      	bmi.n	80028ce <_vfiprintf_r+0x2a>
 80028c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80028ca:	f7ff feca 	bl	8002662 <__retarget_lock_acquire_recursive>
 80028ce:	89ab      	ldrh	r3, [r5, #12]
 80028d0:	071b      	lsls	r3, r3, #28
 80028d2:	d501      	bpl.n	80028d8 <_vfiprintf_r+0x34>
 80028d4:	692b      	ldr	r3, [r5, #16]
 80028d6:	b99b      	cbnz	r3, 8002900 <_vfiprintf_r+0x5c>
 80028d8:	4629      	mov	r1, r5
 80028da:	4630      	mov	r0, r6
 80028dc:	f7ff fdf2 	bl	80024c4 <__swsetup_r>
 80028e0:	b170      	cbz	r0, 8002900 <_vfiprintf_r+0x5c>
 80028e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80028e4:	07dc      	lsls	r4, r3, #31
 80028e6:	d504      	bpl.n	80028f2 <_vfiprintf_r+0x4e>
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ec:	b01d      	add	sp, #116	@ 0x74
 80028ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f2:	89ab      	ldrh	r3, [r5, #12]
 80028f4:	0598      	lsls	r0, r3, #22
 80028f6:	d4f7      	bmi.n	80028e8 <_vfiprintf_r+0x44>
 80028f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80028fa:	f7ff feb3 	bl	8002664 <__retarget_lock_release_recursive>
 80028fe:	e7f3      	b.n	80028e8 <_vfiprintf_r+0x44>
 8002900:	2300      	movs	r3, #0
 8002902:	9309      	str	r3, [sp, #36]	@ 0x24
 8002904:	2320      	movs	r3, #32
 8002906:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800290a:	2330      	movs	r3, #48	@ 0x30
 800290c:	f04f 0901 	mov.w	r9, #1
 8002910:	f8cd 800c 	str.w	r8, [sp, #12]
 8002914:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002ac0 <_vfiprintf_r+0x21c>
 8002918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800291c:	4623      	mov	r3, r4
 800291e:	469a      	mov	sl, r3
 8002920:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002924:	b10a      	cbz	r2, 800292a <_vfiprintf_r+0x86>
 8002926:	2a25      	cmp	r2, #37	@ 0x25
 8002928:	d1f9      	bne.n	800291e <_vfiprintf_r+0x7a>
 800292a:	ebba 0b04 	subs.w	fp, sl, r4
 800292e:	d00b      	beq.n	8002948 <_vfiprintf_r+0xa4>
 8002930:	465b      	mov	r3, fp
 8002932:	4622      	mov	r2, r4
 8002934:	4629      	mov	r1, r5
 8002936:	4630      	mov	r0, r6
 8002938:	f7ff ffa1 	bl	800287e <__sfputs_r>
 800293c:	3001      	adds	r0, #1
 800293e:	f000 80a7 	beq.w	8002a90 <_vfiprintf_r+0x1ec>
 8002942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002944:	445a      	add	r2, fp
 8002946:	9209      	str	r2, [sp, #36]	@ 0x24
 8002948:	f89a 3000 	ldrb.w	r3, [sl]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 809f 	beq.w	8002a90 <_vfiprintf_r+0x1ec>
 8002952:	2300      	movs	r3, #0
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800295c:	f10a 0a01 	add.w	sl, sl, #1
 8002960:	9304      	str	r3, [sp, #16]
 8002962:	9307      	str	r3, [sp, #28]
 8002964:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002968:	931a      	str	r3, [sp, #104]	@ 0x68
 800296a:	4654      	mov	r4, sl
 800296c:	2205      	movs	r2, #5
 800296e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002972:	4853      	ldr	r0, [pc, #332]	@ (8002ac0 <_vfiprintf_r+0x21c>)
 8002974:	f000 fbae 	bl	80030d4 <memchr>
 8002978:	9a04      	ldr	r2, [sp, #16]
 800297a:	b9d8      	cbnz	r0, 80029b4 <_vfiprintf_r+0x110>
 800297c:	06d1      	lsls	r1, r2, #27
 800297e:	bf44      	itt	mi
 8002980:	2320      	movmi	r3, #32
 8002982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002986:	0713      	lsls	r3, r2, #28
 8002988:	bf44      	itt	mi
 800298a:	232b      	movmi	r3, #43	@ 0x2b
 800298c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002990:	f89a 3000 	ldrb.w	r3, [sl]
 8002994:	2b2a      	cmp	r3, #42	@ 0x2a
 8002996:	d015      	beq.n	80029c4 <_vfiprintf_r+0x120>
 8002998:	4654      	mov	r4, sl
 800299a:	2000      	movs	r0, #0
 800299c:	f04f 0c0a 	mov.w	ip, #10
 80029a0:	9a07      	ldr	r2, [sp, #28]
 80029a2:	4621      	mov	r1, r4
 80029a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029a8:	3b30      	subs	r3, #48	@ 0x30
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	d94b      	bls.n	8002a46 <_vfiprintf_r+0x1a2>
 80029ae:	b1b0      	cbz	r0, 80029de <_vfiprintf_r+0x13a>
 80029b0:	9207      	str	r2, [sp, #28]
 80029b2:	e014      	b.n	80029de <_vfiprintf_r+0x13a>
 80029b4:	eba0 0308 	sub.w	r3, r0, r8
 80029b8:	fa09 f303 	lsl.w	r3, r9, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	46a2      	mov	sl, r4
 80029c0:	9304      	str	r3, [sp, #16]
 80029c2:	e7d2      	b.n	800296a <_vfiprintf_r+0xc6>
 80029c4:	9b03      	ldr	r3, [sp, #12]
 80029c6:	1d19      	adds	r1, r3, #4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	9103      	str	r1, [sp, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bfbb      	ittet	lt
 80029d0:	425b      	neglt	r3, r3
 80029d2:	f042 0202 	orrlt.w	r2, r2, #2
 80029d6:	9307      	strge	r3, [sp, #28]
 80029d8:	9307      	strlt	r3, [sp, #28]
 80029da:	bfb8      	it	lt
 80029dc:	9204      	strlt	r2, [sp, #16]
 80029de:	7823      	ldrb	r3, [r4, #0]
 80029e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80029e2:	d10a      	bne.n	80029fa <_vfiprintf_r+0x156>
 80029e4:	7863      	ldrb	r3, [r4, #1]
 80029e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80029e8:	d132      	bne.n	8002a50 <_vfiprintf_r+0x1ac>
 80029ea:	9b03      	ldr	r3, [sp, #12]
 80029ec:	3402      	adds	r4, #2
 80029ee:	1d1a      	adds	r2, r3, #4
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	9203      	str	r2, [sp, #12]
 80029f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80029f8:	9305      	str	r3, [sp, #20]
 80029fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002ac4 <_vfiprintf_r+0x220>
 80029fe:	2203      	movs	r2, #3
 8002a00:	4650      	mov	r0, sl
 8002a02:	7821      	ldrb	r1, [r4, #0]
 8002a04:	f000 fb66 	bl	80030d4 <memchr>
 8002a08:	b138      	cbz	r0, 8002a1a <_vfiprintf_r+0x176>
 8002a0a:	2240      	movs	r2, #64	@ 0x40
 8002a0c:	9b04      	ldr	r3, [sp, #16]
 8002a0e:	eba0 000a 	sub.w	r0, r0, sl
 8002a12:	4082      	lsls	r2, r0
 8002a14:	4313      	orrs	r3, r2
 8002a16:	3401      	adds	r4, #1
 8002a18:	9304      	str	r3, [sp, #16]
 8002a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a1e:	2206      	movs	r2, #6
 8002a20:	4829      	ldr	r0, [pc, #164]	@ (8002ac8 <_vfiprintf_r+0x224>)
 8002a22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a26:	f000 fb55 	bl	80030d4 <memchr>
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d03f      	beq.n	8002aae <_vfiprintf_r+0x20a>
 8002a2e:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <_vfiprintf_r+0x228>)
 8002a30:	bb1b      	cbnz	r3, 8002a7a <_vfiprintf_r+0x1d6>
 8002a32:	9b03      	ldr	r3, [sp, #12]
 8002a34:	3307      	adds	r3, #7
 8002a36:	f023 0307 	bic.w	r3, r3, #7
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	9303      	str	r3, [sp, #12]
 8002a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a40:	443b      	add	r3, r7
 8002a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a44:	e76a      	b.n	800291c <_vfiprintf_r+0x78>
 8002a46:	460c      	mov	r4, r1
 8002a48:	2001      	movs	r0, #1
 8002a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a4e:	e7a8      	b.n	80029a2 <_vfiprintf_r+0xfe>
 8002a50:	2300      	movs	r3, #0
 8002a52:	f04f 0c0a 	mov.w	ip, #10
 8002a56:	4619      	mov	r1, r3
 8002a58:	3401      	adds	r4, #1
 8002a5a:	9305      	str	r3, [sp, #20]
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a62:	3a30      	subs	r2, #48	@ 0x30
 8002a64:	2a09      	cmp	r2, #9
 8002a66:	d903      	bls.n	8002a70 <_vfiprintf_r+0x1cc>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0c6      	beq.n	80029fa <_vfiprintf_r+0x156>
 8002a6c:	9105      	str	r1, [sp, #20]
 8002a6e:	e7c4      	b.n	80029fa <_vfiprintf_r+0x156>
 8002a70:	4604      	mov	r4, r0
 8002a72:	2301      	movs	r3, #1
 8002a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a78:	e7f0      	b.n	8002a5c <_vfiprintf_r+0x1b8>
 8002a7a:	ab03      	add	r3, sp, #12
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	462a      	mov	r2, r5
 8002a80:	4630      	mov	r0, r6
 8002a82:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <_vfiprintf_r+0x22c>)
 8002a84:	a904      	add	r1, sp, #16
 8002a86:	f3af 8000 	nop.w
 8002a8a:	4607      	mov	r7, r0
 8002a8c:	1c78      	adds	r0, r7, #1
 8002a8e:	d1d6      	bne.n	8002a3e <_vfiprintf_r+0x19a>
 8002a90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a92:	07d9      	lsls	r1, r3, #31
 8002a94:	d405      	bmi.n	8002aa2 <_vfiprintf_r+0x1fe>
 8002a96:	89ab      	ldrh	r3, [r5, #12]
 8002a98:	059a      	lsls	r2, r3, #22
 8002a9a:	d402      	bmi.n	8002aa2 <_vfiprintf_r+0x1fe>
 8002a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a9e:	f7ff fde1 	bl	8002664 <__retarget_lock_release_recursive>
 8002aa2:	89ab      	ldrh	r3, [r5, #12]
 8002aa4:	065b      	lsls	r3, r3, #25
 8002aa6:	f53f af1f 	bmi.w	80028e8 <_vfiprintf_r+0x44>
 8002aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002aac:	e71e      	b.n	80028ec <_vfiprintf_r+0x48>
 8002aae:	ab03      	add	r3, sp, #12
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	462a      	mov	r2, r5
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <_vfiprintf_r+0x22c>)
 8002ab8:	a904      	add	r1, sp, #16
 8002aba:	f000 f87d 	bl	8002bb8 <_printf_i>
 8002abe:	e7e4      	b.n	8002a8a <_vfiprintf_r+0x1e6>
 8002ac0:	08003162 	.word	0x08003162
 8002ac4:	08003168 	.word	0x08003168
 8002ac8:	0800316c 	.word	0x0800316c
 8002acc:	00000000 	.word	0x00000000
 8002ad0:	0800287f 	.word	0x0800287f

08002ad4 <_printf_common>:
 8002ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad8:	4616      	mov	r6, r2
 8002ada:	4698      	mov	r8, r3
 8002adc:	688a      	ldr	r2, [r1, #8]
 8002ade:	690b      	ldr	r3, [r1, #16]
 8002ae0:	4607      	mov	r7, r0
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	bfb8      	it	lt
 8002ae6:	4613      	movlt	r3, r2
 8002ae8:	6033      	str	r3, [r6, #0]
 8002aea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002aee:	460c      	mov	r4, r1
 8002af0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002af4:	b10a      	cbz	r2, 8002afa <_printf_common+0x26>
 8002af6:	3301      	adds	r3, #1
 8002af8:	6033      	str	r3, [r6, #0]
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	0699      	lsls	r1, r3, #26
 8002afe:	bf42      	ittt	mi
 8002b00:	6833      	ldrmi	r3, [r6, #0]
 8002b02:	3302      	addmi	r3, #2
 8002b04:	6033      	strmi	r3, [r6, #0]
 8002b06:	6825      	ldr	r5, [r4, #0]
 8002b08:	f015 0506 	ands.w	r5, r5, #6
 8002b0c:	d106      	bne.n	8002b1c <_printf_common+0x48>
 8002b0e:	f104 0a19 	add.w	sl, r4, #25
 8002b12:	68e3      	ldr	r3, [r4, #12]
 8002b14:	6832      	ldr	r2, [r6, #0]
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	42ab      	cmp	r3, r5
 8002b1a:	dc2b      	bgt.n	8002b74 <_printf_common+0xa0>
 8002b1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002b20:	6822      	ldr	r2, [r4, #0]
 8002b22:	3b00      	subs	r3, #0
 8002b24:	bf18      	it	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	0692      	lsls	r2, r2, #26
 8002b2a:	d430      	bmi.n	8002b8e <_printf_common+0xba>
 8002b2c:	4641      	mov	r1, r8
 8002b2e:	4638      	mov	r0, r7
 8002b30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002b34:	47c8      	blx	r9
 8002b36:	3001      	adds	r0, #1
 8002b38:	d023      	beq.n	8002b82 <_printf_common+0xae>
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	6922      	ldr	r2, [r4, #16]
 8002b3e:	f003 0306 	and.w	r3, r3, #6
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf14      	ite	ne
 8002b46:	2500      	movne	r5, #0
 8002b48:	6833      	ldreq	r3, [r6, #0]
 8002b4a:	f04f 0600 	mov.w	r6, #0
 8002b4e:	bf08      	it	eq
 8002b50:	68e5      	ldreq	r5, [r4, #12]
 8002b52:	f104 041a 	add.w	r4, r4, #26
 8002b56:	bf08      	it	eq
 8002b58:	1aed      	subeq	r5, r5, r3
 8002b5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002b5e:	bf08      	it	eq
 8002b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b64:	4293      	cmp	r3, r2
 8002b66:	bfc4      	itt	gt
 8002b68:	1a9b      	subgt	r3, r3, r2
 8002b6a:	18ed      	addgt	r5, r5, r3
 8002b6c:	42b5      	cmp	r5, r6
 8002b6e:	d11a      	bne.n	8002ba6 <_printf_common+0xd2>
 8002b70:	2000      	movs	r0, #0
 8002b72:	e008      	b.n	8002b86 <_printf_common+0xb2>
 8002b74:	2301      	movs	r3, #1
 8002b76:	4652      	mov	r2, sl
 8002b78:	4641      	mov	r1, r8
 8002b7a:	4638      	mov	r0, r7
 8002b7c:	47c8      	blx	r9
 8002b7e:	3001      	adds	r0, #1
 8002b80:	d103      	bne.n	8002b8a <_printf_common+0xb6>
 8002b82:	f04f 30ff 	mov.w	r0, #4294967295
 8002b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b8a:	3501      	adds	r5, #1
 8002b8c:	e7c1      	b.n	8002b12 <_printf_common+0x3e>
 8002b8e:	2030      	movs	r0, #48	@ 0x30
 8002b90:	18e1      	adds	r1, r4, r3
 8002b92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b9c:	4422      	add	r2, r4
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ba4:	e7c2      	b.n	8002b2c <_printf_common+0x58>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	4622      	mov	r2, r4
 8002baa:	4641      	mov	r1, r8
 8002bac:	4638      	mov	r0, r7
 8002bae:	47c8      	blx	r9
 8002bb0:	3001      	adds	r0, #1
 8002bb2:	d0e6      	beq.n	8002b82 <_printf_common+0xae>
 8002bb4:	3601      	adds	r6, #1
 8002bb6:	e7d9      	b.n	8002b6c <_printf_common+0x98>

08002bb8 <_printf_i>:
 8002bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bbc:	7e0f      	ldrb	r7, [r1, #24]
 8002bbe:	4691      	mov	r9, r2
 8002bc0:	2f78      	cmp	r7, #120	@ 0x78
 8002bc2:	4680      	mov	r8, r0
 8002bc4:	460c      	mov	r4, r1
 8002bc6:	469a      	mov	sl, r3
 8002bc8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002bca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002bce:	d807      	bhi.n	8002be0 <_printf_i+0x28>
 8002bd0:	2f62      	cmp	r7, #98	@ 0x62
 8002bd2:	d80a      	bhi.n	8002bea <_printf_i+0x32>
 8002bd4:	2f00      	cmp	r7, #0
 8002bd6:	f000 80d1 	beq.w	8002d7c <_printf_i+0x1c4>
 8002bda:	2f58      	cmp	r7, #88	@ 0x58
 8002bdc:	f000 80b8 	beq.w	8002d50 <_printf_i+0x198>
 8002be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002be4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002be8:	e03a      	b.n	8002c60 <_printf_i+0xa8>
 8002bea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002bee:	2b15      	cmp	r3, #21
 8002bf0:	d8f6      	bhi.n	8002be0 <_printf_i+0x28>
 8002bf2:	a101      	add	r1, pc, #4	@ (adr r1, 8002bf8 <_printf_i+0x40>)
 8002bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002bf8:	08002c51 	.word	0x08002c51
 8002bfc:	08002c65 	.word	0x08002c65
 8002c00:	08002be1 	.word	0x08002be1
 8002c04:	08002be1 	.word	0x08002be1
 8002c08:	08002be1 	.word	0x08002be1
 8002c0c:	08002be1 	.word	0x08002be1
 8002c10:	08002c65 	.word	0x08002c65
 8002c14:	08002be1 	.word	0x08002be1
 8002c18:	08002be1 	.word	0x08002be1
 8002c1c:	08002be1 	.word	0x08002be1
 8002c20:	08002be1 	.word	0x08002be1
 8002c24:	08002d63 	.word	0x08002d63
 8002c28:	08002c8f 	.word	0x08002c8f
 8002c2c:	08002d1d 	.word	0x08002d1d
 8002c30:	08002be1 	.word	0x08002be1
 8002c34:	08002be1 	.word	0x08002be1
 8002c38:	08002d85 	.word	0x08002d85
 8002c3c:	08002be1 	.word	0x08002be1
 8002c40:	08002c8f 	.word	0x08002c8f
 8002c44:	08002be1 	.word	0x08002be1
 8002c48:	08002be1 	.word	0x08002be1
 8002c4c:	08002d25 	.word	0x08002d25
 8002c50:	6833      	ldr	r3, [r6, #0]
 8002c52:	1d1a      	adds	r2, r3, #4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6032      	str	r2, [r6, #0]
 8002c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c60:	2301      	movs	r3, #1
 8002c62:	e09c      	b.n	8002d9e <_printf_i+0x1e6>
 8002c64:	6833      	ldr	r3, [r6, #0]
 8002c66:	6820      	ldr	r0, [r4, #0]
 8002c68:	1d19      	adds	r1, r3, #4
 8002c6a:	6031      	str	r1, [r6, #0]
 8002c6c:	0606      	lsls	r6, r0, #24
 8002c6e:	d501      	bpl.n	8002c74 <_printf_i+0xbc>
 8002c70:	681d      	ldr	r5, [r3, #0]
 8002c72:	e003      	b.n	8002c7c <_printf_i+0xc4>
 8002c74:	0645      	lsls	r5, r0, #25
 8002c76:	d5fb      	bpl.n	8002c70 <_printf_i+0xb8>
 8002c78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c7c:	2d00      	cmp	r5, #0
 8002c7e:	da03      	bge.n	8002c88 <_printf_i+0xd0>
 8002c80:	232d      	movs	r3, #45	@ 0x2d
 8002c82:	426d      	negs	r5, r5
 8002c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c88:	230a      	movs	r3, #10
 8002c8a:	4858      	ldr	r0, [pc, #352]	@ (8002dec <_printf_i+0x234>)
 8002c8c:	e011      	b.n	8002cb2 <_printf_i+0xfa>
 8002c8e:	6821      	ldr	r1, [r4, #0]
 8002c90:	6833      	ldr	r3, [r6, #0]
 8002c92:	0608      	lsls	r0, r1, #24
 8002c94:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c98:	d402      	bmi.n	8002ca0 <_printf_i+0xe8>
 8002c9a:	0649      	lsls	r1, r1, #25
 8002c9c:	bf48      	it	mi
 8002c9e:	b2ad      	uxthmi	r5, r5
 8002ca0:	2f6f      	cmp	r7, #111	@ 0x6f
 8002ca2:	6033      	str	r3, [r6, #0]
 8002ca4:	bf14      	ite	ne
 8002ca6:	230a      	movne	r3, #10
 8002ca8:	2308      	moveq	r3, #8
 8002caa:	4850      	ldr	r0, [pc, #320]	@ (8002dec <_printf_i+0x234>)
 8002cac:	2100      	movs	r1, #0
 8002cae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002cb2:	6866      	ldr	r6, [r4, #4]
 8002cb4:	2e00      	cmp	r6, #0
 8002cb6:	60a6      	str	r6, [r4, #8]
 8002cb8:	db05      	blt.n	8002cc6 <_printf_i+0x10e>
 8002cba:	6821      	ldr	r1, [r4, #0]
 8002cbc:	432e      	orrs	r6, r5
 8002cbe:	f021 0104 	bic.w	r1, r1, #4
 8002cc2:	6021      	str	r1, [r4, #0]
 8002cc4:	d04b      	beq.n	8002d5e <_printf_i+0x1a6>
 8002cc6:	4616      	mov	r6, r2
 8002cc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ccc:	fb03 5711 	mls	r7, r3, r1, r5
 8002cd0:	5dc7      	ldrb	r7, [r0, r7]
 8002cd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002cd6:	462f      	mov	r7, r5
 8002cd8:	42bb      	cmp	r3, r7
 8002cda:	460d      	mov	r5, r1
 8002cdc:	d9f4      	bls.n	8002cc8 <_printf_i+0x110>
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d10b      	bne.n	8002cfa <_printf_i+0x142>
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	07df      	lsls	r7, r3, #31
 8002ce6:	d508      	bpl.n	8002cfa <_printf_i+0x142>
 8002ce8:	6923      	ldr	r3, [r4, #16]
 8002cea:	6861      	ldr	r1, [r4, #4]
 8002cec:	4299      	cmp	r1, r3
 8002cee:	bfde      	ittt	le
 8002cf0:	2330      	movle	r3, #48	@ 0x30
 8002cf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002cf6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002cfa:	1b92      	subs	r2, r2, r6
 8002cfc:	6122      	str	r2, [r4, #16]
 8002cfe:	464b      	mov	r3, r9
 8002d00:	4621      	mov	r1, r4
 8002d02:	4640      	mov	r0, r8
 8002d04:	f8cd a000 	str.w	sl, [sp]
 8002d08:	aa03      	add	r2, sp, #12
 8002d0a:	f7ff fee3 	bl	8002ad4 <_printf_common>
 8002d0e:	3001      	adds	r0, #1
 8002d10:	d14a      	bne.n	8002da8 <_printf_i+0x1f0>
 8002d12:	f04f 30ff 	mov.w	r0, #4294967295
 8002d16:	b004      	add	sp, #16
 8002d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	f043 0320 	orr.w	r3, r3, #32
 8002d22:	6023      	str	r3, [r4, #0]
 8002d24:	2778      	movs	r7, #120	@ 0x78
 8002d26:	4832      	ldr	r0, [pc, #200]	@ (8002df0 <_printf_i+0x238>)
 8002d28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	6831      	ldr	r1, [r6, #0]
 8002d30:	061f      	lsls	r7, r3, #24
 8002d32:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d36:	d402      	bmi.n	8002d3e <_printf_i+0x186>
 8002d38:	065f      	lsls	r7, r3, #25
 8002d3a:	bf48      	it	mi
 8002d3c:	b2ad      	uxthmi	r5, r5
 8002d3e:	6031      	str	r1, [r6, #0]
 8002d40:	07d9      	lsls	r1, r3, #31
 8002d42:	bf44      	itt	mi
 8002d44:	f043 0320 	orrmi.w	r3, r3, #32
 8002d48:	6023      	strmi	r3, [r4, #0]
 8002d4a:	b11d      	cbz	r5, 8002d54 <_printf_i+0x19c>
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	e7ad      	b.n	8002cac <_printf_i+0xf4>
 8002d50:	4826      	ldr	r0, [pc, #152]	@ (8002dec <_printf_i+0x234>)
 8002d52:	e7e9      	b.n	8002d28 <_printf_i+0x170>
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	f023 0320 	bic.w	r3, r3, #32
 8002d5a:	6023      	str	r3, [r4, #0]
 8002d5c:	e7f6      	b.n	8002d4c <_printf_i+0x194>
 8002d5e:	4616      	mov	r6, r2
 8002d60:	e7bd      	b.n	8002cde <_printf_i+0x126>
 8002d62:	6833      	ldr	r3, [r6, #0]
 8002d64:	6825      	ldr	r5, [r4, #0]
 8002d66:	1d18      	adds	r0, r3, #4
 8002d68:	6961      	ldr	r1, [r4, #20]
 8002d6a:	6030      	str	r0, [r6, #0]
 8002d6c:	062e      	lsls	r6, r5, #24
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	d501      	bpl.n	8002d76 <_printf_i+0x1be>
 8002d72:	6019      	str	r1, [r3, #0]
 8002d74:	e002      	b.n	8002d7c <_printf_i+0x1c4>
 8002d76:	0668      	lsls	r0, r5, #25
 8002d78:	d5fb      	bpl.n	8002d72 <_printf_i+0x1ba>
 8002d7a:	8019      	strh	r1, [r3, #0]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	4616      	mov	r6, r2
 8002d80:	6123      	str	r3, [r4, #16]
 8002d82:	e7bc      	b.n	8002cfe <_printf_i+0x146>
 8002d84:	6833      	ldr	r3, [r6, #0]
 8002d86:	2100      	movs	r1, #0
 8002d88:	1d1a      	adds	r2, r3, #4
 8002d8a:	6032      	str	r2, [r6, #0]
 8002d8c:	681e      	ldr	r6, [r3, #0]
 8002d8e:	6862      	ldr	r2, [r4, #4]
 8002d90:	4630      	mov	r0, r6
 8002d92:	f000 f99f 	bl	80030d4 <memchr>
 8002d96:	b108      	cbz	r0, 8002d9c <_printf_i+0x1e4>
 8002d98:	1b80      	subs	r0, r0, r6
 8002d9a:	6060      	str	r0, [r4, #4]
 8002d9c:	6863      	ldr	r3, [r4, #4]
 8002d9e:	6123      	str	r3, [r4, #16]
 8002da0:	2300      	movs	r3, #0
 8002da2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002da6:	e7aa      	b.n	8002cfe <_printf_i+0x146>
 8002da8:	4632      	mov	r2, r6
 8002daa:	4649      	mov	r1, r9
 8002dac:	4640      	mov	r0, r8
 8002dae:	6923      	ldr	r3, [r4, #16]
 8002db0:	47d0      	blx	sl
 8002db2:	3001      	adds	r0, #1
 8002db4:	d0ad      	beq.n	8002d12 <_printf_i+0x15a>
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	079b      	lsls	r3, r3, #30
 8002dba:	d413      	bmi.n	8002de4 <_printf_i+0x22c>
 8002dbc:	68e0      	ldr	r0, [r4, #12]
 8002dbe:	9b03      	ldr	r3, [sp, #12]
 8002dc0:	4298      	cmp	r0, r3
 8002dc2:	bfb8      	it	lt
 8002dc4:	4618      	movlt	r0, r3
 8002dc6:	e7a6      	b.n	8002d16 <_printf_i+0x15e>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	4632      	mov	r2, r6
 8002dcc:	4649      	mov	r1, r9
 8002dce:	4640      	mov	r0, r8
 8002dd0:	47d0      	blx	sl
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	d09d      	beq.n	8002d12 <_printf_i+0x15a>
 8002dd6:	3501      	adds	r5, #1
 8002dd8:	68e3      	ldr	r3, [r4, #12]
 8002dda:	9903      	ldr	r1, [sp, #12]
 8002ddc:	1a5b      	subs	r3, r3, r1
 8002dde:	42ab      	cmp	r3, r5
 8002de0:	dcf2      	bgt.n	8002dc8 <_printf_i+0x210>
 8002de2:	e7eb      	b.n	8002dbc <_printf_i+0x204>
 8002de4:	2500      	movs	r5, #0
 8002de6:	f104 0619 	add.w	r6, r4, #25
 8002dea:	e7f5      	b.n	8002dd8 <_printf_i+0x220>
 8002dec:	08003173 	.word	0x08003173
 8002df0:	08003184 	.word	0x08003184

08002df4 <__sflush_r>:
 8002df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	0716      	lsls	r6, r2, #28
 8002dfc:	4605      	mov	r5, r0
 8002dfe:	460c      	mov	r4, r1
 8002e00:	d454      	bmi.n	8002eac <__sflush_r+0xb8>
 8002e02:	684b      	ldr	r3, [r1, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	dc02      	bgt.n	8002e0e <__sflush_r+0x1a>
 8002e08:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	dd48      	ble.n	8002ea0 <__sflush_r+0xac>
 8002e0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e10:	2e00      	cmp	r6, #0
 8002e12:	d045      	beq.n	8002ea0 <__sflush_r+0xac>
 8002e14:	2300      	movs	r3, #0
 8002e16:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002e1a:	682f      	ldr	r7, [r5, #0]
 8002e1c:	6a21      	ldr	r1, [r4, #32]
 8002e1e:	602b      	str	r3, [r5, #0]
 8002e20:	d030      	beq.n	8002e84 <__sflush_r+0x90>
 8002e22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	0759      	lsls	r1, r3, #29
 8002e28:	d505      	bpl.n	8002e36 <__sflush_r+0x42>
 8002e2a:	6863      	ldr	r3, [r4, #4]
 8002e2c:	1ad2      	subs	r2, r2, r3
 8002e2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002e30:	b10b      	cbz	r3, 8002e36 <__sflush_r+0x42>
 8002e32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e34:	1ad2      	subs	r2, r2, r3
 8002e36:	2300      	movs	r3, #0
 8002e38:	4628      	mov	r0, r5
 8002e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e3c:	6a21      	ldr	r1, [r4, #32]
 8002e3e:	47b0      	blx	r6
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	89a3      	ldrh	r3, [r4, #12]
 8002e44:	d106      	bne.n	8002e54 <__sflush_r+0x60>
 8002e46:	6829      	ldr	r1, [r5, #0]
 8002e48:	291d      	cmp	r1, #29
 8002e4a:	d82b      	bhi.n	8002ea4 <__sflush_r+0xb0>
 8002e4c:	4a28      	ldr	r2, [pc, #160]	@ (8002ef0 <__sflush_r+0xfc>)
 8002e4e:	40ca      	lsrs	r2, r1
 8002e50:	07d6      	lsls	r6, r2, #31
 8002e52:	d527      	bpl.n	8002ea4 <__sflush_r+0xb0>
 8002e54:	2200      	movs	r2, #0
 8002e56:	6062      	str	r2, [r4, #4]
 8002e58:	6922      	ldr	r2, [r4, #16]
 8002e5a:	04d9      	lsls	r1, r3, #19
 8002e5c:	6022      	str	r2, [r4, #0]
 8002e5e:	d504      	bpl.n	8002e6a <__sflush_r+0x76>
 8002e60:	1c42      	adds	r2, r0, #1
 8002e62:	d101      	bne.n	8002e68 <__sflush_r+0x74>
 8002e64:	682b      	ldr	r3, [r5, #0]
 8002e66:	b903      	cbnz	r3, 8002e6a <__sflush_r+0x76>
 8002e68:	6560      	str	r0, [r4, #84]	@ 0x54
 8002e6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e6c:	602f      	str	r7, [r5, #0]
 8002e6e:	b1b9      	cbz	r1, 8002ea0 <__sflush_r+0xac>
 8002e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e74:	4299      	cmp	r1, r3
 8002e76:	d002      	beq.n	8002e7e <__sflush_r+0x8a>
 8002e78:	4628      	mov	r0, r5
 8002e7a:	f7ff fbf5 	bl	8002668 <_free_r>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e82:	e00d      	b.n	8002ea0 <__sflush_r+0xac>
 8002e84:	2301      	movs	r3, #1
 8002e86:	4628      	mov	r0, r5
 8002e88:	47b0      	blx	r6
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	1c50      	adds	r0, r2, #1
 8002e8e:	d1c9      	bne.n	8002e24 <__sflush_r+0x30>
 8002e90:	682b      	ldr	r3, [r5, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0c6      	beq.n	8002e24 <__sflush_r+0x30>
 8002e96:	2b1d      	cmp	r3, #29
 8002e98:	d001      	beq.n	8002e9e <__sflush_r+0xaa>
 8002e9a:	2b16      	cmp	r3, #22
 8002e9c:	d11d      	bne.n	8002eda <__sflush_r+0xe6>
 8002e9e:	602f      	str	r7, [r5, #0]
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	e021      	b.n	8002ee8 <__sflush_r+0xf4>
 8002ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ea8:	b21b      	sxth	r3, r3
 8002eaa:	e01a      	b.n	8002ee2 <__sflush_r+0xee>
 8002eac:	690f      	ldr	r7, [r1, #16]
 8002eae:	2f00      	cmp	r7, #0
 8002eb0:	d0f6      	beq.n	8002ea0 <__sflush_r+0xac>
 8002eb2:	0793      	lsls	r3, r2, #30
 8002eb4:	bf18      	it	ne
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	680e      	ldr	r6, [r1, #0]
 8002eba:	bf08      	it	eq
 8002ebc:	694b      	ldreq	r3, [r1, #20]
 8002ebe:	1bf6      	subs	r6, r6, r7
 8002ec0:	600f      	str	r7, [r1, #0]
 8002ec2:	608b      	str	r3, [r1, #8]
 8002ec4:	2e00      	cmp	r6, #0
 8002ec6:	ddeb      	ble.n	8002ea0 <__sflush_r+0xac>
 8002ec8:	4633      	mov	r3, r6
 8002eca:	463a      	mov	r2, r7
 8002ecc:	4628      	mov	r0, r5
 8002ece:	6a21      	ldr	r1, [r4, #32]
 8002ed0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002ed4:	47e0      	blx	ip
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	dc07      	bgt.n	8002eea <__sflush_r+0xf6>
 8002eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee6:	81a3      	strh	r3, [r4, #12]
 8002ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eea:	4407      	add	r7, r0
 8002eec:	1a36      	subs	r6, r6, r0
 8002eee:	e7e9      	b.n	8002ec4 <__sflush_r+0xd0>
 8002ef0:	20400001 	.word	0x20400001

08002ef4 <_fflush_r>:
 8002ef4:	b538      	push	{r3, r4, r5, lr}
 8002ef6:	690b      	ldr	r3, [r1, #16]
 8002ef8:	4605      	mov	r5, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	b913      	cbnz	r3, 8002f04 <_fflush_r+0x10>
 8002efe:	2500      	movs	r5, #0
 8002f00:	4628      	mov	r0, r5
 8002f02:	bd38      	pop	{r3, r4, r5, pc}
 8002f04:	b118      	cbz	r0, 8002f0e <_fflush_r+0x1a>
 8002f06:	6a03      	ldr	r3, [r0, #32]
 8002f08:	b90b      	cbnz	r3, 8002f0e <_fflush_r+0x1a>
 8002f0a:	f7ff f9ab 	bl	8002264 <__sinit>
 8002f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f3      	beq.n	8002efe <_fflush_r+0xa>
 8002f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002f18:	07d0      	lsls	r0, r2, #31
 8002f1a:	d404      	bmi.n	8002f26 <_fflush_r+0x32>
 8002f1c:	0599      	lsls	r1, r3, #22
 8002f1e:	d402      	bmi.n	8002f26 <_fflush_r+0x32>
 8002f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f22:	f7ff fb9e 	bl	8002662 <__retarget_lock_acquire_recursive>
 8002f26:	4628      	mov	r0, r5
 8002f28:	4621      	mov	r1, r4
 8002f2a:	f7ff ff63 	bl	8002df4 <__sflush_r>
 8002f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f30:	4605      	mov	r5, r0
 8002f32:	07da      	lsls	r2, r3, #31
 8002f34:	d4e4      	bmi.n	8002f00 <_fflush_r+0xc>
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	059b      	lsls	r3, r3, #22
 8002f3a:	d4e1      	bmi.n	8002f00 <_fflush_r+0xc>
 8002f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f3e:	f7ff fb91 	bl	8002664 <__retarget_lock_release_recursive>
 8002f42:	e7dd      	b.n	8002f00 <_fflush_r+0xc>

08002f44 <__swhatbuf_r>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	460c      	mov	r4, r1
 8002f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f4c:	4615      	mov	r5, r2
 8002f4e:	2900      	cmp	r1, #0
 8002f50:	461e      	mov	r6, r3
 8002f52:	b096      	sub	sp, #88	@ 0x58
 8002f54:	da0c      	bge.n	8002f70 <__swhatbuf_r+0x2c>
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	2100      	movs	r1, #0
 8002f5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002f5e:	bf14      	ite	ne
 8002f60:	2340      	movne	r3, #64	@ 0x40
 8002f62:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002f66:	2000      	movs	r0, #0
 8002f68:	6031      	str	r1, [r6, #0]
 8002f6a:	602b      	str	r3, [r5, #0]
 8002f6c:	b016      	add	sp, #88	@ 0x58
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	466a      	mov	r2, sp
 8002f72:	f000 f87d 	bl	8003070 <_fstat_r>
 8002f76:	2800      	cmp	r0, #0
 8002f78:	dbed      	blt.n	8002f56 <__swhatbuf_r+0x12>
 8002f7a:	9901      	ldr	r1, [sp, #4]
 8002f7c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002f80:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002f84:	4259      	negs	r1, r3
 8002f86:	4159      	adcs	r1, r3
 8002f88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f8c:	e7eb      	b.n	8002f66 <__swhatbuf_r+0x22>

08002f8e <__smakebuf_r>:
 8002f8e:	898b      	ldrh	r3, [r1, #12]
 8002f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f92:	079d      	lsls	r5, r3, #30
 8002f94:	4606      	mov	r6, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	d507      	bpl.n	8002faa <__smakebuf_r+0x1c>
 8002f9a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002f9e:	6023      	str	r3, [r4, #0]
 8002fa0:	6123      	str	r3, [r4, #16]
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	6163      	str	r3, [r4, #20]
 8002fa6:	b003      	add	sp, #12
 8002fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002faa:	466a      	mov	r2, sp
 8002fac:	ab01      	add	r3, sp, #4
 8002fae:	f7ff ffc9 	bl	8002f44 <__swhatbuf_r>
 8002fb2:	9f00      	ldr	r7, [sp, #0]
 8002fb4:	4605      	mov	r5, r0
 8002fb6:	4639      	mov	r1, r7
 8002fb8:	4630      	mov	r0, r6
 8002fba:	f7ff fbbf 	bl	800273c <_malloc_r>
 8002fbe:	b948      	cbnz	r0, 8002fd4 <__smakebuf_r+0x46>
 8002fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fc4:	059a      	lsls	r2, r3, #22
 8002fc6:	d4ee      	bmi.n	8002fa6 <__smakebuf_r+0x18>
 8002fc8:	f023 0303 	bic.w	r3, r3, #3
 8002fcc:	f043 0302 	orr.w	r3, r3, #2
 8002fd0:	81a3      	strh	r3, [r4, #12]
 8002fd2:	e7e2      	b.n	8002f9a <__smakebuf_r+0xc>
 8002fd4:	89a3      	ldrh	r3, [r4, #12]
 8002fd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fde:	81a3      	strh	r3, [r4, #12]
 8002fe0:	9b01      	ldr	r3, [sp, #4]
 8002fe2:	6020      	str	r0, [r4, #0]
 8002fe4:	b15b      	cbz	r3, 8002ffe <__smakebuf_r+0x70>
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fec:	f000 f852 	bl	8003094 <_isatty_r>
 8002ff0:	b128      	cbz	r0, 8002ffe <__smakebuf_r+0x70>
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	f023 0303 	bic.w	r3, r3, #3
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	81a3      	strh	r3, [r4, #12]
 8002ffe:	89a3      	ldrh	r3, [r4, #12]
 8003000:	431d      	orrs	r5, r3
 8003002:	81a5      	strh	r5, [r4, #12]
 8003004:	e7cf      	b.n	8002fa6 <__smakebuf_r+0x18>

08003006 <_putc_r>:
 8003006:	b570      	push	{r4, r5, r6, lr}
 8003008:	460d      	mov	r5, r1
 800300a:	4614      	mov	r4, r2
 800300c:	4606      	mov	r6, r0
 800300e:	b118      	cbz	r0, 8003018 <_putc_r+0x12>
 8003010:	6a03      	ldr	r3, [r0, #32]
 8003012:	b90b      	cbnz	r3, 8003018 <_putc_r+0x12>
 8003014:	f7ff f926 	bl	8002264 <__sinit>
 8003018:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800301a:	07d8      	lsls	r0, r3, #31
 800301c:	d405      	bmi.n	800302a <_putc_r+0x24>
 800301e:	89a3      	ldrh	r3, [r4, #12]
 8003020:	0599      	lsls	r1, r3, #22
 8003022:	d402      	bmi.n	800302a <_putc_r+0x24>
 8003024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003026:	f7ff fb1c 	bl	8002662 <__retarget_lock_acquire_recursive>
 800302a:	68a3      	ldr	r3, [r4, #8]
 800302c:	3b01      	subs	r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	60a3      	str	r3, [r4, #8]
 8003032:	da05      	bge.n	8003040 <_putc_r+0x3a>
 8003034:	69a2      	ldr	r2, [r4, #24]
 8003036:	4293      	cmp	r3, r2
 8003038:	db12      	blt.n	8003060 <_putc_r+0x5a>
 800303a:	b2eb      	uxtb	r3, r5
 800303c:	2b0a      	cmp	r3, #10
 800303e:	d00f      	beq.n	8003060 <_putc_r+0x5a>
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	6022      	str	r2, [r4, #0]
 8003046:	701d      	strb	r5, [r3, #0]
 8003048:	b2ed      	uxtb	r5, r5
 800304a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800304c:	07da      	lsls	r2, r3, #31
 800304e:	d405      	bmi.n	800305c <_putc_r+0x56>
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	059b      	lsls	r3, r3, #22
 8003054:	d402      	bmi.n	800305c <_putc_r+0x56>
 8003056:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003058:	f7ff fb04 	bl	8002664 <__retarget_lock_release_recursive>
 800305c:	4628      	mov	r0, r5
 800305e:	bd70      	pop	{r4, r5, r6, pc}
 8003060:	4629      	mov	r1, r5
 8003062:	4622      	mov	r2, r4
 8003064:	4630      	mov	r0, r6
 8003066:	f7ff f9ee 	bl	8002446 <__swbuf_r>
 800306a:	4605      	mov	r5, r0
 800306c:	e7ed      	b.n	800304a <_putc_r+0x44>
	...

08003070 <_fstat_r>:
 8003070:	b538      	push	{r3, r4, r5, lr}
 8003072:	2300      	movs	r3, #0
 8003074:	4d06      	ldr	r5, [pc, #24]	@ (8003090 <_fstat_r+0x20>)
 8003076:	4604      	mov	r4, r0
 8003078:	4608      	mov	r0, r1
 800307a:	4611      	mov	r1, r2
 800307c:	602b      	str	r3, [r5, #0]
 800307e:	f7fd fb93 	bl	80007a8 <_fstat>
 8003082:	1c43      	adds	r3, r0, #1
 8003084:	d102      	bne.n	800308c <_fstat_r+0x1c>
 8003086:	682b      	ldr	r3, [r5, #0]
 8003088:	b103      	cbz	r3, 800308c <_fstat_r+0x1c>
 800308a:	6023      	str	r3, [r4, #0]
 800308c:	bd38      	pop	{r3, r4, r5, pc}
 800308e:	bf00      	nop
 8003090:	20000278 	.word	0x20000278

08003094 <_isatty_r>:
 8003094:	b538      	push	{r3, r4, r5, lr}
 8003096:	2300      	movs	r3, #0
 8003098:	4d05      	ldr	r5, [pc, #20]	@ (80030b0 <_isatty_r+0x1c>)
 800309a:	4604      	mov	r4, r0
 800309c:	4608      	mov	r0, r1
 800309e:	602b      	str	r3, [r5, #0]
 80030a0:	f7fd fb91 	bl	80007c6 <_isatty>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d102      	bne.n	80030ae <_isatty_r+0x1a>
 80030a8:	682b      	ldr	r3, [r5, #0]
 80030aa:	b103      	cbz	r3, 80030ae <_isatty_r+0x1a>
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	bd38      	pop	{r3, r4, r5, pc}
 80030b0:	20000278 	.word	0x20000278

080030b4 <_sbrk_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	2300      	movs	r3, #0
 80030b8:	4d05      	ldr	r5, [pc, #20]	@ (80030d0 <_sbrk_r+0x1c>)
 80030ba:	4604      	mov	r4, r0
 80030bc:	4608      	mov	r0, r1
 80030be:	602b      	str	r3, [r5, #0]
 80030c0:	f7fd fb98 	bl	80007f4 <_sbrk>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <_sbrk_r+0x1a>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	b103      	cbz	r3, 80030ce <_sbrk_r+0x1a>
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
 80030d0:	20000278 	.word	0x20000278

080030d4 <memchr>:
 80030d4:	4603      	mov	r3, r0
 80030d6:	b510      	push	{r4, lr}
 80030d8:	b2c9      	uxtb	r1, r1
 80030da:	4402      	add	r2, r0
 80030dc:	4293      	cmp	r3, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	d101      	bne.n	80030e6 <memchr+0x12>
 80030e2:	2000      	movs	r0, #0
 80030e4:	e003      	b.n	80030ee <memchr+0x1a>
 80030e6:	7804      	ldrb	r4, [r0, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	428c      	cmp	r4, r1
 80030ec:	d1f6      	bne.n	80030dc <memchr+0x8>
 80030ee:	bd10      	pop	{r4, pc}

080030f0 <_init>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	bf00      	nop
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr

080030fc <_fini>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr
