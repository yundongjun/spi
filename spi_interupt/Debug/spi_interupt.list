
spi_interupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003954  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003a60  08003a60  00004a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae4  08003ae4  00005070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003ae4  08003ae4  00005070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003ae4  08003ae4  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ae4  08003ae4  00004ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ae8  08003ae8  00004ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003aec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  08003b5c  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08003b5c  00005318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000971a  00000000  00000000  00005099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbc  00000000  00000000  0000e7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00010370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000735  00000000  00000000  00010ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cd5  00000000  00000000  00011415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aae3  00000000  00000000  000290ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a77  00000000  00000000  00033bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9644  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df0  00000000  00000000  000b9688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000bc478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a48 	.word	0x08003a48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003a48 	.word	0x08003a48

0800014c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <__io_putchar+0x20>)
 800015e:	f002 facc 	bl	80026fa <HAL_UART_Transmit>
    return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	2000017c 	.word	0x2000017c

08000170 <compute_response>:

static void compute_response(const uint8_t in[BUFFER_SIZE], uint8_t out[BUFFER_SIZE])
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
    for (int i=0; i<BUFFER_SIZE; i++) {
 800017a:	2300      	movs	r3, #0
 800017c:	60fb      	str	r3, [r7, #12]
 800017e:	e016      	b.n	80001ae <compute_response+0x3e>
        uint8_t c = in[i];
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	72fb      	strb	r3, [r7, #11]
        out[i] = (c >= 'a' && c <= 'z') ? (uint8_t)(c - 'a' + 'A') : c;
 800018a:	7afb      	ldrb	r3, [r7, #11]
 800018c:	2b60      	cmp	r3, #96	@ 0x60
 800018e:	d906      	bls.n	800019e <compute_response+0x2e>
 8000190:	7afb      	ldrb	r3, [r7, #11]
 8000192:	2b7a      	cmp	r3, #122	@ 0x7a
 8000194:	d803      	bhi.n	800019e <compute_response+0x2e>
 8000196:	7afb      	ldrb	r3, [r7, #11]
 8000198:	3b20      	subs	r3, #32
 800019a:	b2db      	uxtb	r3, r3
 800019c:	e000      	b.n	80001a0 <compute_response+0x30>
 800019e:	7afb      	ldrb	r3, [r7, #11]
 80001a0:	68fa      	ldr	r2, [r7, #12]
 80001a2:	6839      	ldr	r1, [r7, #0]
 80001a4:	440a      	add	r2, r1
 80001a6:	7013      	strb	r3, [r2, #0]
    for (int i=0; i<BUFFER_SIZE; i++) {
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	3301      	adds	r3, #1
 80001ac:	60fb      	str	r3, [r7, #12]
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2b05      	cmp	r3, #5
 80001b2:	dde5      	ble.n	8000180 <compute_response+0x10>
    }
    out[0] = 'O'; out[1] = 'K';
 80001b4:	683b      	ldr	r3, [r7, #0]
 80001b6:	224f      	movs	r2, #79	@ 0x4f
 80001b8:	701a      	strb	r2, [r3, #0]
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	3301      	adds	r3, #1
 80001be:	224b      	movs	r2, #75	@ 0x4b
 80001c0:	701a      	strb	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	3714      	adds	r7, #20
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fc31 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f867 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f929 	bl	8000430 <MX_GPIO_Init>
  MX_DMA_Init();
 80001de:	f000 f901 	bl	80003e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001e2:	f000 f8d5 	bl	8000390 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80001e6:	f000 f8a1 	bl	800032c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 80001ea:	2200      	movs	r2, #0
 80001ec:	2101      	movs	r1, #1
 80001ee:	2024      	movs	r0, #36	@ 0x24
 80001f0:	f000 fd5b 	bl	8000caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80001f4:	2024      	movs	r0, #36	@ 0x24
 80001f6:	f000 fd74 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  HAL_SPI_TransmitReceive_DMA(&hspi2, tx, rx, BUFFER_SIZE);
 80001fa:	2306      	movs	r3, #6
 80001fc:	4a21      	ldr	r2, [pc, #132]	@ (8000284 <main+0xb8>)
 80001fe:	4922      	ldr	r1, [pc, #136]	@ (8000288 <main+0xbc>)
 8000200:	4822      	ldr	r0, [pc, #136]	@ (800028c <main+0xc0>)
 8000202:	f001 fe41 	bl	8001e88 <HAL_SPI_TransmitReceive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (frame_done) {
 8000206:	4b22      	ldr	r3, [pc, #136]	@ (8000290 <main+0xc4>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	b2db      	uxtb	r3, r3
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0fa      	beq.n	8000206 <main+0x3a>
		 frame_done = 0;
 8000210:	4b1f      	ldr	r3, [pc, #124]	@ (8000290 <main+0xc4>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
		 // 직전 프레임에서 받은 바이트를 UART로 보기 (콜백 안에서 출력 금지!)
		 printf("RX: ");
 8000216:	481f      	ldr	r0, [pc, #124]	@ (8000294 <main+0xc8>)
 8000218:	f002 fd06 	bl	8002c28 <iprintf>
		 for (int i=0;i<BUFFER_SIZE;i++) printf("%02X ", last_rx[i]);
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	e00b      	b.n	800023a <main+0x6e>
 8000222:	4a1d      	ldr	r2, [pc, #116]	@ (8000298 <main+0xcc>)
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	4413      	add	r3, r2
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	4619      	mov	r1, r3
 800022e:	481b      	ldr	r0, [pc, #108]	@ (800029c <main+0xd0>)
 8000230:	f002 fcfa 	bl	8002c28 <iprintf>
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	3301      	adds	r3, #1
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	2b05      	cmp	r3, #5
 800023e:	ddf0      	ble.n	8000222 <main+0x56>
		 printf(" | \"");
 8000240:	4817      	ldr	r0, [pc, #92]	@ (80002a0 <main+0xd4>)
 8000242:	f002 fcf1 	bl	8002c28 <iprintf>
		 for (int i=0;i<BUFFER_SIZE;i++) {
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	e013      	b.n	8000274 <main+0xa8>
			 uint8_t c = last_rx[i];
 800024c:	4a12      	ldr	r2, [pc, #72]	@ (8000298 <main+0xcc>)
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	4413      	add	r3, r2
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	71fb      	strb	r3, [r7, #7]
			 putchar((c>=32 && c<=126) ? c : '.');
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2b1f      	cmp	r3, #31
 800025a:	d904      	bls.n	8000266 <main+0x9a>
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000260:	d801      	bhi.n	8000266 <main+0x9a>
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	e000      	b.n	8000268 <main+0x9c>
 8000266:	232e      	movs	r3, #46	@ 0x2e
 8000268:	4618      	mov	r0, r3
 800026a:	f002 fcef 	bl	8002c4c <putchar>
		 for (int i=0;i<BUFFER_SIZE;i++) {
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	3301      	adds	r3, #1
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	2b05      	cmp	r3, #5
 8000278:	dde8      	ble.n	800024c <main+0x80>
		 }
		 printf("\"\r\n");
 800027a:	480a      	ldr	r0, [pc, #40]	@ (80002a4 <main+0xd8>)
 800027c:	f002 fd44 	bl	8002d08 <puts>
	if (frame_done) {
 8000280:	e7c1      	b.n	8000206 <main+0x3a>
 8000282:	bf00      	nop
 8000284:	2000008c 	.word	0x2000008c
 8000288:	20000000 	.word	0x20000000
 800028c:	2000009c 	.word	0x2000009c
 8000290:	2000009a 	.word	0x2000009a
 8000294:	08003a60 	.word	0x08003a60
 8000298:	20000094 	.word	0x20000094
 800029c:	08003a68 	.word	0x08003a68
 80002a0:	08003a70 	.word	0x08003a70
 80002a4:	08003a78 	.word	0x08003a78

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b090      	sub	sp, #64	@ 0x40
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2228      	movs	r2, #40	@ 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fe06 	bl	8002ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ca:	2302      	movs	r3, #2
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	2310      	movs	r3, #16
 80002d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002da:	2300      	movs	r3, #0
 80002dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002de:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 f939 	bl	8001560 <HAL_RCC_OscConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002f4:	f000 f962 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	230f      	movs	r3, #15
 80002fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	2302      	movs	r3, #2
 80002fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000304:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2102      	movs	r1, #2
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fba6 	bl	8001a64 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800031e:	f000 f94d 	bl	80005bc <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3740      	adds	r7, #64	@ 0x40
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000330:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <MX_SPI2_Init+0x5c>)
 8000332:	4a16      	ldr	r2, [pc, #88]	@ (800038c <MX_SPI2_Init+0x60>)
 8000334:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000336:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <MX_SPI2_Init+0x5c>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800033c:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <MX_SPI2_Init+0x5c>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000342:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_SPI2_Init+0x5c>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <MX_SPI2_Init+0x5c>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_SPI2_Init+0x5c>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_SPI2_Init+0x5c>)
 8000356:	2200      	movs	r2, #0
 8000358:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_SPI2_Init+0x5c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_SPI2_Init+0x5c>)
 8000362:	2200      	movs	r2, #0
 8000364:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_SPI2_Init+0x5c>)
 8000368:	2200      	movs	r2, #0
 800036a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_SPI2_Init+0x5c>)
 800036e:	220a      	movs	r2, #10
 8000370:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_SPI2_Init+0x5c>)
 8000374:	f001 fd04 	bl	8001d80 <HAL_SPI_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 800037e:	f000 f91d 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	2000009c 	.word	0x2000009c
 800038c:	40003800 	.word	0x40003800

08000390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000394:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 8000396:	4a12      	ldr	r2, [pc, #72]	@ (80003e0 <MX_USART2_UART_Init+0x50>)
 8000398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800039a:	4b10      	ldr	r3, [pc, #64]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 800039c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b4:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003b6:	220c      	movs	r2, #12
 80003b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003c6:	4805      	ldr	r0, [pc, #20]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003c8:	f002 f947 	bl	800265a <HAL_UART_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003d2:	f000 f8f3 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	2000017c 	.word	0x2000017c
 80003e0:	40004400 	.word	0x40004400

080003e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ea:	4b10      	ldr	r3, [pc, #64]	@ (800042c <MX_DMA_Init+0x48>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a0f      	ldr	r2, [pc, #60]	@ (800042c <MX_DMA_Init+0x48>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b0d      	ldr	r3, [pc, #52]	@ (800042c <MX_DMA_Init+0x48>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2100      	movs	r1, #0
 8000406:	200e      	movs	r0, #14
 8000408:	f000 fc4f 	bl	8000caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800040c:	200e      	movs	r0, #14
 800040e:	f000 fc68 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	2100      	movs	r1, #0
 8000416:	200f      	movs	r0, #15
 8000418:	f000 fc47 	bl	8000caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800041c:	200f      	movs	r0, #15
 800041e:	f000 fc60 	bl	8000ce2 <HAL_NVIC_EnableIRQ>

}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000444:	4b2d      	ldr	r3, [pc, #180]	@ (80004fc <MX_GPIO_Init+0xcc>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a2c      	ldr	r2, [pc, #176]	@ (80004fc <MX_GPIO_Init+0xcc>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <MX_GPIO_Init+0xcc>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0310 	and.w	r3, r3, #16
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4b27      	ldr	r3, [pc, #156]	@ (80004fc <MX_GPIO_Init+0xcc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a26      	ldr	r2, [pc, #152]	@ (80004fc <MX_GPIO_Init+0xcc>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b24      	ldr	r3, [pc, #144]	@ (80004fc <MX_GPIO_Init+0xcc>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <MX_GPIO_Init+0xcc>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a20      	ldr	r2, [pc, #128]	@ (80004fc <MX_GPIO_Init+0xcc>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b1e      	ldr	r3, [pc, #120]	@ (80004fc <MX_GPIO_Init+0xcc>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b1b      	ldr	r3, [pc, #108]	@ (80004fc <MX_GPIO_Init+0xcc>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a1a      	ldr	r2, [pc, #104]	@ (80004fc <MX_GPIO_Init+0xcc>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b18      	ldr	r3, [pc, #96]	@ (80004fc <MX_GPIO_Init+0xcc>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2120      	movs	r1, #32
 80004a8:	4815      	ldr	r0, [pc, #84]	@ (8000500 <MX_GPIO_Init+0xd0>)
 80004aa:	f001 f81f 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b4:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <MX_GPIO_Init+0xd4>)
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	4811      	ldr	r0, [pc, #68]	@ (8000508 <MX_GPIO_Init+0xd8>)
 80004c4:	f000 fe8e 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004c8:	2320      	movs	r3, #32
 80004ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004cc:	2301      	movs	r3, #1
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d4:	2302      	movs	r3, #2
 80004d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4808      	ldr	r0, [pc, #32]	@ (8000500 <MX_GPIO_Init+0xd0>)
 80004e0:	f000 fe80 	bl	80011e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	2028      	movs	r0, #40	@ 0x28
 80004ea:	f000 fbde 	bl	8000caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004ee:	2028      	movs	r0, #40	@ 0x28
 80004f0:	f000 fbf7 	bl	8000ce2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800
 8000504:	10110000 	.word	0x10110000
 8000508:	40011000 	.word	0x40011000

0800050c <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    if (hspi != &hspi2) return;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <HAL_SPI_TxRxCpltCallback+0x44>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d114      	bne.n	8000546 <HAL_SPI_TxRxCpltCallback+0x3a>

    // 방금 받은 프레임 저장(메인 루프에서 출력용)
    memcpy((void*)last_rx, rx, BUFFER_SIZE);
 800051c:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <HAL_SPI_TxRxCpltCallback+0x48>)
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8000520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000524:	6018      	str	r0, [r3, #0]
 8000526:	3304      	adds	r3, #4
 8000528:	8019      	strh	r1, [r3, #0]
    frame_done = 1;
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <HAL_SPI_TxRxCpltCallback+0x50>)
 800052c:	2201      	movs	r2, #1
 800052e:	701a      	strb	r2, [r3, #0]

    // 다음 프레임에 나갈 응답 만들기
    compute_response(rx, tx);
 8000530:	490b      	ldr	r1, [pc, #44]	@ (8000560 <HAL_SPI_TxRxCpltCallback+0x54>)
 8000532:	4809      	ldr	r0, [pc, #36]	@ (8000558 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8000534:	f7ff fe1c 	bl	8000170 <compute_response>

    // 곧바로 다음 프레임 대기 상태로 재-시작
    HAL_SPI_TransmitReceive_DMA(&hspi2, tx, rx, BUFFER_SIZE);
 8000538:	2306      	movs	r3, #6
 800053a:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800053c:	4908      	ldr	r1, [pc, #32]	@ (8000560 <HAL_SPI_TxRxCpltCallback+0x54>)
 800053e:	4804      	ldr	r0, [pc, #16]	@ (8000550 <HAL_SPI_TxRxCpltCallback+0x44>)
 8000540:	f001 fca2 	bl	8001e88 <HAL_SPI_TransmitReceive_DMA>
 8000544:	e000      	b.n	8000548 <HAL_SPI_TxRxCpltCallback+0x3c>
    if (hspi != &hspi2) return;
 8000546:	bf00      	nop
}
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000009c 	.word	0x2000009c
 8000554:	20000094 	.word	0x20000094
 8000558:	2000008c 	.word	0x2000008c
 800055c:	2000009a 	.word	0x2000009a
 8000560:	20000000 	.word	0x20000000

08000564 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    (void)hspi;
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
	...

08000578 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    if (hspi != &hspi2) return;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <HAL_SPI_ErrorCallback+0x34>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d10d      	bne.n	80005a4 <HAL_SPI_ErrorCallback+0x2c>
    memcpy(tx, (const uint8_t*)"ERR!!!", BUFFER_SIZE);
 8000588:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_SPI_ErrorCallback+0x38>)
 800058a:	4a0a      	ldr	r2, [pc, #40]	@ (80005b4 <HAL_SPI_ErrorCallback+0x3c>)
 800058c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000590:	6018      	str	r0, [r3, #0]
 8000592:	3304      	adds	r3, #4
 8000594:	8019      	strh	r1, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi2, tx, rx, BUFFER_SIZE);
 8000596:	2306      	movs	r3, #6
 8000598:	4a07      	ldr	r2, [pc, #28]	@ (80005b8 <HAL_SPI_ErrorCallback+0x40>)
 800059a:	4905      	ldr	r1, [pc, #20]	@ (80005b0 <HAL_SPI_ErrorCallback+0x38>)
 800059c:	4803      	ldr	r0, [pc, #12]	@ (80005ac <HAL_SPI_ErrorCallback+0x34>)
 800059e:	f001 fc73 	bl	8001e88 <HAL_SPI_TransmitReceive_DMA>
 80005a2:	e000      	b.n	80005a6 <HAL_SPI_ErrorCallback+0x2e>
    if (hspi != &hspi2) return;
 80005a4:	bf00      	nop
}
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000009c 	.word	0x2000009c
 80005b0:	20000000 	.word	0x20000000
 80005b4:	08003a7c 	.word	0x08003a7c
 80005b8:	2000008c 	.word	0x2000008c

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <Error_Handler+0x8>

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <HAL_MspInit+0x5c>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <HAL_MspInit+0x5c>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6193      	str	r3, [r2, #24]
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <HAL_MspInit+0x5c>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_MspInit+0x5c>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <HAL_MspInit+0x5c>)
 80005ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	61d3      	str	r3, [r2, #28]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <HAL_MspInit+0x5c>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <HAL_MspInit+0x60>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <HAL_MspInit+0x60>)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	40021000 	.word	0x40021000
 8000628:	40010000 	.word	0x40010000

0800062c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a47      	ldr	r2, [pc, #284]	@ (8000764 <HAL_SPI_MspInit+0x138>)
 8000648:	4293      	cmp	r3, r2
 800064a:	f040 8086 	bne.w	800075a <HAL_SPI_MspInit+0x12e>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800064e:	4b46      	ldr	r3, [pc, #280]	@ (8000768 <HAL_SPI_MspInit+0x13c>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a45      	ldr	r2, [pc, #276]	@ (8000768 <HAL_SPI_MspInit+0x13c>)
 8000654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b43      	ldr	r3, [pc, #268]	@ (8000768 <HAL_SPI_MspInit+0x13c>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b40      	ldr	r3, [pc, #256]	@ (8000768 <HAL_SPI_MspInit+0x13c>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a3f      	ldr	r2, [pc, #252]	@ (8000768 <HAL_SPI_MspInit+0x13c>)
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b3d      	ldr	r3, [pc, #244]	@ (8000768 <HAL_SPI_MspInit+0x13c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800067e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	4836      	ldr	r0, [pc, #216]	@ (800076c <HAL_SPI_MspInit+0x140>)
 8000694:	f000 fda6 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000698:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800069c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4619      	mov	r1, r3
 80006ac:	482f      	ldr	r0, [pc, #188]	@ (800076c <HAL_SPI_MspInit+0x140>)
 80006ae:	f000 fd99 	bl	80011e4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80006b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000770 <HAL_SPI_MspInit+0x144>)
 80006b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000774 <HAL_SPI_MspInit+0x148>)
 80006b6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000770 <HAL_SPI_MspInit+0x144>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006be:	4b2c      	ldr	r3, [pc, #176]	@ (8000770 <HAL_SPI_MspInit+0x144>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000770 <HAL_SPI_MspInit+0x144>)
 80006c6:	2280      	movs	r2, #128	@ 0x80
 80006c8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <HAL_SPI_MspInit+0x144>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006d0:	4b27      	ldr	r3, [pc, #156]	@ (8000770 <HAL_SPI_MspInit+0x144>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <HAL_SPI_MspInit+0x144>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <HAL_SPI_MspInit+0x144>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80006e2:	4823      	ldr	r0, [pc, #140]	@ (8000770 <HAL_SPI_MspInit+0x144>)
 80006e4:	f000 fb18 	bl	8000d18 <HAL_DMA_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80006ee:	f7ff ff65 	bl	80005bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000770 <HAL_SPI_MspInit+0x144>)
 80006f6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000770 <HAL_SPI_MspInit+0x144>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80006fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <HAL_SPI_MspInit+0x14c>)
 8000700:	4a1e      	ldr	r2, [pc, #120]	@ (800077c <HAL_SPI_MspInit+0x150>)
 8000702:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000704:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <HAL_SPI_MspInit+0x14c>)
 8000706:	2210      	movs	r2, #16
 8000708:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800070a:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <HAL_SPI_MspInit+0x14c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000710:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <HAL_SPI_MspInit+0x14c>)
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000716:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <HAL_SPI_MspInit+0x14c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <HAL_SPI_MspInit+0x14c>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <HAL_SPI_MspInit+0x14c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <HAL_SPI_MspInit+0x14c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800072e:	4812      	ldr	r0, [pc, #72]	@ (8000778 <HAL_SPI_MspInit+0x14c>)
 8000730:	f000 faf2 	bl	8000d18 <HAL_DMA_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 800073a:	f7ff ff3f 	bl	80005bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a0d      	ldr	r2, [pc, #52]	@ (8000778 <HAL_SPI_MspInit+0x14c>)
 8000742:	649a      	str	r2, [r3, #72]	@ 0x48
 8000744:	4a0c      	ldr	r2, [pc, #48]	@ (8000778 <HAL_SPI_MspInit+0x14c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2024      	movs	r0, #36	@ 0x24
 8000750:	f000 faab 	bl	8000caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000754:	2024      	movs	r0, #36	@ 0x24
 8000756:	f000 fac4 	bl	8000ce2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800075a:	bf00      	nop
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40003800 	.word	0x40003800
 8000768:	40021000 	.word	0x40021000
 800076c:	40010c00 	.word	0x40010c00
 8000770:	200000f4 	.word	0x200000f4
 8000774:	40020044 	.word	0x40020044
 8000778:	20000138 	.word	0x20000138
 800077c:	40020058 	.word	0x40020058

08000780 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a15      	ldr	r2, [pc, #84]	@ (80007f0 <HAL_UART_MspInit+0x70>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d123      	bne.n	80007e8 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <HAL_UART_MspInit+0x74>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	4a13      	ldr	r2, [pc, #76]	@ (80007f4 <HAL_UART_MspInit+0x74>)
 80007a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007aa:	61d3      	str	r3, [r2, #28]
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <HAL_UART_MspInit+0x74>)
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <HAL_UART_MspInit+0x74>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a0d      	ldr	r2, [pc, #52]	@ (80007f4 <HAL_UART_MspInit+0x74>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <HAL_UART_MspInit+0x74>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d0:	230c      	movs	r3, #12
 80007d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2302      	movs	r3, #2
 80007da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4619      	mov	r1, r3
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <HAL_UART_MspInit+0x78>)
 80007e4:	f000 fcfe 	bl	80011e4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40004400 	.word	0x40004400
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010800 	.word	0x40010800

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <NMI_Handler+0x4>

08000804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <MemManage_Handler+0x4>

08000814 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <UsageFault_Handler+0x4>

08000824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084c:	f000 f93a 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000858:	4802      	ldr	r0, [pc, #8]	@ (8000864 <DMA1_Channel4_IRQHandler+0x10>)
 800085a:	f000 fb8f 	bl	8000f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000f4 	.word	0x200000f4

08000868 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800086c:	4802      	ldr	r0, [pc, #8]	@ (8000878 <DMA1_Channel5_IRQHandler+0x10>)
 800086e:	f000 fb85 	bl	8000f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000138 	.word	0x20000138

0800087c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000880:	4802      	ldr	r0, [pc, #8]	@ (800088c <SPI2_IRQHandler+0x10>)
 8000882:	f001 fbfd 	bl	8002080 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000009c 	.word	0x2000009c

08000890 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000894:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000898:	f000 fe40 	bl	800151c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	e00a      	b.n	80008c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008b2:	f3af 8000 	nop.w
 80008b6:	4601      	mov	r1, r0
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	60ba      	str	r2, [r7, #8]
 80008be:	b2ca      	uxtb	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3301      	adds	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	dbf0      	blt.n	80008b2 <_read+0x12>
  }

  return len;
 80008d0:	687b      	ldr	r3, [r7, #4]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	e009      	b.n	8000900 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	60ba      	str	r2, [r7, #8]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc29 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3301      	adds	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbf1      	blt.n	80008ec <_write+0x12>
  }
  return len;
 8000908:	687b      	ldr	r3, [r7, #4]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <_close>:

int _close(int file)
{
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000938:	605a      	str	r2, [r3, #4]
  return 0;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <_isatty>:

int _isatty(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr

0800095a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800095a:	b480      	push	{r7}
 800095c:	b085      	sub	sp, #20
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
	...

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f002 fade 	bl	8002f64 <__errno>
 80009a8:	4603      	mov	r3, r0
 80009aa:	220c      	movs	r2, #12
 80009ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20005000 	.word	0x20005000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	200001c4 	.word	0x200001c4
 80009dc:	20000318 	.word	0x20000318

080009e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ec:	f7ff fff8 	bl	80009e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480b      	ldr	r0, [pc, #44]	@ (8000a20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009f2:	490c      	ldr	r1, [pc, #48]	@ (8000a24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a28 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a09      	ldr	r2, [pc, #36]	@ (8000a2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a08:	4c09      	ldr	r4, [pc, #36]	@ (8000a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a16:	f002 faab 	bl	8002f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1a:	f7ff fbd7 	bl	80001cc <main>
  bx lr
 8000a1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a28:	08003aec 	.word	0x08003aec
  ldr r2, =_sbss
 8000a2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a30:	20000318 	.word	0x20000318

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <HAL_Init+0x28>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	@ (8000a60 <HAL_Init+0x28>)
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f923 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fdb8 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40022000 	.word	0x40022000

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f93b 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f903 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000010 	.word	0x20000010
 8000ac0:	2000000c 	.word	0x2000000c

08000ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <HAL_IncTick+0x1c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <HAL_IncTick+0x20>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a03      	ldr	r2, [pc, #12]	@ (8000ae4 <HAL_IncTick+0x20>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000010 	.word	0x20000010
 8000ae4:	200001c8 	.word	0x200001c8

08000ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b02      	ldr	r3, [pc, #8]	@ (8000af8 <HAL_GetTick+0x10>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	200001c8 	.word	0x200001c8

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4906      	ldr	r1, [pc, #24]	@ (8000b94 <__NVIC_EnableIRQ+0x34>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff90 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff2d 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff42 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff90 	bl	8000bec <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5f 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff35 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa2 	bl	8000c50 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e043      	b.n	8000db6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <HAL_DMA_Init+0xa8>)
 8000d36:	4413      	add	r3, r2
 8000d38:	4a22      	ldr	r2, [pc, #136]	@ (8000dc4 <HAL_DMA_Init+0xac>)
 8000d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3e:	091b      	lsrs	r3, r3, #4
 8000d40:	009a      	lsls	r2, r3, #2
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc8 <HAL_DMA_Init+0xb0>)
 8000d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2202      	movs	r2, #2
 8000d50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000d62:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000d66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2201      	movs	r2, #1
 8000da8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	bffdfff8 	.word	0xbffdfff8
 8000dc4:	cccccccd 	.word	0xcccccccd
 8000dc8:	40020000 	.word	0x40020000

08000dcc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d101      	bne.n	8000dec <HAL_DMA_Start_IT+0x20>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e04b      	b.n	8000e84 <HAL_DMA_Start_IT+0xb8>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2201      	movs	r2, #1
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d13a      	bne.n	8000e76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2202      	movs	r2, #2
 8000e04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0201 	bic.w	r2, r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f000 f9af 	bl	8001188 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d008      	beq.n	8000e44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f042 020e 	orr.w	r2, r2, #14
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e00f      	b.n	8000e64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0204 	bic.w	r2, r2, #4
 8000e52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 020a 	orr.w	r2, r2, #10
 8000e62:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0201 	orr.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	e005      	b.n	8000e82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d005      	beq.n	8000eb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	e051      	b.n	8000f54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 020e 	bic.w	r2, r2, #14
 8000ebe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0201 	bic.w	r2, r2, #1
 8000ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a22      	ldr	r2, [pc, #136]	@ (8000f60 <HAL_DMA_Abort_IT+0xd4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d029      	beq.n	8000f2e <HAL_DMA_Abort_IT+0xa2>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a21      	ldr	r2, [pc, #132]	@ (8000f64 <HAL_DMA_Abort_IT+0xd8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d022      	beq.n	8000f2a <HAL_DMA_Abort_IT+0x9e>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f68 <HAL_DMA_Abort_IT+0xdc>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01a      	beq.n	8000f24 <HAL_DMA_Abort_IT+0x98>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f6c <HAL_DMA_Abort_IT+0xe0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d012      	beq.n	8000f1e <HAL_DMA_Abort_IT+0x92>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f70 <HAL_DMA_Abort_IT+0xe4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d00a      	beq.n	8000f18 <HAL_DMA_Abort_IT+0x8c>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a1b      	ldr	r2, [pc, #108]	@ (8000f74 <HAL_DMA_Abort_IT+0xe8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d102      	bne.n	8000f12 <HAL_DMA_Abort_IT+0x86>
 8000f0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f10:	e00e      	b.n	8000f30 <HAL_DMA_Abort_IT+0xa4>
 8000f12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f16:	e00b      	b.n	8000f30 <HAL_DMA_Abort_IT+0xa4>
 8000f18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f1c:	e008      	b.n	8000f30 <HAL_DMA_Abort_IT+0xa4>
 8000f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f22:	e005      	b.n	8000f30 <HAL_DMA_Abort_IT+0xa4>
 8000f24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f28:	e002      	b.n	8000f30 <HAL_DMA_Abort_IT+0xa4>
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	e000      	b.n	8000f30 <HAL_DMA_Abort_IT+0xa4>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4a11      	ldr	r2, [pc, #68]	@ (8000f78 <HAL_DMA_Abort_IT+0xec>)
 8000f32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	4798      	blx	r3
    } 
  }
  return status;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40020008 	.word	0x40020008
 8000f64:	4002001c 	.word	0x4002001c
 8000f68:	40020030 	.word	0x40020030
 8000f6c:	40020044 	.word	0x40020044
 8000f70:	40020058 	.word	0x40020058
 8000f74:	4002006c 	.word	0x4002006c
 8000f78:	40020000 	.word	0x40020000

08000f7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	2204      	movs	r2, #4
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d04f      	beq.n	8001044 <HAL_DMA_IRQHandler+0xc8>
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d04a      	beq.n	8001044 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0320 	and.w	r3, r3, #32
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d107      	bne.n	8000fcc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0204 	bic.w	r2, r2, #4
 8000fca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a66      	ldr	r2, [pc, #408]	@ (800116c <HAL_DMA_IRQHandler+0x1f0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d029      	beq.n	800102a <HAL_DMA_IRQHandler+0xae>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a65      	ldr	r2, [pc, #404]	@ (8001170 <HAL_DMA_IRQHandler+0x1f4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d022      	beq.n	8001026 <HAL_DMA_IRQHandler+0xaa>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a63      	ldr	r2, [pc, #396]	@ (8001174 <HAL_DMA_IRQHandler+0x1f8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d01a      	beq.n	8001020 <HAL_DMA_IRQHandler+0xa4>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a62      	ldr	r2, [pc, #392]	@ (8001178 <HAL_DMA_IRQHandler+0x1fc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d012      	beq.n	800101a <HAL_DMA_IRQHandler+0x9e>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a60      	ldr	r2, [pc, #384]	@ (800117c <HAL_DMA_IRQHandler+0x200>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00a      	beq.n	8001014 <HAL_DMA_IRQHandler+0x98>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a5f      	ldr	r2, [pc, #380]	@ (8001180 <HAL_DMA_IRQHandler+0x204>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d102      	bne.n	800100e <HAL_DMA_IRQHandler+0x92>
 8001008:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800100c:	e00e      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 800100e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001012:	e00b      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 8001014:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001018:	e008      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 800101a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800101e:	e005      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 8001020:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001024:	e002      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 8001026:	2340      	movs	r3, #64	@ 0x40
 8001028:	e000      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 800102a:	2304      	movs	r3, #4
 800102c:	4a55      	ldr	r2, [pc, #340]	@ (8001184 <HAL_DMA_IRQHandler+0x208>)
 800102e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 8094 	beq.w	8001162 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001042:	e08e      	b.n	8001162 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	2202      	movs	r2, #2
 800104a:	409a      	lsls	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d056      	beq.n	8001102 <HAL_DMA_IRQHandler+0x186>
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d051      	beq.n	8001102 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0320 	and.w	r3, r3, #32
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10b      	bne.n	8001084 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 020a 	bic.w	r2, r2, #10
 800107a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a38      	ldr	r2, [pc, #224]	@ (800116c <HAL_DMA_IRQHandler+0x1f0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d029      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x166>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a37      	ldr	r2, [pc, #220]	@ (8001170 <HAL_DMA_IRQHandler+0x1f4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d022      	beq.n	80010de <HAL_DMA_IRQHandler+0x162>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a35      	ldr	r2, [pc, #212]	@ (8001174 <HAL_DMA_IRQHandler+0x1f8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01a      	beq.n	80010d8 <HAL_DMA_IRQHandler+0x15c>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a34      	ldr	r2, [pc, #208]	@ (8001178 <HAL_DMA_IRQHandler+0x1fc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d012      	beq.n	80010d2 <HAL_DMA_IRQHandler+0x156>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a32      	ldr	r2, [pc, #200]	@ (800117c <HAL_DMA_IRQHandler+0x200>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00a      	beq.n	80010cc <HAL_DMA_IRQHandler+0x150>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a31      	ldr	r2, [pc, #196]	@ (8001180 <HAL_DMA_IRQHandler+0x204>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d102      	bne.n	80010c6 <HAL_DMA_IRQHandler+0x14a>
 80010c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80010c4:	e00e      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010ca:	e00b      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010d0:	e008      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d6:	e005      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010dc:	e002      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010de:	2320      	movs	r3, #32
 80010e0:	e000      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010e2:	2302      	movs	r3, #2
 80010e4:	4a27      	ldr	r2, [pc, #156]	@ (8001184 <HAL_DMA_IRQHandler+0x208>)
 80010e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d034      	beq.n	8001162 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001100:	e02f      	b.n	8001162 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	2208      	movs	r2, #8
 8001108:	409a      	lsls	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d028      	beq.n	8001164 <HAL_DMA_IRQHandler+0x1e8>
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d023      	beq.n	8001164 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 020e 	bic.w	r2, r2, #14
 800112a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001134:	2101      	movs	r1, #1
 8001136:	fa01 f202 	lsl.w	r2, r1, r2
 800113a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
    }
  }
  return;
 8001162:	bf00      	nop
 8001164:	bf00      	nop
}
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40020008 	.word	0x40020008
 8001170:	4002001c 	.word	0x4002001c
 8001174:	40020030 	.word	0x40020030
 8001178:	40020044 	.word	0x40020044
 800117c:	40020058 	.word	0x40020058
 8001180:	4002006c 	.word	0x4002006c
 8001184:	40020000 	.word	0x40020000

08001188 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b10      	cmp	r3, #16
 80011b4:	d108      	bne.n	80011c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011c6:	e007      	b.n	80011d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	60da      	str	r2, [r3, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b08b      	sub	sp, #44	@ 0x2c
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e169      	b.n	80014cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011f8:	2201      	movs	r2, #1
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8158 	bne.w	80014c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a9a      	ldr	r2, [pc, #616]	@ (8001484 <HAL_GPIO_Init+0x2a0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d05e      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001220:	4a98      	ldr	r2, [pc, #608]	@ (8001484 <HAL_GPIO_Init+0x2a0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d875      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001226:	4a98      	ldr	r2, [pc, #608]	@ (8001488 <HAL_GPIO_Init+0x2a4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d058      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 800122c:	4a96      	ldr	r2, [pc, #600]	@ (8001488 <HAL_GPIO_Init+0x2a4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d86f      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001232:	4a96      	ldr	r2, [pc, #600]	@ (800148c <HAL_GPIO_Init+0x2a8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d052      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001238:	4a94      	ldr	r2, [pc, #592]	@ (800148c <HAL_GPIO_Init+0x2a8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d869      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800123e:	4a94      	ldr	r2, [pc, #592]	@ (8001490 <HAL_GPIO_Init+0x2ac>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d04c      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001244:	4a92      	ldr	r2, [pc, #584]	@ (8001490 <HAL_GPIO_Init+0x2ac>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d863      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800124a:	4a92      	ldr	r2, [pc, #584]	@ (8001494 <HAL_GPIO_Init+0x2b0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d046      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001250:	4a90      	ldr	r2, [pc, #576]	@ (8001494 <HAL_GPIO_Init+0x2b0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d85d      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001256:	2b12      	cmp	r3, #18
 8001258:	d82a      	bhi.n	80012b0 <HAL_GPIO_Init+0xcc>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d859      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800125e:	a201      	add	r2, pc, #4	@ (adr r2, 8001264 <HAL_GPIO_Init+0x80>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	080012df 	.word	0x080012df
 8001268:	080012b9 	.word	0x080012b9
 800126c:	080012cb 	.word	0x080012cb
 8001270:	0800130d 	.word	0x0800130d
 8001274:	08001313 	.word	0x08001313
 8001278:	08001313 	.word	0x08001313
 800127c:	08001313 	.word	0x08001313
 8001280:	08001313 	.word	0x08001313
 8001284:	08001313 	.word	0x08001313
 8001288:	08001313 	.word	0x08001313
 800128c:	08001313 	.word	0x08001313
 8001290:	08001313 	.word	0x08001313
 8001294:	08001313 	.word	0x08001313
 8001298:	08001313 	.word	0x08001313
 800129c:	08001313 	.word	0x08001313
 80012a0:	08001313 	.word	0x08001313
 80012a4:	08001313 	.word	0x08001313
 80012a8:	080012c1 	.word	0x080012c1
 80012ac:	080012d5 	.word	0x080012d5
 80012b0:	4a79      	ldr	r2, [pc, #484]	@ (8001498 <HAL_GPIO_Init+0x2b4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012b6:	e02c      	b.n	8001312 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	623b      	str	r3, [r7, #32]
          break;
 80012be:	e029      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	3304      	adds	r3, #4
 80012c6:	623b      	str	r3, [r7, #32]
          break;
 80012c8:	e024      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	3308      	adds	r3, #8
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e01f      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	330c      	adds	r3, #12
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e01a      	b.n	8001314 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012e6:	2304      	movs	r3, #4
 80012e8:	623b      	str	r3, [r7, #32]
          break;
 80012ea:	e013      	b.n	8001314 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f4:	2308      	movs	r3, #8
 80012f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	611a      	str	r2, [r3, #16]
          break;
 80012fe:	e009      	b.n	8001314 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001300:	2308      	movs	r3, #8
 8001302:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	615a      	str	r2, [r3, #20]
          break;
 800130a:	e003      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x130>
          break;
 8001312:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2bff      	cmp	r3, #255	@ 0xff
 8001318:	d801      	bhi.n	800131e <HAL_GPIO_Init+0x13a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	e001      	b.n	8001322 <HAL_GPIO_Init+0x13e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3304      	adds	r3, #4
 8001322:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2bff      	cmp	r3, #255	@ 0xff
 8001328:	d802      	bhi.n	8001330 <HAL_GPIO_Init+0x14c>
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0x152>
 8001330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001332:	3b08      	subs	r3, #8
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	210f      	movs	r1, #15
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	401a      	ands	r2, r3
 8001348:	6a39      	ldr	r1, [r7, #32]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	431a      	orrs	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80b1 	beq.w	80014c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001364:	4b4d      	ldr	r3, [pc, #308]	@ (800149c <HAL_GPIO_Init+0x2b8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a4c      	ldr	r2, [pc, #304]	@ (800149c <HAL_GPIO_Init+0x2b8>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b4a      	ldr	r3, [pc, #296]	@ (800149c <HAL_GPIO_Init+0x2b8>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800137c:	4a48      	ldr	r2, [pc, #288]	@ (80014a0 <HAL_GPIO_Init+0x2bc>)
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a40      	ldr	r2, [pc, #256]	@ (80014a4 <HAL_GPIO_Init+0x2c0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d013      	beq.n	80013d0 <HAL_GPIO_Init+0x1ec>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a3f      	ldr	r2, [pc, #252]	@ (80014a8 <HAL_GPIO_Init+0x2c4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d00d      	beq.n	80013cc <HAL_GPIO_Init+0x1e8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a3e      	ldr	r2, [pc, #248]	@ (80014ac <HAL_GPIO_Init+0x2c8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_Init+0x1e4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a3d      	ldr	r2, [pc, #244]	@ (80014b0 <HAL_GPIO_Init+0x2cc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d101      	bne.n	80013c4 <HAL_GPIO_Init+0x1e0>
 80013c0:	2303      	movs	r3, #3
 80013c2:	e006      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013c4:	2304      	movs	r3, #4
 80013c6:	e004      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e002      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013d0:	2300      	movs	r3, #0
 80013d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d4:	f002 0203 	and.w	r2, r2, #3
 80013d8:	0092      	lsls	r2, r2, #2
 80013da:	4093      	lsls	r3, r2
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013e2:	492f      	ldr	r1, [pc, #188]	@ (80014a0 <HAL_GPIO_Init+0x2bc>)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013fc:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	492c      	ldr	r1, [pc, #176]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	608b      	str	r3, [r1, #8]
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800140a:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	43db      	mvns	r3, r3
 8001412:	4928      	ldr	r1, [pc, #160]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001414:	4013      	ands	r3, r2
 8001416:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001424:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	4922      	ldr	r1, [pc, #136]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	43db      	mvns	r3, r3
 800143a:	491e      	ldr	r1, [pc, #120]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 800143c:	4013      	ands	r3, r2
 800143e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	4918      	ldr	r1, [pc, #96]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	4914      	ldr	r1, [pc, #80]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001464:	4013      	ands	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d021      	beq.n	80014b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	490e      	ldr	r1, [pc, #56]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e021      	b.n	80014c6 <HAL_GPIO_Init+0x2e2>
 8001482:	bf00      	nop
 8001484:	10320000 	.word	0x10320000
 8001488:	10310000 	.word	0x10310000
 800148c:	10220000 	.word	0x10220000
 8001490:	10210000 	.word	0x10210000
 8001494:	10120000 	.word	0x10120000
 8001498:	10110000 	.word	0x10110000
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40011400 	.word	0x40011400
 80014b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	43db      	mvns	r3, r3
 80014c0:	4909      	ldr	r1, [pc, #36]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	3301      	adds	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f47f ae8e 	bne.w	80011f8 <HAL_GPIO_Init+0x14>
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	372c      	adds	r7, #44	@ 0x2c
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001508:	e003      	b.n	8001512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	041a      	lsls	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	611a      	str	r2, [r3, #16]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f806 	bl	800154c <HAL_GPIO_EXTI_Callback>
  }
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e272      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8087 	beq.w	800168e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001580:	4b92      	ldr	r3, [pc, #584]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b04      	cmp	r3, #4
 800158a:	d00c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800158c:	4b8f      	ldr	r3, [pc, #572]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d112      	bne.n	80015be <HAL_RCC_OscConfig+0x5e>
 8001598:	4b8c      	ldr	r3, [pc, #560]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a4:	d10b      	bne.n	80015be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	4b89      	ldr	r3, [pc, #548]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d06c      	beq.n	800168c <HAL_RCC_OscConfig+0x12c>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d168      	bne.n	800168c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e24c      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x76>
 80015c8:	4b80      	ldr	r3, [pc, #512]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a7f      	ldr	r2, [pc, #508]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e02e      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x98>
 80015de:	4b7b      	ldr	r3, [pc, #492]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7a      	ldr	r2, [pc, #488]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b78      	ldr	r3, [pc, #480]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a77      	ldr	r2, [pc, #476]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0xbc>
 8001602:	4b72      	ldr	r3, [pc, #456]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a71      	ldr	r2, [pc, #452]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b6f      	ldr	r3, [pc, #444]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6e      	ldr	r2, [pc, #440]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 800161c:	4b6b      	ldr	r3, [pc, #428]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a6a      	ldr	r2, [pc, #424]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b68      	ldr	r3, [pc, #416]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a67      	ldr	r2, [pc, #412]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fa54 	bl	8000ae8 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fa50 	bl	8000ae8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	@ 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e200      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b5d      	ldr	r3, [pc, #372]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xe4>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fa40 	bl	8000ae8 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fa3c 	bl	8000ae8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	@ 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1ec      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	4b53      	ldr	r3, [pc, #332]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x10c>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800169a:	4b4c      	ldr	r3, [pc, #304]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016a6:	4b49      	ldr	r3, [pc, #292]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11c      	bne.n	80016ec <HAL_RCC_OscConfig+0x18c>
 80016b2:	4b46      	ldr	r3, [pc, #280]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	4b43      	ldr	r3, [pc, #268]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x176>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1c0      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4939      	ldr	r1, [pc, #228]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e03a      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b36      	ldr	r3, [pc, #216]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff f9f5 	bl	8000ae8 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff f9f1 	bl	8000ae8 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1a1      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4927      	ldr	r1, [pc, #156]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b26      	ldr	r3, [pc, #152]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff f9d4 	bl	8000ae8 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff f9d0 	bl	8000ae8 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e180      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d03a      	beq.n	80017e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d019      	beq.n	80017aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff f9b4 	bl	8000ae8 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff f9b0 	bl	8000ae8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e160      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f000 face 	bl	8001d44 <RCC_Delay>
 80017a8:	e01c      	b.n	80017e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017aa:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff f99a 	bl	8000ae8 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b6:	e00f      	b.n	80017d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff f996 	bl	8000ae8 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d908      	bls.n	80017d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e146      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	42420000 	.word	0x42420000
 80017d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b92      	ldr	r3, [pc, #584]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1e9      	bne.n	80017b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a6 	beq.w	800193e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10d      	bne.n	800181e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b88      	ldr	r3, [pc, #544]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a87      	ldr	r2, [pc, #540]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b85      	ldr	r3, [pc, #532]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181a:	2301      	movs	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181e:	4b82      	ldr	r3, [pc, #520]	@ (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d118      	bne.n	800185c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001836:	f7ff f957 	bl	8000ae8 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183e:	f7ff f953 	bl	8000ae8 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b64      	cmp	r3, #100	@ 0x64
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e103      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	4b75      	ldr	r3, [pc, #468]	@ (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x312>
 8001864:	4b6f      	ldr	r3, [pc, #444]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a6e      	ldr	r2, [pc, #440]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	e02d      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x334>
 800187a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a69      	ldr	r2, [pc, #420]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	4b67      	ldr	r3, [pc, #412]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a66      	ldr	r2, [pc, #408]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	e01c      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b05      	cmp	r3, #5
 800189a:	d10c      	bne.n	80018b6 <HAL_RCC_OscConfig+0x356>
 800189c:	4b61      	ldr	r3, [pc, #388]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a60      	ldr	r2, [pc, #384]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	e00b      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 80018b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	4b58      	ldr	r3, [pc, #352]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a57      	ldr	r2, [pc, #348]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d015      	beq.n	8001902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7ff f907 	bl	8000ae8 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff f903 	bl	8000ae8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0b1      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ee      	beq.n	80018de <HAL_RCC_OscConfig+0x37e>
 8001900:	e014      	b.n	800192c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7ff f8f1 	bl	8000ae8 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff f8ed 	bl	8000ae8 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e09b      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001920:	4b40      	ldr	r3, [pc, #256]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ee      	bne.n	800190a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d105      	bne.n	800193e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b3c      	ldr	r3, [pc, #240]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a3b      	ldr	r2, [pc, #236]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800193c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8087 	beq.w	8001a56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001948:	4b36      	ldr	r3, [pc, #216]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d061      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d146      	bne.n	80019ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195c:	4b33      	ldr	r3, [pc, #204]	@ (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff f8c1 	bl	8000ae8 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff f8bd 	bl	8000ae8 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e06d      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197c:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001992:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	4921      	ldr	r1, [pc, #132]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a19      	ldr	r1, [r3, #32]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b4:	430b      	orrs	r3, r1
 80019b6:	491b      	ldr	r1, [pc, #108]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff f891 	bl	8000ae8 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff f88d 	bl	8000ae8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e03d      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x46a>
 80019e8:	e035      	b.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff f87a 	bl	8000ae8 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff f876 	bl	8000ae8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e026      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x498>
 8001a16:	e01e      	b.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e019      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_OscConfig+0x500>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0d0      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b6a      	ldr	r3, [pc, #424]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b67      	ldr	r3, [pc, #412]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	4965      	ldr	r1, [pc, #404]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b63      	ldr	r3, [pc, #396]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b8      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac0:	4b59      	ldr	r3, [pc, #356]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad8:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4a52      	ldr	r2, [pc, #328]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ae2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b50      	ldr	r3, [pc, #320]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	494d      	ldr	r1, [pc, #308]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d040      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b47      	ldr	r3, [pc, #284]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e073      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	4b3d      	ldr	r3, [pc, #244]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06b      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4936      	ldr	r1, [pc, #216]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b54:	f7fe ffc8 	bl	8000ae8 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7fe ffc4 	bl	8000ae8 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e053      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b84:	4b27      	ldr	r3, [pc, #156]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d210      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b24      	ldr	r3, [pc, #144]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	4922      	ldr	r1, [pc, #136]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e032      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4916      	ldr	r1, [pc, #88]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bde:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	490e      	ldr	r1, [pc, #56]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bf2:	f000 f821 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	490a      	ldr	r1, [pc, #40]	@ (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	5ccb      	ldrb	r3, [r1, r3]
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a09      	ldr	r2, [pc, #36]	@ (8001c30 <HAL_RCC_ClockConfig+0x1cc>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_RCC_ClockConfig+0x1d0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe ff26 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08003a84 	.word	0x08003a84
 8001c30:	20000008 	.word	0x20000008
 8001c34:	2000000c 	.word	0x2000000c

08001c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c52:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x30>
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x36>
 8001c66:	e027      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c6a:	613b      	str	r3, [r7, #16]
      break;
 8001c6c:	e027      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	0c9b      	lsrs	r3, r3, #18
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	4a17      	ldr	r2, [pc, #92]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d010      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0c5b      	lsrs	r3, r3, #17
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	4a11      	ldr	r2, [pc, #68]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c9a:	fb03 f202 	mul.w	r2, r3, r2
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e004      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a0c      	ldr	r2, [pc, #48]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	613b      	str	r3, [r7, #16]
      break;
 8001cb6:	e002      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cba:	613b      	str	r3, [r7, #16]
      break;
 8001cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cbe:	693b      	ldr	r3, [r7, #16]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	007a1200 	.word	0x007a1200
 8001cd4:	08003a9c 	.word	0x08003a9c
 8001cd8:	08003aac 	.word	0x08003aac
 8001cdc:	003d0900 	.word	0x003d0900

08001ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b02      	ldr	r3, [pc, #8]	@ (8001cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf8:	f7ff fff2 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4903      	ldr	r1, [pc, #12]	@ (8001d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08003a94 	.word	0x08003a94

08001d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d20:	f7ff ffde 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	0adb      	lsrs	r3, r3, #11
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	@ (8001d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08003a94 	.word	0x08003a94

08001d44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <RCC_Delay+0x34>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <RCC_Delay+0x38>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	0a5b      	lsrs	r3, r3, #9
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d60:	bf00      	nop
  }
  while (Delay --);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	60fa      	str	r2, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f9      	bne.n	8001d60 <RCC_Delay+0x1c>
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	10624dd3 	.word	0x10624dd3

08001d80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e076      	b.n	8001e80 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d108      	bne.n	8001dac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001da2:	d009      	beq.n	8001db8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
 8001daa:	e005      	b.n	8001db8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fc2a 	bl	800062c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3c:	ea42 0103 	orr.w	r1, r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	0c1a      	lsrs	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f002 0204 	and.w	r2, r2, #4
 8001e5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e9c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001eb0:	d106      	bne.n	8001ec0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d001      	beq.n	8001ec4 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e0cf      	b.n	8002064 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0c4      	b.n	8002064 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_SPI_TransmitReceive_DMA+0x60>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e0bd      	b.n	8002064 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d003      	beq.n	8001f04 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2205      	movs	r2, #5
 8001f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	887a      	ldrh	r2, [r7, #2]
 8001f1a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	887a      	ldrh	r2, [r7, #2]
 8001f26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d108      	bne.n	8001f58 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	4a48      	ldr	r2, [pc, #288]	@ (800206c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8001f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	4a47      	ldr	r2, [pc, #284]	@ (8002070 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8001f54:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f56:	e007      	b.n	8001f68 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5c:	4a45      	ldr	r2, [pc, #276]	@ (8002074 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f64:	4a44      	ldr	r2, [pc, #272]	@ (8002078 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8001f66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6c:	4a43      	ldr	r2, [pc, #268]	@ (800207c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8001f6e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f74:	2200      	movs	r2, #0
 8001f76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	330c      	adds	r3, #12
 8001f82:	4619      	mov	r1, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f88:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f8e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001f90:	f7fe ff1c 	bl	8000dcc <HAL_DMA_Start_IT>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9e:	f043 0210 	orr.w	r2, r3, #16
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e058      	b.n	8002064 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0201 	orr.w	r2, r2, #1
 8001fc0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fce:	2200      	movs	r2, #0
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fde:	2200      	movs	r2, #0
 8001fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4619      	mov	r1, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ff8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001ffa:	f7fe fee7 	bl	8000dcc <HAL_DMA_Start_IT>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002008:	f043 0210 	orr.w	r2, r3, #16
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e023      	b.n	8002064 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002026:	2b40      	cmp	r3, #64	@ 0x40
 8002028:	d007      	beq.n	800203a <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0220 	orr.w	r2, r2, #32
 8002050:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0202 	orr.w	r2, r2, #2
 8002060:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	080023a5 	.word	0x080023a5
 8002070:	08002271 	.word	0x08002271
 8002074:	080023c1 	.word	0x080023c1
 8002078:	08002317 	.word	0x08002317
 800207c:	080023dd 	.word	0x080023dd

08002080 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	099b      	lsrs	r3, r3, #6
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10f      	bne.n	80020c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	099b      	lsrs	r3, r3, #6
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
    return;
 80020c2:	e0be      	b.n	8002242 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_SPI_IRQHandler+0x66>
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	09db      	lsrs	r3, r3, #7
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d004      	beq.n	80020e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
    return;
 80020e4:	e0ad      	b.n	8002242 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_SPI_IRQHandler+0x80>
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80a1 	beq.w	8002242 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 809a 	beq.w	8002242 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	099b      	lsrs	r3, r3, #6
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d023      	beq.n	8002162 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b03      	cmp	r3, #3
 8002124:	d011      	beq.n	800214a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212a:	f043 0204 	orr.w	r2, r3, #4
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	e00b      	b.n	8002162 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]
        return;
 8002160:	e06f      	b.n	8002242 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d014      	beq.n	8002198 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219c:	2b00      	cmp	r3, #0
 800219e:	d04f      	beq.n	8002240 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80021ae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d104      	bne.n	80021cc <HAL_SPI_IRQHandler+0x14c>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d034      	beq.n	8002236 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0203 	bic.w	r2, r2, #3
 80021da:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d011      	beq.n	8002208 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e8:	4a17      	ldr	r2, [pc, #92]	@ (8002248 <HAL_SPI_IRQHandler+0x1c8>)
 80021ea:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fe4b 	bl	8000e8c <HAL_DMA_Abort_IT>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002200:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800220c:	2b00      	cmp	r3, #0
 800220e:	d016      	beq.n	800223e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002214:	4a0c      	ldr	r2, [pc, #48]	@ (8002248 <HAL_SPI_IRQHandler+0x1c8>)
 8002216:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fe35 	bl	8000e8c <HAL_DMA_Abort_IT>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002234:	e003      	b.n	800223e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe f99e 	bl	8000578 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800223c:	e000      	b.n	8002240 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800223e:	bf00      	nop
    return;
 8002240:	bf00      	nop
  }
}
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	0800241d 	.word	0x0800241d

0800224c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800227e:	f7fe fc33 	bl	8000ae8 <HAL_GetTick>
 8002282:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b20      	cmp	r3, #32
 8002290:	d03b      	beq.n	800230a <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0220 	bic.w	r2, r2, #32
 80022a0:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <SPI_DMAReceiveCplt+0x56>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022b2:	d108      	bne.n	80022c6 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0203 	bic.w	r2, r2, #3
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	e007      	b.n	80022d6 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	2164      	movs	r1, #100	@ 0x64
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f93a 	bl	8002554 <SPI_EndRxTransaction>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2220      	movs	r2, #32
 80022ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f7fe f938 	bl	8000578 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002308:	e002      	b.n	8002310 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7ff ff9e 	bl	800224c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002324:	f7fe fbe0 	bl	8000ae8 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b20      	cmp	r3, #32
 8002336:	d02f      	beq.n	8002398 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0220 	bic.w	r2, r2, #32
 8002346:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	2164      	movs	r1, #100	@ 0x64
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f953 	bl	80025f8 <SPI_EndRxTxTransaction>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	f043 0220 	orr.w	r2, r3, #32
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0203 	bic.w	r2, r2, #3
 8002372:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7fe f8f1 	bl	8000578 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002396:	e002      	b.n	800239e <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f7fe f8b7 	bl	800050c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f7ff ff53 	bl	800225e <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f7fe f8c8 	bl	8000564 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0203 	bic.w	r2, r2, #3
 80023f8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fe:	f043 0210 	orr.w	r2, r3, #16
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7fe f8b2 	bl	8000578 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7fe f89e 	bl	8000578 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002454:	f7fe fb48 	bl	8000ae8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	4413      	add	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002464:	f7fe fb40 	bl	8000ae8 <HAL_GetTick>
 8002468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800246a:	4b39      	ldr	r3, [pc, #228]	@ (8002550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	015b      	lsls	r3, r3, #5
 8002470:	0d1b      	lsrs	r3, r3, #20
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800247a:	e054      	b.n	8002526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002482:	d050      	beq.n	8002526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002484:	f7fe fb30 	bl	8000ae8 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	429a      	cmp	r2, r3
 8002492:	d902      	bls.n	800249a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d13d      	bne.n	8002516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024b2:	d111      	bne.n	80024d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024bc:	d004      	beq.n	80024c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024c6:	d107      	bne.n	80024d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024e0:	d10f      	bne.n	8002502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e017      	b.n	8002546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3b01      	subs	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4013      	ands	r3, r2
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	429a      	cmp	r2, r3
 8002542:	d19b      	bne.n	800247c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000008 	.word	0x20000008

08002554 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002568:	d111      	bne.n	800258e <SPI_EndRxTransaction+0x3a>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002572:	d004      	beq.n	800257e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800257c:	d107      	bne.n	800258e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800258c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002596:	d117      	bne.n	80025c8 <SPI_EndRxTransaction+0x74>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a0:	d112      	bne.n	80025c8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2200      	movs	r2, #0
 80025aa:	2101      	movs	r1, #1
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff ff49 	bl	8002444 <SPI_WaitFlagStateUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01a      	beq.n	80025ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e013      	b.n	80025f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	2180      	movs	r1, #128	@ 0x80
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f7ff ff36 	bl	8002444 <SPI_WaitFlagStateUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e2:	f043 0220 	orr.w	r2, r3, #32
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e000      	b.n	80025f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2201      	movs	r2, #1
 800260c:	2102      	movs	r1, #2
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff ff18 	bl	8002444 <SPI_WaitFlagStateUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	f043 0220 	orr.w	r2, r3, #32
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e013      	b.n	8002652 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2200      	movs	r2, #0
 8002632:	2180      	movs	r1, #128	@ 0x80
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f7ff ff05 	bl	8002444 <SPI_WaitFlagStateUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e000      	b.n	8002652 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e042      	b.n	80026f2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fe f87d 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2224      	movs	r2, #36	@ 0x24
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800269c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f972 	bl	8002988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b08a      	sub	sp, #40	@ 0x28
 80026fe:	af02      	add	r7, sp, #8
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	d175      	bne.n	8002806 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HAL_UART_Transmit+0x2c>
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06e      	b.n	8002808 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2221      	movs	r2, #33	@ 0x21
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002738:	f7fe f9d6 	bl	8000ae8 <HAL_GetTick>
 800273c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002752:	d108      	bne.n	8002766 <HAL_UART_Transmit+0x6c>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d104      	bne.n	8002766 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	e003      	b.n	800276e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800276e:	e02e      	b.n	80027ce <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2200      	movs	r2, #0
 8002778:	2180      	movs	r1, #128	@ 0x80
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f848 	bl	8002810 <UART_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e03a      	b.n	8002808 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	3302      	adds	r3, #2
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	e007      	b.n	80027c0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1cb      	bne.n	8002770 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2200      	movs	r2, #0
 80027e0:	2140      	movs	r1, #64	@ 0x40
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f814 	bl	8002810 <UART_WaitOnFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e006      	b.n	8002808 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002820:	e03b      	b.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d037      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282a:	f7fe f95d 	bl	8000ae8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	6a3a      	ldr	r2, [r7, #32]
 8002836:	429a      	cmp	r2, r3
 8002838:	d302      	bcc.n	8002840 <UART_WaitOnFlagUntilTimeout+0x30>
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e03a      	b.n	80028ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d023      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b80      	cmp	r3, #128	@ 0x80
 8002856:	d020      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b40      	cmp	r3, #64	@ 0x40
 800285c:	d01d      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b08      	cmp	r3, #8
 800286a:	d116      	bne.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f81d 	bl	80028c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2208      	movs	r2, #8
 800288c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e00f      	b.n	80028ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4013      	ands	r3, r2
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d0b4      	beq.n	8002822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b095      	sub	sp, #84	@ 0x54
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d4:	e853 3f00 	ldrex	r3, [r3]
 80028d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80028ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028f2:	e841 2300 	strex	r3, r2, [r1]
 80028f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1e5      	bne.n	80028ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	61fb      	str	r3, [r7, #28]
   return(result);
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3314      	adds	r3, #20
 800291c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800291e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e5      	bne.n	80028fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	2b01      	cmp	r3, #1
 8002938:	d119      	bne.n	800296e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	60bb      	str	r3, [r7, #8]
   return(result);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f023 0310 	bic.w	r3, r3, #16
 8002950:	647b      	str	r3, [r7, #68]	@ 0x44
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	330c      	adds	r3, #12
 8002958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800295a:	61ba      	str	r2, [r7, #24]
 800295c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	6979      	ldr	r1, [r7, #20]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	613b      	str	r3, [r7, #16]
   return(result);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e5      	bne.n	800293a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800297c:	bf00      	nop
 800297e:	3754      	adds	r7, #84	@ 0x54
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
	...

08002988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80029c2:	f023 030c 	bic.w	r3, r3, #12
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2c      	ldr	r2, [pc, #176]	@ (8002a9c <UART_SetConfig+0x114>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d103      	bne.n	80029f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029f0:	f7ff f994 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	e002      	b.n	80029fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029f8:	f7ff f97c 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 80029fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	009a      	lsls	r2, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a14:	4a22      	ldr	r2, [pc, #136]	@ (8002aa0 <UART_SetConfig+0x118>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	0119      	lsls	r1, r3, #4
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	009a      	lsls	r2, r3, #2
 8002a28:	441a      	add	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a34:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa0 <UART_SetConfig+0x118>)
 8002a36:	fba3 0302 	umull	r0, r3, r3, r2
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2064      	movs	r0, #100	@ 0x64
 8002a3e:	fb00 f303 	mul.w	r3, r0, r3
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	3332      	adds	r3, #50	@ 0x32
 8002a48:	4a15      	ldr	r2, [pc, #84]	@ (8002aa0 <UART_SetConfig+0x118>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a54:	4419      	add	r1, r3
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009a      	lsls	r2, r3, #2
 8002a60:	441a      	add	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <UART_SetConfig+0x118>)
 8002a6e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2064      	movs	r0, #100	@ 0x64
 8002a76:	fb00 f303 	mul.w	r3, r0, r3
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	3332      	adds	r3, #50	@ 0x32
 8002a80:	4a07      	ldr	r2, [pc, #28]	@ (8002aa0 <UART_SetConfig+0x118>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	f003 020f 	and.w	r2, r3, #15
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	440a      	add	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40013800 	.word	0x40013800
 8002aa0:	51eb851f 	.word	0x51eb851f

08002aa4 <std>:
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8002aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ab2:	6083      	str	r3, [r0, #8]
 8002ab4:	8181      	strh	r1, [r0, #12]
 8002ab6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ab8:	81c2      	strh	r2, [r0, #14]
 8002aba:	6183      	str	r3, [r0, #24]
 8002abc:	4619      	mov	r1, r3
 8002abe:	2208      	movs	r2, #8
 8002ac0:	305c      	adds	r0, #92	@ 0x5c
 8002ac2:	f000 fa01 	bl	8002ec8 <memset>
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <std+0x58>)
 8002ac8:	6224      	str	r4, [r4, #32]
 8002aca:	6263      	str	r3, [r4, #36]	@ 0x24
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <std+0x5c>)
 8002ace:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b04 <std+0x60>)
 8002ad2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <std+0x64>)
 8002ad6:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <std+0x68>)
 8002ada:	429c      	cmp	r4, r3
 8002adc:	d006      	beq.n	8002aec <std+0x48>
 8002ade:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002ae2:	4294      	cmp	r4, r2
 8002ae4:	d002      	beq.n	8002aec <std+0x48>
 8002ae6:	33d0      	adds	r3, #208	@ 0xd0
 8002ae8:	429c      	cmp	r4, r3
 8002aea:	d105      	bne.n	8002af8 <std+0x54>
 8002aec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002af4:	f000 ba60 	b.w	8002fb8 <__retarget_lock_init_recursive>
 8002af8:	bd10      	pop	{r4, pc}
 8002afa:	bf00      	nop
 8002afc:	08002d19 	.word	0x08002d19
 8002b00:	08002d3b 	.word	0x08002d3b
 8002b04:	08002d73 	.word	0x08002d73
 8002b08:	08002d97 	.word	0x08002d97
 8002b0c:	200001cc 	.word	0x200001cc

08002b10 <stdio_exit_handler>:
 8002b10:	4a02      	ldr	r2, [pc, #8]	@ (8002b1c <stdio_exit_handler+0xc>)
 8002b12:	4903      	ldr	r1, [pc, #12]	@ (8002b20 <stdio_exit_handler+0x10>)
 8002b14:	4803      	ldr	r0, [pc, #12]	@ (8002b24 <stdio_exit_handler+0x14>)
 8002b16:	f000 b869 	b.w	8002bec <_fwalk_sglue>
 8002b1a:	bf00      	nop
 8002b1c:	20000014 	.word	0x20000014
 8002b20:	0800384d 	.word	0x0800384d
 8002b24:	20000024 	.word	0x20000024

08002b28 <cleanup_stdio>:
 8002b28:	6841      	ldr	r1, [r0, #4]
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <cleanup_stdio+0x34>)
 8002b2c:	b510      	push	{r4, lr}
 8002b2e:	4299      	cmp	r1, r3
 8002b30:	4604      	mov	r4, r0
 8002b32:	d001      	beq.n	8002b38 <cleanup_stdio+0x10>
 8002b34:	f000 fe8a 	bl	800384c <_fflush_r>
 8002b38:	68a1      	ldr	r1, [r4, #8]
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <cleanup_stdio+0x38>)
 8002b3c:	4299      	cmp	r1, r3
 8002b3e:	d002      	beq.n	8002b46 <cleanup_stdio+0x1e>
 8002b40:	4620      	mov	r0, r4
 8002b42:	f000 fe83 	bl	800384c <_fflush_r>
 8002b46:	68e1      	ldr	r1, [r4, #12]
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <cleanup_stdio+0x3c>)
 8002b4a:	4299      	cmp	r1, r3
 8002b4c:	d004      	beq.n	8002b58 <cleanup_stdio+0x30>
 8002b4e:	4620      	mov	r0, r4
 8002b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b54:	f000 be7a 	b.w	800384c <_fflush_r>
 8002b58:	bd10      	pop	{r4, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200001cc 	.word	0x200001cc
 8002b60:	20000234 	.word	0x20000234
 8002b64:	2000029c 	.word	0x2000029c

08002b68 <global_stdio_init.part.0>:
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <global_stdio_init.part.0+0x30>)
 8002b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8002b9c <global_stdio_init.part.0+0x34>)
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba0 <global_stdio_init.part.0+0x38>)
 8002b70:	4620      	mov	r0, r4
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	2104      	movs	r1, #4
 8002b76:	2200      	movs	r2, #0
 8002b78:	f7ff ff94 	bl	8002aa4 <std>
 8002b7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002b80:	2201      	movs	r2, #1
 8002b82:	2109      	movs	r1, #9
 8002b84:	f7ff ff8e 	bl	8002aa4 <std>
 8002b88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b92:	2112      	movs	r1, #18
 8002b94:	f7ff bf86 	b.w	8002aa4 <std>
 8002b98:	20000304 	.word	0x20000304
 8002b9c:	200001cc 	.word	0x200001cc
 8002ba0:	08002b11 	.word	0x08002b11

08002ba4 <__sfp_lock_acquire>:
 8002ba4:	4801      	ldr	r0, [pc, #4]	@ (8002bac <__sfp_lock_acquire+0x8>)
 8002ba6:	f000 ba08 	b.w	8002fba <__retarget_lock_acquire_recursive>
 8002baa:	bf00      	nop
 8002bac:	2000030d 	.word	0x2000030d

08002bb0 <__sfp_lock_release>:
 8002bb0:	4801      	ldr	r0, [pc, #4]	@ (8002bb8 <__sfp_lock_release+0x8>)
 8002bb2:	f000 ba03 	b.w	8002fbc <__retarget_lock_release_recursive>
 8002bb6:	bf00      	nop
 8002bb8:	2000030d 	.word	0x2000030d

08002bbc <__sinit>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	f7ff fff0 	bl	8002ba4 <__sfp_lock_acquire>
 8002bc4:	6a23      	ldr	r3, [r4, #32]
 8002bc6:	b11b      	cbz	r3, 8002bd0 <__sinit+0x14>
 8002bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bcc:	f7ff bff0 	b.w	8002bb0 <__sfp_lock_release>
 8002bd0:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <__sinit+0x28>)
 8002bd2:	6223      	str	r3, [r4, #32]
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <__sinit+0x2c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f5      	bne.n	8002bc8 <__sinit+0xc>
 8002bdc:	f7ff ffc4 	bl	8002b68 <global_stdio_init.part.0>
 8002be0:	e7f2      	b.n	8002bc8 <__sinit+0xc>
 8002be2:	bf00      	nop
 8002be4:	08002b29 	.word	0x08002b29
 8002be8:	20000304 	.word	0x20000304

08002bec <_fwalk_sglue>:
 8002bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bf0:	4607      	mov	r7, r0
 8002bf2:	4688      	mov	r8, r1
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bfc:	f1b9 0901 	subs.w	r9, r9, #1
 8002c00:	d505      	bpl.n	8002c0e <_fwalk_sglue+0x22>
 8002c02:	6824      	ldr	r4, [r4, #0]
 8002c04:	2c00      	cmp	r4, #0
 8002c06:	d1f7      	bne.n	8002bf8 <_fwalk_sglue+0xc>
 8002c08:	4630      	mov	r0, r6
 8002c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c0e:	89ab      	ldrh	r3, [r5, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d907      	bls.n	8002c24 <_fwalk_sglue+0x38>
 8002c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	d003      	beq.n	8002c24 <_fwalk_sglue+0x38>
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	4638      	mov	r0, r7
 8002c20:	47c0      	blx	r8
 8002c22:	4306      	orrs	r6, r0
 8002c24:	3568      	adds	r5, #104	@ 0x68
 8002c26:	e7e9      	b.n	8002bfc <_fwalk_sglue+0x10>

08002c28 <iprintf>:
 8002c28:	b40f      	push	{r0, r1, r2, r3}
 8002c2a:	b507      	push	{r0, r1, r2, lr}
 8002c2c:	4906      	ldr	r1, [pc, #24]	@ (8002c48 <iprintf+0x20>)
 8002c2e:	ab04      	add	r3, sp, #16
 8002c30:	6808      	ldr	r0, [r1, #0]
 8002c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c36:	6881      	ldr	r1, [r0, #8]
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	f000 fadf 	bl	80031fc <_vfiprintf_r>
 8002c3e:	b003      	add	sp, #12
 8002c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c44:	b004      	add	sp, #16
 8002c46:	4770      	bx	lr
 8002c48:	20000020 	.word	0x20000020

08002c4c <putchar>:
 8002c4c:	4b02      	ldr	r3, [pc, #8]	@ (8002c58 <putchar+0xc>)
 8002c4e:	4601      	mov	r1, r0
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	6882      	ldr	r2, [r0, #8]
 8002c54:	f000 be83 	b.w	800395e <_putc_r>
 8002c58:	20000020 	.word	0x20000020

08002c5c <_puts_r>:
 8002c5c:	6a03      	ldr	r3, [r0, #32]
 8002c5e:	b570      	push	{r4, r5, r6, lr}
 8002c60:	4605      	mov	r5, r0
 8002c62:	460e      	mov	r6, r1
 8002c64:	6884      	ldr	r4, [r0, #8]
 8002c66:	b90b      	cbnz	r3, 8002c6c <_puts_r+0x10>
 8002c68:	f7ff ffa8 	bl	8002bbc <__sinit>
 8002c6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c6e:	07db      	lsls	r3, r3, #31
 8002c70:	d405      	bmi.n	8002c7e <_puts_r+0x22>
 8002c72:	89a3      	ldrh	r3, [r4, #12]
 8002c74:	0598      	lsls	r0, r3, #22
 8002c76:	d402      	bmi.n	8002c7e <_puts_r+0x22>
 8002c78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c7a:	f000 f99e 	bl	8002fba <__retarget_lock_acquire_recursive>
 8002c7e:	89a3      	ldrh	r3, [r4, #12]
 8002c80:	0719      	lsls	r1, r3, #28
 8002c82:	d502      	bpl.n	8002c8a <_puts_r+0x2e>
 8002c84:	6923      	ldr	r3, [r4, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d135      	bne.n	8002cf6 <_puts_r+0x9a>
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f000 f8c5 	bl	8002e1c <__swsetup_r>
 8002c92:	b380      	cbz	r0, 8002cf6 <_puts_r+0x9a>
 8002c94:	f04f 35ff 	mov.w	r5, #4294967295
 8002c98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c9a:	07da      	lsls	r2, r3, #31
 8002c9c:	d405      	bmi.n	8002caa <_puts_r+0x4e>
 8002c9e:	89a3      	ldrh	r3, [r4, #12]
 8002ca0:	059b      	lsls	r3, r3, #22
 8002ca2:	d402      	bmi.n	8002caa <_puts_r+0x4e>
 8002ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ca6:	f000 f989 	bl	8002fbc <__retarget_lock_release_recursive>
 8002caa:	4628      	mov	r0, r5
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	da04      	bge.n	8002cbc <_puts_r+0x60>
 8002cb2:	69a2      	ldr	r2, [r4, #24]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	dc17      	bgt.n	8002ce8 <_puts_r+0x8c>
 8002cb8:	290a      	cmp	r1, #10
 8002cba:	d015      	beq.n	8002ce8 <_puts_r+0x8c>
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	6022      	str	r2, [r4, #0]
 8002cc2:	7019      	strb	r1, [r3, #0]
 8002cc4:	68a3      	ldr	r3, [r4, #8]
 8002cc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	60a3      	str	r3, [r4, #8]
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d1ed      	bne.n	8002cae <_puts_r+0x52>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	da11      	bge.n	8002cfa <_puts_r+0x9e>
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	210a      	movs	r1, #10
 8002cda:	4628      	mov	r0, r5
 8002cdc:	f000 f85f 	bl	8002d9e <__swbuf_r>
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d0d7      	beq.n	8002c94 <_puts_r+0x38>
 8002ce4:	250a      	movs	r5, #10
 8002ce6:	e7d7      	b.n	8002c98 <_puts_r+0x3c>
 8002ce8:	4622      	mov	r2, r4
 8002cea:	4628      	mov	r0, r5
 8002cec:	f000 f857 	bl	8002d9e <__swbuf_r>
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d1e7      	bne.n	8002cc4 <_puts_r+0x68>
 8002cf4:	e7ce      	b.n	8002c94 <_puts_r+0x38>
 8002cf6:	3e01      	subs	r6, #1
 8002cf8:	e7e4      	b.n	8002cc4 <_puts_r+0x68>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	6022      	str	r2, [r4, #0]
 8002d00:	220a      	movs	r2, #10
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e7ee      	b.n	8002ce4 <_puts_r+0x88>
	...

08002d08 <puts>:
 8002d08:	4b02      	ldr	r3, [pc, #8]	@ (8002d14 <puts+0xc>)
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	f7ff bfa5 	b.w	8002c5c <_puts_r>
 8002d12:	bf00      	nop
 8002d14:	20000020 	.word	0x20000020

08002d18 <__sread>:
 8002d18:	b510      	push	{r4, lr}
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d20:	f000 f8fc 	bl	8002f1c <_read_r>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	bfab      	itete	ge
 8002d28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8002d2c:	181b      	addge	r3, r3, r0
 8002d2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002d32:	bfac      	ite	ge
 8002d34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d36:	81a3      	strhlt	r3, [r4, #12]
 8002d38:	bd10      	pop	{r4, pc}

08002d3a <__swrite>:
 8002d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d3e:	461f      	mov	r7, r3
 8002d40:	898b      	ldrh	r3, [r1, #12]
 8002d42:	4605      	mov	r5, r0
 8002d44:	05db      	lsls	r3, r3, #23
 8002d46:	460c      	mov	r4, r1
 8002d48:	4616      	mov	r6, r2
 8002d4a:	d505      	bpl.n	8002d58 <__swrite+0x1e>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d54:	f000 f8d0 	bl	8002ef8 <_lseek_r>
 8002d58:	89a3      	ldrh	r3, [r4, #12]
 8002d5a:	4632      	mov	r2, r6
 8002d5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d60:	81a3      	strh	r3, [r4, #12]
 8002d62:	4628      	mov	r0, r5
 8002d64:	463b      	mov	r3, r7
 8002d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6e:	f000 b8e7 	b.w	8002f40 <_write_r>

08002d72 <__sseek>:
 8002d72:	b510      	push	{r4, lr}
 8002d74:	460c      	mov	r4, r1
 8002d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d7a:	f000 f8bd 	bl	8002ef8 <_lseek_r>
 8002d7e:	1c43      	adds	r3, r0, #1
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	bf15      	itete	ne
 8002d84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002d8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002d8e:	81a3      	strheq	r3, [r4, #12]
 8002d90:	bf18      	it	ne
 8002d92:	81a3      	strhne	r3, [r4, #12]
 8002d94:	bd10      	pop	{r4, pc}

08002d96 <__sclose>:
 8002d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d9a:	f000 b89d 	b.w	8002ed8 <_close_r>

08002d9e <__swbuf_r>:
 8002d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da0:	460e      	mov	r6, r1
 8002da2:	4614      	mov	r4, r2
 8002da4:	4605      	mov	r5, r0
 8002da6:	b118      	cbz	r0, 8002db0 <__swbuf_r+0x12>
 8002da8:	6a03      	ldr	r3, [r0, #32]
 8002daa:	b90b      	cbnz	r3, 8002db0 <__swbuf_r+0x12>
 8002dac:	f7ff ff06 	bl	8002bbc <__sinit>
 8002db0:	69a3      	ldr	r3, [r4, #24]
 8002db2:	60a3      	str	r3, [r4, #8]
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	071a      	lsls	r2, r3, #28
 8002db8:	d501      	bpl.n	8002dbe <__swbuf_r+0x20>
 8002dba:	6923      	ldr	r3, [r4, #16]
 8002dbc:	b943      	cbnz	r3, 8002dd0 <__swbuf_r+0x32>
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f000 f82b 	bl	8002e1c <__swsetup_r>
 8002dc6:	b118      	cbz	r0, 8002dd0 <__swbuf_r+0x32>
 8002dc8:	f04f 37ff 	mov.w	r7, #4294967295
 8002dcc:	4638      	mov	r0, r7
 8002dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	6922      	ldr	r2, [r4, #16]
 8002dd4:	b2f6      	uxtb	r6, r6
 8002dd6:	1a98      	subs	r0, r3, r2
 8002dd8:	6963      	ldr	r3, [r4, #20]
 8002dda:	4637      	mov	r7, r6
 8002ddc:	4283      	cmp	r3, r0
 8002dde:	dc05      	bgt.n	8002dec <__swbuf_r+0x4e>
 8002de0:	4621      	mov	r1, r4
 8002de2:	4628      	mov	r0, r5
 8002de4:	f000 fd32 	bl	800384c <_fflush_r>
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d1ed      	bne.n	8002dc8 <__swbuf_r+0x2a>
 8002dec:	68a3      	ldr	r3, [r4, #8]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	60a3      	str	r3, [r4, #8]
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	6022      	str	r2, [r4, #0]
 8002df8:	701e      	strb	r6, [r3, #0]
 8002dfa:	6962      	ldr	r2, [r4, #20]
 8002dfc:	1c43      	adds	r3, r0, #1
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d004      	beq.n	8002e0c <__swbuf_r+0x6e>
 8002e02:	89a3      	ldrh	r3, [r4, #12]
 8002e04:	07db      	lsls	r3, r3, #31
 8002e06:	d5e1      	bpl.n	8002dcc <__swbuf_r+0x2e>
 8002e08:	2e0a      	cmp	r6, #10
 8002e0a:	d1df      	bne.n	8002dcc <__swbuf_r+0x2e>
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f000 fd1c 	bl	800384c <_fflush_r>
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d0d9      	beq.n	8002dcc <__swbuf_r+0x2e>
 8002e18:	e7d6      	b.n	8002dc8 <__swbuf_r+0x2a>
	...

08002e1c <__swsetup_r>:
 8002e1c:	b538      	push	{r3, r4, r5, lr}
 8002e1e:	4b29      	ldr	r3, [pc, #164]	@ (8002ec4 <__swsetup_r+0xa8>)
 8002e20:	4605      	mov	r5, r0
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	460c      	mov	r4, r1
 8002e26:	b118      	cbz	r0, 8002e30 <__swsetup_r+0x14>
 8002e28:	6a03      	ldr	r3, [r0, #32]
 8002e2a:	b90b      	cbnz	r3, 8002e30 <__swsetup_r+0x14>
 8002e2c:	f7ff fec6 	bl	8002bbc <__sinit>
 8002e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e34:	0719      	lsls	r1, r3, #28
 8002e36:	d422      	bmi.n	8002e7e <__swsetup_r+0x62>
 8002e38:	06da      	lsls	r2, r3, #27
 8002e3a:	d407      	bmi.n	8002e4c <__swsetup_r+0x30>
 8002e3c:	2209      	movs	r2, #9
 8002e3e:	602a      	str	r2, [r5, #0]
 8002e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	81a3      	strh	r3, [r4, #12]
 8002e4a:	e033      	b.n	8002eb4 <__swsetup_r+0x98>
 8002e4c:	0758      	lsls	r0, r3, #29
 8002e4e:	d512      	bpl.n	8002e76 <__swsetup_r+0x5a>
 8002e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e52:	b141      	cbz	r1, 8002e66 <__swsetup_r+0x4a>
 8002e54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e58:	4299      	cmp	r1, r3
 8002e5a:	d002      	beq.n	8002e62 <__swsetup_r+0x46>
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	f000 f8af 	bl	8002fc0 <_free_r>
 8002e62:	2300      	movs	r3, #0
 8002e64:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e66:	89a3      	ldrh	r3, [r4, #12]
 8002e68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002e6c:	81a3      	strh	r3, [r4, #12]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	6063      	str	r3, [r4, #4]
 8002e72:	6923      	ldr	r3, [r4, #16]
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	89a3      	ldrh	r3, [r4, #12]
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	81a3      	strh	r3, [r4, #12]
 8002e7e:	6923      	ldr	r3, [r4, #16]
 8002e80:	b94b      	cbnz	r3, 8002e96 <__swsetup_r+0x7a>
 8002e82:	89a3      	ldrh	r3, [r4, #12]
 8002e84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e8c:	d003      	beq.n	8002e96 <__swsetup_r+0x7a>
 8002e8e:	4621      	mov	r1, r4
 8002e90:	4628      	mov	r0, r5
 8002e92:	f000 fd28 	bl	80038e6 <__smakebuf_r>
 8002e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e9a:	f013 0201 	ands.w	r2, r3, #1
 8002e9e:	d00a      	beq.n	8002eb6 <__swsetup_r+0x9a>
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60a2      	str	r2, [r4, #8]
 8002ea4:	6962      	ldr	r2, [r4, #20]
 8002ea6:	4252      	negs	r2, r2
 8002ea8:	61a2      	str	r2, [r4, #24]
 8002eaa:	6922      	ldr	r2, [r4, #16]
 8002eac:	b942      	cbnz	r2, 8002ec0 <__swsetup_r+0xa4>
 8002eae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002eb2:	d1c5      	bne.n	8002e40 <__swsetup_r+0x24>
 8002eb4:	bd38      	pop	{r3, r4, r5, pc}
 8002eb6:	0799      	lsls	r1, r3, #30
 8002eb8:	bf58      	it	pl
 8002eba:	6962      	ldrpl	r2, [r4, #20]
 8002ebc:	60a2      	str	r2, [r4, #8]
 8002ebe:	e7f4      	b.n	8002eaa <__swsetup_r+0x8e>
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	e7f7      	b.n	8002eb4 <__swsetup_r+0x98>
 8002ec4:	20000020 	.word	0x20000020

08002ec8 <memset>:
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4402      	add	r2, r0
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d100      	bne.n	8002ed2 <memset+0xa>
 8002ed0:	4770      	bx	lr
 8002ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed6:	e7f9      	b.n	8002ecc <memset+0x4>

08002ed8 <_close_r>:
 8002ed8:	b538      	push	{r3, r4, r5, lr}
 8002eda:	2300      	movs	r3, #0
 8002edc:	4d05      	ldr	r5, [pc, #20]	@ (8002ef4 <_close_r+0x1c>)
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	602b      	str	r3, [r5, #0]
 8002ee4:	f7fd fd15 	bl	8000912 <_close>
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	d102      	bne.n	8002ef2 <_close_r+0x1a>
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	b103      	cbz	r3, 8002ef2 <_close_r+0x1a>
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
 8002ef4:	20000308 	.word	0x20000308

08002ef8 <_lseek_r>:
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	4604      	mov	r4, r0
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	2200      	movs	r2, #0
 8002f02:	4d05      	ldr	r5, [pc, #20]	@ (8002f18 <_lseek_r+0x20>)
 8002f04:	602a      	str	r2, [r5, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f7fd fd27 	bl	800095a <_lseek>
 8002f0c:	1c43      	adds	r3, r0, #1
 8002f0e:	d102      	bne.n	8002f16 <_lseek_r+0x1e>
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	b103      	cbz	r3, 8002f16 <_lseek_r+0x1e>
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	bd38      	pop	{r3, r4, r5, pc}
 8002f18:	20000308 	.word	0x20000308

08002f1c <_read_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4604      	mov	r4, r0
 8002f20:	4608      	mov	r0, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	2200      	movs	r2, #0
 8002f26:	4d05      	ldr	r5, [pc, #20]	@ (8002f3c <_read_r+0x20>)
 8002f28:	602a      	str	r2, [r5, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f7fd fcb8 	bl	80008a0 <_read>
 8002f30:	1c43      	adds	r3, r0, #1
 8002f32:	d102      	bne.n	8002f3a <_read_r+0x1e>
 8002f34:	682b      	ldr	r3, [r5, #0]
 8002f36:	b103      	cbz	r3, 8002f3a <_read_r+0x1e>
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
 8002f3c:	20000308 	.word	0x20000308

08002f40 <_write_r>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4604      	mov	r4, r0
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	2200      	movs	r2, #0
 8002f4a:	4d05      	ldr	r5, [pc, #20]	@ (8002f60 <_write_r+0x20>)
 8002f4c:	602a      	str	r2, [r5, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f7fd fcc3 	bl	80008da <_write>
 8002f54:	1c43      	adds	r3, r0, #1
 8002f56:	d102      	bne.n	8002f5e <_write_r+0x1e>
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	b103      	cbz	r3, 8002f5e <_write_r+0x1e>
 8002f5c:	6023      	str	r3, [r4, #0]
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
 8002f60:	20000308 	.word	0x20000308

08002f64 <__errno>:
 8002f64:	4b01      	ldr	r3, [pc, #4]	@ (8002f6c <__errno+0x8>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000020 	.word	0x20000020

08002f70 <__libc_init_array>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	2600      	movs	r6, #0
 8002f74:	4d0c      	ldr	r5, [pc, #48]	@ (8002fa8 <__libc_init_array+0x38>)
 8002f76:	4c0d      	ldr	r4, [pc, #52]	@ (8002fac <__libc_init_array+0x3c>)
 8002f78:	1b64      	subs	r4, r4, r5
 8002f7a:	10a4      	asrs	r4, r4, #2
 8002f7c:	42a6      	cmp	r6, r4
 8002f7e:	d109      	bne.n	8002f94 <__libc_init_array+0x24>
 8002f80:	f000 fd62 	bl	8003a48 <_init>
 8002f84:	2600      	movs	r6, #0
 8002f86:	4d0a      	ldr	r5, [pc, #40]	@ (8002fb0 <__libc_init_array+0x40>)
 8002f88:	4c0a      	ldr	r4, [pc, #40]	@ (8002fb4 <__libc_init_array+0x44>)
 8002f8a:	1b64      	subs	r4, r4, r5
 8002f8c:	10a4      	asrs	r4, r4, #2
 8002f8e:	42a6      	cmp	r6, r4
 8002f90:	d105      	bne.n	8002f9e <__libc_init_array+0x2e>
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f98:	4798      	blx	r3
 8002f9a:	3601      	adds	r6, #1
 8002f9c:	e7ee      	b.n	8002f7c <__libc_init_array+0xc>
 8002f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa2:	4798      	blx	r3
 8002fa4:	3601      	adds	r6, #1
 8002fa6:	e7f2      	b.n	8002f8e <__libc_init_array+0x1e>
 8002fa8:	08003ae4 	.word	0x08003ae4
 8002fac:	08003ae4 	.word	0x08003ae4
 8002fb0:	08003ae4 	.word	0x08003ae4
 8002fb4:	08003ae8 	.word	0x08003ae8

08002fb8 <__retarget_lock_init_recursive>:
 8002fb8:	4770      	bx	lr

08002fba <__retarget_lock_acquire_recursive>:
 8002fba:	4770      	bx	lr

08002fbc <__retarget_lock_release_recursive>:
 8002fbc:	4770      	bx	lr
	...

08002fc0 <_free_r>:
 8002fc0:	b538      	push	{r3, r4, r5, lr}
 8002fc2:	4605      	mov	r5, r0
 8002fc4:	2900      	cmp	r1, #0
 8002fc6:	d040      	beq.n	800304a <_free_r+0x8a>
 8002fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fcc:	1f0c      	subs	r4, r1, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bfb8      	it	lt
 8002fd2:	18e4      	addlt	r4, r4, r3
 8002fd4:	f000 f8de 	bl	8003194 <__malloc_lock>
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800304c <_free_r+0x8c>)
 8002fda:	6813      	ldr	r3, [r2, #0]
 8002fdc:	b933      	cbnz	r3, 8002fec <_free_r+0x2c>
 8002fde:	6063      	str	r3, [r4, #4]
 8002fe0:	6014      	str	r4, [r2, #0]
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fe8:	f000 b8da 	b.w	80031a0 <__malloc_unlock>
 8002fec:	42a3      	cmp	r3, r4
 8002fee:	d908      	bls.n	8003002 <_free_r+0x42>
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	1821      	adds	r1, r4, r0
 8002ff4:	428b      	cmp	r3, r1
 8002ff6:	bf01      	itttt	eq
 8002ff8:	6819      	ldreq	r1, [r3, #0]
 8002ffa:	685b      	ldreq	r3, [r3, #4]
 8002ffc:	1809      	addeq	r1, r1, r0
 8002ffe:	6021      	streq	r1, [r4, #0]
 8003000:	e7ed      	b.n	8002fde <_free_r+0x1e>
 8003002:	461a      	mov	r2, r3
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	b10b      	cbz	r3, 800300c <_free_r+0x4c>
 8003008:	42a3      	cmp	r3, r4
 800300a:	d9fa      	bls.n	8003002 <_free_r+0x42>
 800300c:	6811      	ldr	r1, [r2, #0]
 800300e:	1850      	adds	r0, r2, r1
 8003010:	42a0      	cmp	r0, r4
 8003012:	d10b      	bne.n	800302c <_free_r+0x6c>
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	4401      	add	r1, r0
 8003018:	1850      	adds	r0, r2, r1
 800301a:	4283      	cmp	r3, r0
 800301c:	6011      	str	r1, [r2, #0]
 800301e:	d1e0      	bne.n	8002fe2 <_free_r+0x22>
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4408      	add	r0, r1
 8003026:	6010      	str	r0, [r2, #0]
 8003028:	6053      	str	r3, [r2, #4]
 800302a:	e7da      	b.n	8002fe2 <_free_r+0x22>
 800302c:	d902      	bls.n	8003034 <_free_r+0x74>
 800302e:	230c      	movs	r3, #12
 8003030:	602b      	str	r3, [r5, #0]
 8003032:	e7d6      	b.n	8002fe2 <_free_r+0x22>
 8003034:	6820      	ldr	r0, [r4, #0]
 8003036:	1821      	adds	r1, r4, r0
 8003038:	428b      	cmp	r3, r1
 800303a:	bf01      	itttt	eq
 800303c:	6819      	ldreq	r1, [r3, #0]
 800303e:	685b      	ldreq	r3, [r3, #4]
 8003040:	1809      	addeq	r1, r1, r0
 8003042:	6021      	streq	r1, [r4, #0]
 8003044:	6063      	str	r3, [r4, #4]
 8003046:	6054      	str	r4, [r2, #4]
 8003048:	e7cb      	b.n	8002fe2 <_free_r+0x22>
 800304a:	bd38      	pop	{r3, r4, r5, pc}
 800304c:	20000314 	.word	0x20000314

08003050 <sbrk_aligned>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4e0f      	ldr	r6, [pc, #60]	@ (8003090 <sbrk_aligned+0x40>)
 8003054:	460c      	mov	r4, r1
 8003056:	6831      	ldr	r1, [r6, #0]
 8003058:	4605      	mov	r5, r0
 800305a:	b911      	cbnz	r1, 8003062 <sbrk_aligned+0x12>
 800305c:	f000 fcd6 	bl	8003a0c <_sbrk_r>
 8003060:	6030      	str	r0, [r6, #0]
 8003062:	4621      	mov	r1, r4
 8003064:	4628      	mov	r0, r5
 8003066:	f000 fcd1 	bl	8003a0c <_sbrk_r>
 800306a:	1c43      	adds	r3, r0, #1
 800306c:	d103      	bne.n	8003076 <sbrk_aligned+0x26>
 800306e:	f04f 34ff 	mov.w	r4, #4294967295
 8003072:	4620      	mov	r0, r4
 8003074:	bd70      	pop	{r4, r5, r6, pc}
 8003076:	1cc4      	adds	r4, r0, #3
 8003078:	f024 0403 	bic.w	r4, r4, #3
 800307c:	42a0      	cmp	r0, r4
 800307e:	d0f8      	beq.n	8003072 <sbrk_aligned+0x22>
 8003080:	1a21      	subs	r1, r4, r0
 8003082:	4628      	mov	r0, r5
 8003084:	f000 fcc2 	bl	8003a0c <_sbrk_r>
 8003088:	3001      	adds	r0, #1
 800308a:	d1f2      	bne.n	8003072 <sbrk_aligned+0x22>
 800308c:	e7ef      	b.n	800306e <sbrk_aligned+0x1e>
 800308e:	bf00      	nop
 8003090:	20000310 	.word	0x20000310

08003094 <_malloc_r>:
 8003094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003098:	1ccd      	adds	r5, r1, #3
 800309a:	f025 0503 	bic.w	r5, r5, #3
 800309e:	3508      	adds	r5, #8
 80030a0:	2d0c      	cmp	r5, #12
 80030a2:	bf38      	it	cc
 80030a4:	250c      	movcc	r5, #12
 80030a6:	2d00      	cmp	r5, #0
 80030a8:	4606      	mov	r6, r0
 80030aa:	db01      	blt.n	80030b0 <_malloc_r+0x1c>
 80030ac:	42a9      	cmp	r1, r5
 80030ae:	d904      	bls.n	80030ba <_malloc_r+0x26>
 80030b0:	230c      	movs	r3, #12
 80030b2:	6033      	str	r3, [r6, #0]
 80030b4:	2000      	movs	r0, #0
 80030b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003190 <_malloc_r+0xfc>
 80030be:	f000 f869 	bl	8003194 <__malloc_lock>
 80030c2:	f8d8 3000 	ldr.w	r3, [r8]
 80030c6:	461c      	mov	r4, r3
 80030c8:	bb44      	cbnz	r4, 800311c <_malloc_r+0x88>
 80030ca:	4629      	mov	r1, r5
 80030cc:	4630      	mov	r0, r6
 80030ce:	f7ff ffbf 	bl	8003050 <sbrk_aligned>
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	4604      	mov	r4, r0
 80030d6:	d158      	bne.n	800318a <_malloc_r+0xf6>
 80030d8:	f8d8 4000 	ldr.w	r4, [r8]
 80030dc:	4627      	mov	r7, r4
 80030de:	2f00      	cmp	r7, #0
 80030e0:	d143      	bne.n	800316a <_malloc_r+0xd6>
 80030e2:	2c00      	cmp	r4, #0
 80030e4:	d04b      	beq.n	800317e <_malloc_r+0xea>
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	4639      	mov	r1, r7
 80030ea:	4630      	mov	r0, r6
 80030ec:	eb04 0903 	add.w	r9, r4, r3
 80030f0:	f000 fc8c 	bl	8003a0c <_sbrk_r>
 80030f4:	4581      	cmp	r9, r0
 80030f6:	d142      	bne.n	800317e <_malloc_r+0xea>
 80030f8:	6821      	ldr	r1, [r4, #0]
 80030fa:	4630      	mov	r0, r6
 80030fc:	1a6d      	subs	r5, r5, r1
 80030fe:	4629      	mov	r1, r5
 8003100:	f7ff ffa6 	bl	8003050 <sbrk_aligned>
 8003104:	3001      	adds	r0, #1
 8003106:	d03a      	beq.n	800317e <_malloc_r+0xea>
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	442b      	add	r3, r5
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	f8d8 3000 	ldr.w	r3, [r8]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	bb62      	cbnz	r2, 8003170 <_malloc_r+0xdc>
 8003116:	f8c8 7000 	str.w	r7, [r8]
 800311a:	e00f      	b.n	800313c <_malloc_r+0xa8>
 800311c:	6822      	ldr	r2, [r4, #0]
 800311e:	1b52      	subs	r2, r2, r5
 8003120:	d420      	bmi.n	8003164 <_malloc_r+0xd0>
 8003122:	2a0b      	cmp	r2, #11
 8003124:	d917      	bls.n	8003156 <_malloc_r+0xc2>
 8003126:	1961      	adds	r1, r4, r5
 8003128:	42a3      	cmp	r3, r4
 800312a:	6025      	str	r5, [r4, #0]
 800312c:	bf18      	it	ne
 800312e:	6059      	strne	r1, [r3, #4]
 8003130:	6863      	ldr	r3, [r4, #4]
 8003132:	bf08      	it	eq
 8003134:	f8c8 1000 	streq.w	r1, [r8]
 8003138:	5162      	str	r2, [r4, r5]
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	4630      	mov	r0, r6
 800313e:	f000 f82f 	bl	80031a0 <__malloc_unlock>
 8003142:	f104 000b 	add.w	r0, r4, #11
 8003146:	1d23      	adds	r3, r4, #4
 8003148:	f020 0007 	bic.w	r0, r0, #7
 800314c:	1ac2      	subs	r2, r0, r3
 800314e:	bf1c      	itt	ne
 8003150:	1a1b      	subne	r3, r3, r0
 8003152:	50a3      	strne	r3, [r4, r2]
 8003154:	e7af      	b.n	80030b6 <_malloc_r+0x22>
 8003156:	6862      	ldr	r2, [r4, #4]
 8003158:	42a3      	cmp	r3, r4
 800315a:	bf0c      	ite	eq
 800315c:	f8c8 2000 	streq.w	r2, [r8]
 8003160:	605a      	strne	r2, [r3, #4]
 8003162:	e7eb      	b.n	800313c <_malloc_r+0xa8>
 8003164:	4623      	mov	r3, r4
 8003166:	6864      	ldr	r4, [r4, #4]
 8003168:	e7ae      	b.n	80030c8 <_malloc_r+0x34>
 800316a:	463c      	mov	r4, r7
 800316c:	687f      	ldr	r7, [r7, #4]
 800316e:	e7b6      	b.n	80030de <_malloc_r+0x4a>
 8003170:	461a      	mov	r2, r3
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	42a3      	cmp	r3, r4
 8003176:	d1fb      	bne.n	8003170 <_malloc_r+0xdc>
 8003178:	2300      	movs	r3, #0
 800317a:	6053      	str	r3, [r2, #4]
 800317c:	e7de      	b.n	800313c <_malloc_r+0xa8>
 800317e:	230c      	movs	r3, #12
 8003180:	4630      	mov	r0, r6
 8003182:	6033      	str	r3, [r6, #0]
 8003184:	f000 f80c 	bl	80031a0 <__malloc_unlock>
 8003188:	e794      	b.n	80030b4 <_malloc_r+0x20>
 800318a:	6005      	str	r5, [r0, #0]
 800318c:	e7d6      	b.n	800313c <_malloc_r+0xa8>
 800318e:	bf00      	nop
 8003190:	20000314 	.word	0x20000314

08003194 <__malloc_lock>:
 8003194:	4801      	ldr	r0, [pc, #4]	@ (800319c <__malloc_lock+0x8>)
 8003196:	f7ff bf10 	b.w	8002fba <__retarget_lock_acquire_recursive>
 800319a:	bf00      	nop
 800319c:	2000030c 	.word	0x2000030c

080031a0 <__malloc_unlock>:
 80031a0:	4801      	ldr	r0, [pc, #4]	@ (80031a8 <__malloc_unlock+0x8>)
 80031a2:	f7ff bf0b 	b.w	8002fbc <__retarget_lock_release_recursive>
 80031a6:	bf00      	nop
 80031a8:	2000030c 	.word	0x2000030c

080031ac <__sfputc_r>:
 80031ac:	6893      	ldr	r3, [r2, #8]
 80031ae:	b410      	push	{r4}
 80031b0:	3b01      	subs	r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	6093      	str	r3, [r2, #8]
 80031b6:	da07      	bge.n	80031c8 <__sfputc_r+0x1c>
 80031b8:	6994      	ldr	r4, [r2, #24]
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	db01      	blt.n	80031c2 <__sfputc_r+0x16>
 80031be:	290a      	cmp	r1, #10
 80031c0:	d102      	bne.n	80031c8 <__sfputc_r+0x1c>
 80031c2:	bc10      	pop	{r4}
 80031c4:	f7ff bdeb 	b.w	8002d9e <__swbuf_r>
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	1c58      	adds	r0, r3, #1
 80031cc:	6010      	str	r0, [r2, #0]
 80031ce:	7019      	strb	r1, [r3, #0]
 80031d0:	4608      	mov	r0, r1
 80031d2:	bc10      	pop	{r4}
 80031d4:	4770      	bx	lr

080031d6 <__sfputs_r>:
 80031d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d8:	4606      	mov	r6, r0
 80031da:	460f      	mov	r7, r1
 80031dc:	4614      	mov	r4, r2
 80031de:	18d5      	adds	r5, r2, r3
 80031e0:	42ac      	cmp	r4, r5
 80031e2:	d101      	bne.n	80031e8 <__sfputs_r+0x12>
 80031e4:	2000      	movs	r0, #0
 80031e6:	e007      	b.n	80031f8 <__sfputs_r+0x22>
 80031e8:	463a      	mov	r2, r7
 80031ea:	4630      	mov	r0, r6
 80031ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031f0:	f7ff ffdc 	bl	80031ac <__sfputc_r>
 80031f4:	1c43      	adds	r3, r0, #1
 80031f6:	d1f3      	bne.n	80031e0 <__sfputs_r+0xa>
 80031f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031fc <_vfiprintf_r>:
 80031fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003200:	460d      	mov	r5, r1
 8003202:	4614      	mov	r4, r2
 8003204:	4698      	mov	r8, r3
 8003206:	4606      	mov	r6, r0
 8003208:	b09d      	sub	sp, #116	@ 0x74
 800320a:	b118      	cbz	r0, 8003214 <_vfiprintf_r+0x18>
 800320c:	6a03      	ldr	r3, [r0, #32]
 800320e:	b90b      	cbnz	r3, 8003214 <_vfiprintf_r+0x18>
 8003210:	f7ff fcd4 	bl	8002bbc <__sinit>
 8003214:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003216:	07d9      	lsls	r1, r3, #31
 8003218:	d405      	bmi.n	8003226 <_vfiprintf_r+0x2a>
 800321a:	89ab      	ldrh	r3, [r5, #12]
 800321c:	059a      	lsls	r2, r3, #22
 800321e:	d402      	bmi.n	8003226 <_vfiprintf_r+0x2a>
 8003220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003222:	f7ff feca 	bl	8002fba <__retarget_lock_acquire_recursive>
 8003226:	89ab      	ldrh	r3, [r5, #12]
 8003228:	071b      	lsls	r3, r3, #28
 800322a:	d501      	bpl.n	8003230 <_vfiprintf_r+0x34>
 800322c:	692b      	ldr	r3, [r5, #16]
 800322e:	b99b      	cbnz	r3, 8003258 <_vfiprintf_r+0x5c>
 8003230:	4629      	mov	r1, r5
 8003232:	4630      	mov	r0, r6
 8003234:	f7ff fdf2 	bl	8002e1c <__swsetup_r>
 8003238:	b170      	cbz	r0, 8003258 <_vfiprintf_r+0x5c>
 800323a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800323c:	07dc      	lsls	r4, r3, #31
 800323e:	d504      	bpl.n	800324a <_vfiprintf_r+0x4e>
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	b01d      	add	sp, #116	@ 0x74
 8003246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800324a:	89ab      	ldrh	r3, [r5, #12]
 800324c:	0598      	lsls	r0, r3, #22
 800324e:	d4f7      	bmi.n	8003240 <_vfiprintf_r+0x44>
 8003250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003252:	f7ff feb3 	bl	8002fbc <__retarget_lock_release_recursive>
 8003256:	e7f3      	b.n	8003240 <_vfiprintf_r+0x44>
 8003258:	2300      	movs	r3, #0
 800325a:	9309      	str	r3, [sp, #36]	@ 0x24
 800325c:	2320      	movs	r3, #32
 800325e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003262:	2330      	movs	r3, #48	@ 0x30
 8003264:	f04f 0901 	mov.w	r9, #1
 8003268:	f8cd 800c 	str.w	r8, [sp, #12]
 800326c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003418 <_vfiprintf_r+0x21c>
 8003270:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003274:	4623      	mov	r3, r4
 8003276:	469a      	mov	sl, r3
 8003278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800327c:	b10a      	cbz	r2, 8003282 <_vfiprintf_r+0x86>
 800327e:	2a25      	cmp	r2, #37	@ 0x25
 8003280:	d1f9      	bne.n	8003276 <_vfiprintf_r+0x7a>
 8003282:	ebba 0b04 	subs.w	fp, sl, r4
 8003286:	d00b      	beq.n	80032a0 <_vfiprintf_r+0xa4>
 8003288:	465b      	mov	r3, fp
 800328a:	4622      	mov	r2, r4
 800328c:	4629      	mov	r1, r5
 800328e:	4630      	mov	r0, r6
 8003290:	f7ff ffa1 	bl	80031d6 <__sfputs_r>
 8003294:	3001      	adds	r0, #1
 8003296:	f000 80a7 	beq.w	80033e8 <_vfiprintf_r+0x1ec>
 800329a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800329c:	445a      	add	r2, fp
 800329e:	9209      	str	r2, [sp, #36]	@ 0x24
 80032a0:	f89a 3000 	ldrb.w	r3, [sl]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 809f 	beq.w	80033e8 <_vfiprintf_r+0x1ec>
 80032aa:	2300      	movs	r3, #0
 80032ac:	f04f 32ff 	mov.w	r2, #4294967295
 80032b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032b4:	f10a 0a01 	add.w	sl, sl, #1
 80032b8:	9304      	str	r3, [sp, #16]
 80032ba:	9307      	str	r3, [sp, #28]
 80032bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80032c2:	4654      	mov	r4, sl
 80032c4:	2205      	movs	r2, #5
 80032c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ca:	4853      	ldr	r0, [pc, #332]	@ (8003418 <_vfiprintf_r+0x21c>)
 80032cc:	f000 fbae 	bl	8003a2c <memchr>
 80032d0:	9a04      	ldr	r2, [sp, #16]
 80032d2:	b9d8      	cbnz	r0, 800330c <_vfiprintf_r+0x110>
 80032d4:	06d1      	lsls	r1, r2, #27
 80032d6:	bf44      	itt	mi
 80032d8:	2320      	movmi	r3, #32
 80032da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032de:	0713      	lsls	r3, r2, #28
 80032e0:	bf44      	itt	mi
 80032e2:	232b      	movmi	r3, #43	@ 0x2b
 80032e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032e8:	f89a 3000 	ldrb.w	r3, [sl]
 80032ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80032ee:	d015      	beq.n	800331c <_vfiprintf_r+0x120>
 80032f0:	4654      	mov	r4, sl
 80032f2:	2000      	movs	r0, #0
 80032f4:	f04f 0c0a 	mov.w	ip, #10
 80032f8:	9a07      	ldr	r2, [sp, #28]
 80032fa:	4621      	mov	r1, r4
 80032fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003300:	3b30      	subs	r3, #48	@ 0x30
 8003302:	2b09      	cmp	r3, #9
 8003304:	d94b      	bls.n	800339e <_vfiprintf_r+0x1a2>
 8003306:	b1b0      	cbz	r0, 8003336 <_vfiprintf_r+0x13a>
 8003308:	9207      	str	r2, [sp, #28]
 800330a:	e014      	b.n	8003336 <_vfiprintf_r+0x13a>
 800330c:	eba0 0308 	sub.w	r3, r0, r8
 8003310:	fa09 f303 	lsl.w	r3, r9, r3
 8003314:	4313      	orrs	r3, r2
 8003316:	46a2      	mov	sl, r4
 8003318:	9304      	str	r3, [sp, #16]
 800331a:	e7d2      	b.n	80032c2 <_vfiprintf_r+0xc6>
 800331c:	9b03      	ldr	r3, [sp, #12]
 800331e:	1d19      	adds	r1, r3, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	9103      	str	r1, [sp, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	bfbb      	ittet	lt
 8003328:	425b      	neglt	r3, r3
 800332a:	f042 0202 	orrlt.w	r2, r2, #2
 800332e:	9307      	strge	r3, [sp, #28]
 8003330:	9307      	strlt	r3, [sp, #28]
 8003332:	bfb8      	it	lt
 8003334:	9204      	strlt	r2, [sp, #16]
 8003336:	7823      	ldrb	r3, [r4, #0]
 8003338:	2b2e      	cmp	r3, #46	@ 0x2e
 800333a:	d10a      	bne.n	8003352 <_vfiprintf_r+0x156>
 800333c:	7863      	ldrb	r3, [r4, #1]
 800333e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003340:	d132      	bne.n	80033a8 <_vfiprintf_r+0x1ac>
 8003342:	9b03      	ldr	r3, [sp, #12]
 8003344:	3402      	adds	r4, #2
 8003346:	1d1a      	adds	r2, r3, #4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	9203      	str	r2, [sp, #12]
 800334c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003350:	9305      	str	r3, [sp, #20]
 8003352:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800341c <_vfiprintf_r+0x220>
 8003356:	2203      	movs	r2, #3
 8003358:	4650      	mov	r0, sl
 800335a:	7821      	ldrb	r1, [r4, #0]
 800335c:	f000 fb66 	bl	8003a2c <memchr>
 8003360:	b138      	cbz	r0, 8003372 <_vfiprintf_r+0x176>
 8003362:	2240      	movs	r2, #64	@ 0x40
 8003364:	9b04      	ldr	r3, [sp, #16]
 8003366:	eba0 000a 	sub.w	r0, r0, sl
 800336a:	4082      	lsls	r2, r0
 800336c:	4313      	orrs	r3, r2
 800336e:	3401      	adds	r4, #1
 8003370:	9304      	str	r3, [sp, #16]
 8003372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003376:	2206      	movs	r2, #6
 8003378:	4829      	ldr	r0, [pc, #164]	@ (8003420 <_vfiprintf_r+0x224>)
 800337a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800337e:	f000 fb55 	bl	8003a2c <memchr>
 8003382:	2800      	cmp	r0, #0
 8003384:	d03f      	beq.n	8003406 <_vfiprintf_r+0x20a>
 8003386:	4b27      	ldr	r3, [pc, #156]	@ (8003424 <_vfiprintf_r+0x228>)
 8003388:	bb1b      	cbnz	r3, 80033d2 <_vfiprintf_r+0x1d6>
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	3307      	adds	r3, #7
 800338e:	f023 0307 	bic.w	r3, r3, #7
 8003392:	3308      	adds	r3, #8
 8003394:	9303      	str	r3, [sp, #12]
 8003396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003398:	443b      	add	r3, r7
 800339a:	9309      	str	r3, [sp, #36]	@ 0x24
 800339c:	e76a      	b.n	8003274 <_vfiprintf_r+0x78>
 800339e:	460c      	mov	r4, r1
 80033a0:	2001      	movs	r0, #1
 80033a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80033a6:	e7a8      	b.n	80032fa <_vfiprintf_r+0xfe>
 80033a8:	2300      	movs	r3, #0
 80033aa:	f04f 0c0a 	mov.w	ip, #10
 80033ae:	4619      	mov	r1, r3
 80033b0:	3401      	adds	r4, #1
 80033b2:	9305      	str	r3, [sp, #20]
 80033b4:	4620      	mov	r0, r4
 80033b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033ba:	3a30      	subs	r2, #48	@ 0x30
 80033bc:	2a09      	cmp	r2, #9
 80033be:	d903      	bls.n	80033c8 <_vfiprintf_r+0x1cc>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0c6      	beq.n	8003352 <_vfiprintf_r+0x156>
 80033c4:	9105      	str	r1, [sp, #20]
 80033c6:	e7c4      	b.n	8003352 <_vfiprintf_r+0x156>
 80033c8:	4604      	mov	r4, r0
 80033ca:	2301      	movs	r3, #1
 80033cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80033d0:	e7f0      	b.n	80033b4 <_vfiprintf_r+0x1b8>
 80033d2:	ab03      	add	r3, sp, #12
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	462a      	mov	r2, r5
 80033d8:	4630      	mov	r0, r6
 80033da:	4b13      	ldr	r3, [pc, #76]	@ (8003428 <_vfiprintf_r+0x22c>)
 80033dc:	a904      	add	r1, sp, #16
 80033de:	f3af 8000 	nop.w
 80033e2:	4607      	mov	r7, r0
 80033e4:	1c78      	adds	r0, r7, #1
 80033e6:	d1d6      	bne.n	8003396 <_vfiprintf_r+0x19a>
 80033e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033ea:	07d9      	lsls	r1, r3, #31
 80033ec:	d405      	bmi.n	80033fa <_vfiprintf_r+0x1fe>
 80033ee:	89ab      	ldrh	r3, [r5, #12]
 80033f0:	059a      	lsls	r2, r3, #22
 80033f2:	d402      	bmi.n	80033fa <_vfiprintf_r+0x1fe>
 80033f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033f6:	f7ff fde1 	bl	8002fbc <__retarget_lock_release_recursive>
 80033fa:	89ab      	ldrh	r3, [r5, #12]
 80033fc:	065b      	lsls	r3, r3, #25
 80033fe:	f53f af1f 	bmi.w	8003240 <_vfiprintf_r+0x44>
 8003402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003404:	e71e      	b.n	8003244 <_vfiprintf_r+0x48>
 8003406:	ab03      	add	r3, sp, #12
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	462a      	mov	r2, r5
 800340c:	4630      	mov	r0, r6
 800340e:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <_vfiprintf_r+0x22c>)
 8003410:	a904      	add	r1, sp, #16
 8003412:	f000 f87d 	bl	8003510 <_printf_i>
 8003416:	e7e4      	b.n	80033e2 <_vfiprintf_r+0x1e6>
 8003418:	08003aae 	.word	0x08003aae
 800341c:	08003ab4 	.word	0x08003ab4
 8003420:	08003ab8 	.word	0x08003ab8
 8003424:	00000000 	.word	0x00000000
 8003428:	080031d7 	.word	0x080031d7

0800342c <_printf_common>:
 800342c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003430:	4616      	mov	r6, r2
 8003432:	4698      	mov	r8, r3
 8003434:	688a      	ldr	r2, [r1, #8]
 8003436:	690b      	ldr	r3, [r1, #16]
 8003438:	4607      	mov	r7, r0
 800343a:	4293      	cmp	r3, r2
 800343c:	bfb8      	it	lt
 800343e:	4613      	movlt	r3, r2
 8003440:	6033      	str	r3, [r6, #0]
 8003442:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003446:	460c      	mov	r4, r1
 8003448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800344c:	b10a      	cbz	r2, 8003452 <_printf_common+0x26>
 800344e:	3301      	adds	r3, #1
 8003450:	6033      	str	r3, [r6, #0]
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	0699      	lsls	r1, r3, #26
 8003456:	bf42      	ittt	mi
 8003458:	6833      	ldrmi	r3, [r6, #0]
 800345a:	3302      	addmi	r3, #2
 800345c:	6033      	strmi	r3, [r6, #0]
 800345e:	6825      	ldr	r5, [r4, #0]
 8003460:	f015 0506 	ands.w	r5, r5, #6
 8003464:	d106      	bne.n	8003474 <_printf_common+0x48>
 8003466:	f104 0a19 	add.w	sl, r4, #25
 800346a:	68e3      	ldr	r3, [r4, #12]
 800346c:	6832      	ldr	r2, [r6, #0]
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	42ab      	cmp	r3, r5
 8003472:	dc2b      	bgt.n	80034cc <_printf_common+0xa0>
 8003474:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003478:	6822      	ldr	r2, [r4, #0]
 800347a:	3b00      	subs	r3, #0
 800347c:	bf18      	it	ne
 800347e:	2301      	movne	r3, #1
 8003480:	0692      	lsls	r2, r2, #26
 8003482:	d430      	bmi.n	80034e6 <_printf_common+0xba>
 8003484:	4641      	mov	r1, r8
 8003486:	4638      	mov	r0, r7
 8003488:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800348c:	47c8      	blx	r9
 800348e:	3001      	adds	r0, #1
 8003490:	d023      	beq.n	80034da <_printf_common+0xae>
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	6922      	ldr	r2, [r4, #16]
 8003496:	f003 0306 	and.w	r3, r3, #6
 800349a:	2b04      	cmp	r3, #4
 800349c:	bf14      	ite	ne
 800349e:	2500      	movne	r5, #0
 80034a0:	6833      	ldreq	r3, [r6, #0]
 80034a2:	f04f 0600 	mov.w	r6, #0
 80034a6:	bf08      	it	eq
 80034a8:	68e5      	ldreq	r5, [r4, #12]
 80034aa:	f104 041a 	add.w	r4, r4, #26
 80034ae:	bf08      	it	eq
 80034b0:	1aed      	subeq	r5, r5, r3
 80034b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034b6:	bf08      	it	eq
 80034b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034bc:	4293      	cmp	r3, r2
 80034be:	bfc4      	itt	gt
 80034c0:	1a9b      	subgt	r3, r3, r2
 80034c2:	18ed      	addgt	r5, r5, r3
 80034c4:	42b5      	cmp	r5, r6
 80034c6:	d11a      	bne.n	80034fe <_printf_common+0xd2>
 80034c8:	2000      	movs	r0, #0
 80034ca:	e008      	b.n	80034de <_printf_common+0xb2>
 80034cc:	2301      	movs	r3, #1
 80034ce:	4652      	mov	r2, sl
 80034d0:	4641      	mov	r1, r8
 80034d2:	4638      	mov	r0, r7
 80034d4:	47c8      	blx	r9
 80034d6:	3001      	adds	r0, #1
 80034d8:	d103      	bne.n	80034e2 <_printf_common+0xb6>
 80034da:	f04f 30ff 	mov.w	r0, #4294967295
 80034de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e2:	3501      	adds	r5, #1
 80034e4:	e7c1      	b.n	800346a <_printf_common+0x3e>
 80034e6:	2030      	movs	r0, #48	@ 0x30
 80034e8:	18e1      	adds	r1, r4, r3
 80034ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034f4:	4422      	add	r2, r4
 80034f6:	3302      	adds	r3, #2
 80034f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034fc:	e7c2      	b.n	8003484 <_printf_common+0x58>
 80034fe:	2301      	movs	r3, #1
 8003500:	4622      	mov	r2, r4
 8003502:	4641      	mov	r1, r8
 8003504:	4638      	mov	r0, r7
 8003506:	47c8      	blx	r9
 8003508:	3001      	adds	r0, #1
 800350a:	d0e6      	beq.n	80034da <_printf_common+0xae>
 800350c:	3601      	adds	r6, #1
 800350e:	e7d9      	b.n	80034c4 <_printf_common+0x98>

08003510 <_printf_i>:
 8003510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003514:	7e0f      	ldrb	r7, [r1, #24]
 8003516:	4691      	mov	r9, r2
 8003518:	2f78      	cmp	r7, #120	@ 0x78
 800351a:	4680      	mov	r8, r0
 800351c:	460c      	mov	r4, r1
 800351e:	469a      	mov	sl, r3
 8003520:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003522:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003526:	d807      	bhi.n	8003538 <_printf_i+0x28>
 8003528:	2f62      	cmp	r7, #98	@ 0x62
 800352a:	d80a      	bhi.n	8003542 <_printf_i+0x32>
 800352c:	2f00      	cmp	r7, #0
 800352e:	f000 80d1 	beq.w	80036d4 <_printf_i+0x1c4>
 8003532:	2f58      	cmp	r7, #88	@ 0x58
 8003534:	f000 80b8 	beq.w	80036a8 <_printf_i+0x198>
 8003538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800353c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003540:	e03a      	b.n	80035b8 <_printf_i+0xa8>
 8003542:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003546:	2b15      	cmp	r3, #21
 8003548:	d8f6      	bhi.n	8003538 <_printf_i+0x28>
 800354a:	a101      	add	r1, pc, #4	@ (adr r1, 8003550 <_printf_i+0x40>)
 800354c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003550:	080035a9 	.word	0x080035a9
 8003554:	080035bd 	.word	0x080035bd
 8003558:	08003539 	.word	0x08003539
 800355c:	08003539 	.word	0x08003539
 8003560:	08003539 	.word	0x08003539
 8003564:	08003539 	.word	0x08003539
 8003568:	080035bd 	.word	0x080035bd
 800356c:	08003539 	.word	0x08003539
 8003570:	08003539 	.word	0x08003539
 8003574:	08003539 	.word	0x08003539
 8003578:	08003539 	.word	0x08003539
 800357c:	080036bb 	.word	0x080036bb
 8003580:	080035e7 	.word	0x080035e7
 8003584:	08003675 	.word	0x08003675
 8003588:	08003539 	.word	0x08003539
 800358c:	08003539 	.word	0x08003539
 8003590:	080036dd 	.word	0x080036dd
 8003594:	08003539 	.word	0x08003539
 8003598:	080035e7 	.word	0x080035e7
 800359c:	08003539 	.word	0x08003539
 80035a0:	08003539 	.word	0x08003539
 80035a4:	0800367d 	.word	0x0800367d
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	1d1a      	adds	r2, r3, #4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6032      	str	r2, [r6, #0]
 80035b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035b8:	2301      	movs	r3, #1
 80035ba:	e09c      	b.n	80036f6 <_printf_i+0x1e6>
 80035bc:	6833      	ldr	r3, [r6, #0]
 80035be:	6820      	ldr	r0, [r4, #0]
 80035c0:	1d19      	adds	r1, r3, #4
 80035c2:	6031      	str	r1, [r6, #0]
 80035c4:	0606      	lsls	r6, r0, #24
 80035c6:	d501      	bpl.n	80035cc <_printf_i+0xbc>
 80035c8:	681d      	ldr	r5, [r3, #0]
 80035ca:	e003      	b.n	80035d4 <_printf_i+0xc4>
 80035cc:	0645      	lsls	r5, r0, #25
 80035ce:	d5fb      	bpl.n	80035c8 <_printf_i+0xb8>
 80035d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035d4:	2d00      	cmp	r5, #0
 80035d6:	da03      	bge.n	80035e0 <_printf_i+0xd0>
 80035d8:	232d      	movs	r3, #45	@ 0x2d
 80035da:	426d      	negs	r5, r5
 80035dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035e0:	230a      	movs	r3, #10
 80035e2:	4858      	ldr	r0, [pc, #352]	@ (8003744 <_printf_i+0x234>)
 80035e4:	e011      	b.n	800360a <_printf_i+0xfa>
 80035e6:	6821      	ldr	r1, [r4, #0]
 80035e8:	6833      	ldr	r3, [r6, #0]
 80035ea:	0608      	lsls	r0, r1, #24
 80035ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80035f0:	d402      	bmi.n	80035f8 <_printf_i+0xe8>
 80035f2:	0649      	lsls	r1, r1, #25
 80035f4:	bf48      	it	mi
 80035f6:	b2ad      	uxthmi	r5, r5
 80035f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80035fa:	6033      	str	r3, [r6, #0]
 80035fc:	bf14      	ite	ne
 80035fe:	230a      	movne	r3, #10
 8003600:	2308      	moveq	r3, #8
 8003602:	4850      	ldr	r0, [pc, #320]	@ (8003744 <_printf_i+0x234>)
 8003604:	2100      	movs	r1, #0
 8003606:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800360a:	6866      	ldr	r6, [r4, #4]
 800360c:	2e00      	cmp	r6, #0
 800360e:	60a6      	str	r6, [r4, #8]
 8003610:	db05      	blt.n	800361e <_printf_i+0x10e>
 8003612:	6821      	ldr	r1, [r4, #0]
 8003614:	432e      	orrs	r6, r5
 8003616:	f021 0104 	bic.w	r1, r1, #4
 800361a:	6021      	str	r1, [r4, #0]
 800361c:	d04b      	beq.n	80036b6 <_printf_i+0x1a6>
 800361e:	4616      	mov	r6, r2
 8003620:	fbb5 f1f3 	udiv	r1, r5, r3
 8003624:	fb03 5711 	mls	r7, r3, r1, r5
 8003628:	5dc7      	ldrb	r7, [r0, r7]
 800362a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800362e:	462f      	mov	r7, r5
 8003630:	42bb      	cmp	r3, r7
 8003632:	460d      	mov	r5, r1
 8003634:	d9f4      	bls.n	8003620 <_printf_i+0x110>
 8003636:	2b08      	cmp	r3, #8
 8003638:	d10b      	bne.n	8003652 <_printf_i+0x142>
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	07df      	lsls	r7, r3, #31
 800363e:	d508      	bpl.n	8003652 <_printf_i+0x142>
 8003640:	6923      	ldr	r3, [r4, #16]
 8003642:	6861      	ldr	r1, [r4, #4]
 8003644:	4299      	cmp	r1, r3
 8003646:	bfde      	ittt	le
 8003648:	2330      	movle	r3, #48	@ 0x30
 800364a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800364e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003652:	1b92      	subs	r2, r2, r6
 8003654:	6122      	str	r2, [r4, #16]
 8003656:	464b      	mov	r3, r9
 8003658:	4621      	mov	r1, r4
 800365a:	4640      	mov	r0, r8
 800365c:	f8cd a000 	str.w	sl, [sp]
 8003660:	aa03      	add	r2, sp, #12
 8003662:	f7ff fee3 	bl	800342c <_printf_common>
 8003666:	3001      	adds	r0, #1
 8003668:	d14a      	bne.n	8003700 <_printf_i+0x1f0>
 800366a:	f04f 30ff 	mov.w	r0, #4294967295
 800366e:	b004      	add	sp, #16
 8003670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	f043 0320 	orr.w	r3, r3, #32
 800367a:	6023      	str	r3, [r4, #0]
 800367c:	2778      	movs	r7, #120	@ 0x78
 800367e:	4832      	ldr	r0, [pc, #200]	@ (8003748 <_printf_i+0x238>)
 8003680:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	6831      	ldr	r1, [r6, #0]
 8003688:	061f      	lsls	r7, r3, #24
 800368a:	f851 5b04 	ldr.w	r5, [r1], #4
 800368e:	d402      	bmi.n	8003696 <_printf_i+0x186>
 8003690:	065f      	lsls	r7, r3, #25
 8003692:	bf48      	it	mi
 8003694:	b2ad      	uxthmi	r5, r5
 8003696:	6031      	str	r1, [r6, #0]
 8003698:	07d9      	lsls	r1, r3, #31
 800369a:	bf44      	itt	mi
 800369c:	f043 0320 	orrmi.w	r3, r3, #32
 80036a0:	6023      	strmi	r3, [r4, #0]
 80036a2:	b11d      	cbz	r5, 80036ac <_printf_i+0x19c>
 80036a4:	2310      	movs	r3, #16
 80036a6:	e7ad      	b.n	8003604 <_printf_i+0xf4>
 80036a8:	4826      	ldr	r0, [pc, #152]	@ (8003744 <_printf_i+0x234>)
 80036aa:	e7e9      	b.n	8003680 <_printf_i+0x170>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	f023 0320 	bic.w	r3, r3, #32
 80036b2:	6023      	str	r3, [r4, #0]
 80036b4:	e7f6      	b.n	80036a4 <_printf_i+0x194>
 80036b6:	4616      	mov	r6, r2
 80036b8:	e7bd      	b.n	8003636 <_printf_i+0x126>
 80036ba:	6833      	ldr	r3, [r6, #0]
 80036bc:	6825      	ldr	r5, [r4, #0]
 80036be:	1d18      	adds	r0, r3, #4
 80036c0:	6961      	ldr	r1, [r4, #20]
 80036c2:	6030      	str	r0, [r6, #0]
 80036c4:	062e      	lsls	r6, r5, #24
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	d501      	bpl.n	80036ce <_printf_i+0x1be>
 80036ca:	6019      	str	r1, [r3, #0]
 80036cc:	e002      	b.n	80036d4 <_printf_i+0x1c4>
 80036ce:	0668      	lsls	r0, r5, #25
 80036d0:	d5fb      	bpl.n	80036ca <_printf_i+0x1ba>
 80036d2:	8019      	strh	r1, [r3, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	4616      	mov	r6, r2
 80036d8:	6123      	str	r3, [r4, #16]
 80036da:	e7bc      	b.n	8003656 <_printf_i+0x146>
 80036dc:	6833      	ldr	r3, [r6, #0]
 80036de:	2100      	movs	r1, #0
 80036e0:	1d1a      	adds	r2, r3, #4
 80036e2:	6032      	str	r2, [r6, #0]
 80036e4:	681e      	ldr	r6, [r3, #0]
 80036e6:	6862      	ldr	r2, [r4, #4]
 80036e8:	4630      	mov	r0, r6
 80036ea:	f000 f99f 	bl	8003a2c <memchr>
 80036ee:	b108      	cbz	r0, 80036f4 <_printf_i+0x1e4>
 80036f0:	1b80      	subs	r0, r0, r6
 80036f2:	6060      	str	r0, [r4, #4]
 80036f4:	6863      	ldr	r3, [r4, #4]
 80036f6:	6123      	str	r3, [r4, #16]
 80036f8:	2300      	movs	r3, #0
 80036fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036fe:	e7aa      	b.n	8003656 <_printf_i+0x146>
 8003700:	4632      	mov	r2, r6
 8003702:	4649      	mov	r1, r9
 8003704:	4640      	mov	r0, r8
 8003706:	6923      	ldr	r3, [r4, #16]
 8003708:	47d0      	blx	sl
 800370a:	3001      	adds	r0, #1
 800370c:	d0ad      	beq.n	800366a <_printf_i+0x15a>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	079b      	lsls	r3, r3, #30
 8003712:	d413      	bmi.n	800373c <_printf_i+0x22c>
 8003714:	68e0      	ldr	r0, [r4, #12]
 8003716:	9b03      	ldr	r3, [sp, #12]
 8003718:	4298      	cmp	r0, r3
 800371a:	bfb8      	it	lt
 800371c:	4618      	movlt	r0, r3
 800371e:	e7a6      	b.n	800366e <_printf_i+0x15e>
 8003720:	2301      	movs	r3, #1
 8003722:	4632      	mov	r2, r6
 8003724:	4649      	mov	r1, r9
 8003726:	4640      	mov	r0, r8
 8003728:	47d0      	blx	sl
 800372a:	3001      	adds	r0, #1
 800372c:	d09d      	beq.n	800366a <_printf_i+0x15a>
 800372e:	3501      	adds	r5, #1
 8003730:	68e3      	ldr	r3, [r4, #12]
 8003732:	9903      	ldr	r1, [sp, #12]
 8003734:	1a5b      	subs	r3, r3, r1
 8003736:	42ab      	cmp	r3, r5
 8003738:	dcf2      	bgt.n	8003720 <_printf_i+0x210>
 800373a:	e7eb      	b.n	8003714 <_printf_i+0x204>
 800373c:	2500      	movs	r5, #0
 800373e:	f104 0619 	add.w	r6, r4, #25
 8003742:	e7f5      	b.n	8003730 <_printf_i+0x220>
 8003744:	08003abf 	.word	0x08003abf
 8003748:	08003ad0 	.word	0x08003ad0

0800374c <__sflush_r>:
 800374c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	0716      	lsls	r6, r2, #28
 8003754:	4605      	mov	r5, r0
 8003756:	460c      	mov	r4, r1
 8003758:	d454      	bmi.n	8003804 <__sflush_r+0xb8>
 800375a:	684b      	ldr	r3, [r1, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	dc02      	bgt.n	8003766 <__sflush_r+0x1a>
 8003760:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	dd48      	ble.n	80037f8 <__sflush_r+0xac>
 8003766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003768:	2e00      	cmp	r6, #0
 800376a:	d045      	beq.n	80037f8 <__sflush_r+0xac>
 800376c:	2300      	movs	r3, #0
 800376e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003772:	682f      	ldr	r7, [r5, #0]
 8003774:	6a21      	ldr	r1, [r4, #32]
 8003776:	602b      	str	r3, [r5, #0]
 8003778:	d030      	beq.n	80037dc <__sflush_r+0x90>
 800377a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800377c:	89a3      	ldrh	r3, [r4, #12]
 800377e:	0759      	lsls	r1, r3, #29
 8003780:	d505      	bpl.n	800378e <__sflush_r+0x42>
 8003782:	6863      	ldr	r3, [r4, #4]
 8003784:	1ad2      	subs	r2, r2, r3
 8003786:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003788:	b10b      	cbz	r3, 800378e <__sflush_r+0x42>
 800378a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800378c:	1ad2      	subs	r2, r2, r3
 800378e:	2300      	movs	r3, #0
 8003790:	4628      	mov	r0, r5
 8003792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003794:	6a21      	ldr	r1, [r4, #32]
 8003796:	47b0      	blx	r6
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	89a3      	ldrh	r3, [r4, #12]
 800379c:	d106      	bne.n	80037ac <__sflush_r+0x60>
 800379e:	6829      	ldr	r1, [r5, #0]
 80037a0:	291d      	cmp	r1, #29
 80037a2:	d82b      	bhi.n	80037fc <__sflush_r+0xb0>
 80037a4:	4a28      	ldr	r2, [pc, #160]	@ (8003848 <__sflush_r+0xfc>)
 80037a6:	40ca      	lsrs	r2, r1
 80037a8:	07d6      	lsls	r6, r2, #31
 80037aa:	d527      	bpl.n	80037fc <__sflush_r+0xb0>
 80037ac:	2200      	movs	r2, #0
 80037ae:	6062      	str	r2, [r4, #4]
 80037b0:	6922      	ldr	r2, [r4, #16]
 80037b2:	04d9      	lsls	r1, r3, #19
 80037b4:	6022      	str	r2, [r4, #0]
 80037b6:	d504      	bpl.n	80037c2 <__sflush_r+0x76>
 80037b8:	1c42      	adds	r2, r0, #1
 80037ba:	d101      	bne.n	80037c0 <__sflush_r+0x74>
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	b903      	cbnz	r3, 80037c2 <__sflush_r+0x76>
 80037c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80037c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037c4:	602f      	str	r7, [r5, #0]
 80037c6:	b1b9      	cbz	r1, 80037f8 <__sflush_r+0xac>
 80037c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037cc:	4299      	cmp	r1, r3
 80037ce:	d002      	beq.n	80037d6 <__sflush_r+0x8a>
 80037d0:	4628      	mov	r0, r5
 80037d2:	f7ff fbf5 	bl	8002fc0 <_free_r>
 80037d6:	2300      	movs	r3, #0
 80037d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80037da:	e00d      	b.n	80037f8 <__sflush_r+0xac>
 80037dc:	2301      	movs	r3, #1
 80037de:	4628      	mov	r0, r5
 80037e0:	47b0      	blx	r6
 80037e2:	4602      	mov	r2, r0
 80037e4:	1c50      	adds	r0, r2, #1
 80037e6:	d1c9      	bne.n	800377c <__sflush_r+0x30>
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0c6      	beq.n	800377c <__sflush_r+0x30>
 80037ee:	2b1d      	cmp	r3, #29
 80037f0:	d001      	beq.n	80037f6 <__sflush_r+0xaa>
 80037f2:	2b16      	cmp	r3, #22
 80037f4:	d11d      	bne.n	8003832 <__sflush_r+0xe6>
 80037f6:	602f      	str	r7, [r5, #0]
 80037f8:	2000      	movs	r0, #0
 80037fa:	e021      	b.n	8003840 <__sflush_r+0xf4>
 80037fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003800:	b21b      	sxth	r3, r3
 8003802:	e01a      	b.n	800383a <__sflush_r+0xee>
 8003804:	690f      	ldr	r7, [r1, #16]
 8003806:	2f00      	cmp	r7, #0
 8003808:	d0f6      	beq.n	80037f8 <__sflush_r+0xac>
 800380a:	0793      	lsls	r3, r2, #30
 800380c:	bf18      	it	ne
 800380e:	2300      	movne	r3, #0
 8003810:	680e      	ldr	r6, [r1, #0]
 8003812:	bf08      	it	eq
 8003814:	694b      	ldreq	r3, [r1, #20]
 8003816:	1bf6      	subs	r6, r6, r7
 8003818:	600f      	str	r7, [r1, #0]
 800381a:	608b      	str	r3, [r1, #8]
 800381c:	2e00      	cmp	r6, #0
 800381e:	ddeb      	ble.n	80037f8 <__sflush_r+0xac>
 8003820:	4633      	mov	r3, r6
 8003822:	463a      	mov	r2, r7
 8003824:	4628      	mov	r0, r5
 8003826:	6a21      	ldr	r1, [r4, #32]
 8003828:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800382c:	47e0      	blx	ip
 800382e:	2800      	cmp	r0, #0
 8003830:	dc07      	bgt.n	8003842 <__sflush_r+0xf6>
 8003832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800383a:	f04f 30ff 	mov.w	r0, #4294967295
 800383e:	81a3      	strh	r3, [r4, #12]
 8003840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003842:	4407      	add	r7, r0
 8003844:	1a36      	subs	r6, r6, r0
 8003846:	e7e9      	b.n	800381c <__sflush_r+0xd0>
 8003848:	20400001 	.word	0x20400001

0800384c <_fflush_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	690b      	ldr	r3, [r1, #16]
 8003850:	4605      	mov	r5, r0
 8003852:	460c      	mov	r4, r1
 8003854:	b913      	cbnz	r3, 800385c <_fflush_r+0x10>
 8003856:	2500      	movs	r5, #0
 8003858:	4628      	mov	r0, r5
 800385a:	bd38      	pop	{r3, r4, r5, pc}
 800385c:	b118      	cbz	r0, 8003866 <_fflush_r+0x1a>
 800385e:	6a03      	ldr	r3, [r0, #32]
 8003860:	b90b      	cbnz	r3, 8003866 <_fflush_r+0x1a>
 8003862:	f7ff f9ab 	bl	8002bbc <__sinit>
 8003866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f3      	beq.n	8003856 <_fflush_r+0xa>
 800386e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003870:	07d0      	lsls	r0, r2, #31
 8003872:	d404      	bmi.n	800387e <_fflush_r+0x32>
 8003874:	0599      	lsls	r1, r3, #22
 8003876:	d402      	bmi.n	800387e <_fflush_r+0x32>
 8003878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800387a:	f7ff fb9e 	bl	8002fba <__retarget_lock_acquire_recursive>
 800387e:	4628      	mov	r0, r5
 8003880:	4621      	mov	r1, r4
 8003882:	f7ff ff63 	bl	800374c <__sflush_r>
 8003886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003888:	4605      	mov	r5, r0
 800388a:	07da      	lsls	r2, r3, #31
 800388c:	d4e4      	bmi.n	8003858 <_fflush_r+0xc>
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	059b      	lsls	r3, r3, #22
 8003892:	d4e1      	bmi.n	8003858 <_fflush_r+0xc>
 8003894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003896:	f7ff fb91 	bl	8002fbc <__retarget_lock_release_recursive>
 800389a:	e7dd      	b.n	8003858 <_fflush_r+0xc>

0800389c <__swhatbuf_r>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	460c      	mov	r4, r1
 80038a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a4:	4615      	mov	r5, r2
 80038a6:	2900      	cmp	r1, #0
 80038a8:	461e      	mov	r6, r3
 80038aa:	b096      	sub	sp, #88	@ 0x58
 80038ac:	da0c      	bge.n	80038c8 <__swhatbuf_r+0x2c>
 80038ae:	89a3      	ldrh	r3, [r4, #12]
 80038b0:	2100      	movs	r1, #0
 80038b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80038b6:	bf14      	ite	ne
 80038b8:	2340      	movne	r3, #64	@ 0x40
 80038ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80038be:	2000      	movs	r0, #0
 80038c0:	6031      	str	r1, [r6, #0]
 80038c2:	602b      	str	r3, [r5, #0]
 80038c4:	b016      	add	sp, #88	@ 0x58
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	466a      	mov	r2, sp
 80038ca:	f000 f87d 	bl	80039c8 <_fstat_r>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	dbed      	blt.n	80038ae <__swhatbuf_r+0x12>
 80038d2:	9901      	ldr	r1, [sp, #4]
 80038d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80038d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80038dc:	4259      	negs	r1, r3
 80038de:	4159      	adcs	r1, r3
 80038e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038e4:	e7eb      	b.n	80038be <__swhatbuf_r+0x22>

080038e6 <__smakebuf_r>:
 80038e6:	898b      	ldrh	r3, [r1, #12]
 80038e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ea:	079d      	lsls	r5, r3, #30
 80038ec:	4606      	mov	r6, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	d507      	bpl.n	8003902 <__smakebuf_r+0x1c>
 80038f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80038f6:	6023      	str	r3, [r4, #0]
 80038f8:	6123      	str	r3, [r4, #16]
 80038fa:	2301      	movs	r3, #1
 80038fc:	6163      	str	r3, [r4, #20]
 80038fe:	b003      	add	sp, #12
 8003900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003902:	466a      	mov	r2, sp
 8003904:	ab01      	add	r3, sp, #4
 8003906:	f7ff ffc9 	bl	800389c <__swhatbuf_r>
 800390a:	9f00      	ldr	r7, [sp, #0]
 800390c:	4605      	mov	r5, r0
 800390e:	4639      	mov	r1, r7
 8003910:	4630      	mov	r0, r6
 8003912:	f7ff fbbf 	bl	8003094 <_malloc_r>
 8003916:	b948      	cbnz	r0, 800392c <__smakebuf_r+0x46>
 8003918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800391c:	059a      	lsls	r2, r3, #22
 800391e:	d4ee      	bmi.n	80038fe <__smakebuf_r+0x18>
 8003920:	f023 0303 	bic.w	r3, r3, #3
 8003924:	f043 0302 	orr.w	r3, r3, #2
 8003928:	81a3      	strh	r3, [r4, #12]
 800392a:	e7e2      	b.n	80038f2 <__smakebuf_r+0xc>
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003936:	81a3      	strh	r3, [r4, #12]
 8003938:	9b01      	ldr	r3, [sp, #4]
 800393a:	6020      	str	r0, [r4, #0]
 800393c:	b15b      	cbz	r3, 8003956 <__smakebuf_r+0x70>
 800393e:	4630      	mov	r0, r6
 8003940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003944:	f000 f852 	bl	80039ec <_isatty_r>
 8003948:	b128      	cbz	r0, 8003956 <__smakebuf_r+0x70>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	f023 0303 	bic.w	r3, r3, #3
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	81a3      	strh	r3, [r4, #12]
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	431d      	orrs	r5, r3
 800395a:	81a5      	strh	r5, [r4, #12]
 800395c:	e7cf      	b.n	80038fe <__smakebuf_r+0x18>

0800395e <_putc_r>:
 800395e:	b570      	push	{r4, r5, r6, lr}
 8003960:	460d      	mov	r5, r1
 8003962:	4614      	mov	r4, r2
 8003964:	4606      	mov	r6, r0
 8003966:	b118      	cbz	r0, 8003970 <_putc_r+0x12>
 8003968:	6a03      	ldr	r3, [r0, #32]
 800396a:	b90b      	cbnz	r3, 8003970 <_putc_r+0x12>
 800396c:	f7ff f926 	bl	8002bbc <__sinit>
 8003970:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003972:	07d8      	lsls	r0, r3, #31
 8003974:	d405      	bmi.n	8003982 <_putc_r+0x24>
 8003976:	89a3      	ldrh	r3, [r4, #12]
 8003978:	0599      	lsls	r1, r3, #22
 800397a:	d402      	bmi.n	8003982 <_putc_r+0x24>
 800397c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800397e:	f7ff fb1c 	bl	8002fba <__retarget_lock_acquire_recursive>
 8003982:	68a3      	ldr	r3, [r4, #8]
 8003984:	3b01      	subs	r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	60a3      	str	r3, [r4, #8]
 800398a:	da05      	bge.n	8003998 <_putc_r+0x3a>
 800398c:	69a2      	ldr	r2, [r4, #24]
 800398e:	4293      	cmp	r3, r2
 8003990:	db12      	blt.n	80039b8 <_putc_r+0x5a>
 8003992:	b2eb      	uxtb	r3, r5
 8003994:	2b0a      	cmp	r3, #10
 8003996:	d00f      	beq.n	80039b8 <_putc_r+0x5a>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	6022      	str	r2, [r4, #0]
 800399e:	701d      	strb	r5, [r3, #0]
 80039a0:	b2ed      	uxtb	r5, r5
 80039a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039a4:	07da      	lsls	r2, r3, #31
 80039a6:	d405      	bmi.n	80039b4 <_putc_r+0x56>
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	059b      	lsls	r3, r3, #22
 80039ac:	d402      	bmi.n	80039b4 <_putc_r+0x56>
 80039ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039b0:	f7ff fb04 	bl	8002fbc <__retarget_lock_release_recursive>
 80039b4:	4628      	mov	r0, r5
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
 80039b8:	4629      	mov	r1, r5
 80039ba:	4622      	mov	r2, r4
 80039bc:	4630      	mov	r0, r6
 80039be:	f7ff f9ee 	bl	8002d9e <__swbuf_r>
 80039c2:	4605      	mov	r5, r0
 80039c4:	e7ed      	b.n	80039a2 <_putc_r+0x44>
	...

080039c8 <_fstat_r>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	2300      	movs	r3, #0
 80039cc:	4d06      	ldr	r5, [pc, #24]	@ (80039e8 <_fstat_r+0x20>)
 80039ce:	4604      	mov	r4, r0
 80039d0:	4608      	mov	r0, r1
 80039d2:	4611      	mov	r1, r2
 80039d4:	602b      	str	r3, [r5, #0]
 80039d6:	f7fc ffa7 	bl	8000928 <_fstat>
 80039da:	1c43      	adds	r3, r0, #1
 80039dc:	d102      	bne.n	80039e4 <_fstat_r+0x1c>
 80039de:	682b      	ldr	r3, [r5, #0]
 80039e0:	b103      	cbz	r3, 80039e4 <_fstat_r+0x1c>
 80039e2:	6023      	str	r3, [r4, #0]
 80039e4:	bd38      	pop	{r3, r4, r5, pc}
 80039e6:	bf00      	nop
 80039e8:	20000308 	.word	0x20000308

080039ec <_isatty_r>:
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	2300      	movs	r3, #0
 80039f0:	4d05      	ldr	r5, [pc, #20]	@ (8003a08 <_isatty_r+0x1c>)
 80039f2:	4604      	mov	r4, r0
 80039f4:	4608      	mov	r0, r1
 80039f6:	602b      	str	r3, [r5, #0]
 80039f8:	f7fc ffa5 	bl	8000946 <_isatty>
 80039fc:	1c43      	adds	r3, r0, #1
 80039fe:	d102      	bne.n	8003a06 <_isatty_r+0x1a>
 8003a00:	682b      	ldr	r3, [r5, #0]
 8003a02:	b103      	cbz	r3, 8003a06 <_isatty_r+0x1a>
 8003a04:	6023      	str	r3, [r4, #0]
 8003a06:	bd38      	pop	{r3, r4, r5, pc}
 8003a08:	20000308 	.word	0x20000308

08003a0c <_sbrk_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	2300      	movs	r3, #0
 8003a10:	4d05      	ldr	r5, [pc, #20]	@ (8003a28 <_sbrk_r+0x1c>)
 8003a12:	4604      	mov	r4, r0
 8003a14:	4608      	mov	r0, r1
 8003a16:	602b      	str	r3, [r5, #0]
 8003a18:	f7fc ffac 	bl	8000974 <_sbrk>
 8003a1c:	1c43      	adds	r3, r0, #1
 8003a1e:	d102      	bne.n	8003a26 <_sbrk_r+0x1a>
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	b103      	cbz	r3, 8003a26 <_sbrk_r+0x1a>
 8003a24:	6023      	str	r3, [r4, #0]
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
 8003a28:	20000308 	.word	0x20000308

08003a2c <memchr>:
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	b2c9      	uxtb	r1, r1
 8003a32:	4402      	add	r2, r0
 8003a34:	4293      	cmp	r3, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	d101      	bne.n	8003a3e <memchr+0x12>
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	e003      	b.n	8003a46 <memchr+0x1a>
 8003a3e:	7804      	ldrb	r4, [r0, #0]
 8003a40:	3301      	adds	r3, #1
 8003a42:	428c      	cmp	r4, r1
 8003a44:	d1f6      	bne.n	8003a34 <memchr+0x8>
 8003a46:	bd10      	pop	{r4, pc}

08003a48 <_init>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	bf00      	nop
 8003a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4e:	bc08      	pop	{r3}
 8003a50:	469e      	mov	lr, r3
 8003a52:	4770      	bx	lr

08003a54 <_fini>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr
